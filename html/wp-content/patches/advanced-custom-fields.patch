diff --git a/html/wp-content/plugins/advanced-custom-fields/acf.php b/html/wp-content/plugins/advanced-custom-fields/acf.php
index 4553293..85436ae 100644
--- a/html/wp-content/plugins/advanced-custom-fields/acf.php
+++ b/html/wp-content/plugins/advanced-custom-fields/acf.php
@@ -16,8 +16,8 @@ class acf
 {
 	// vars
 	var $settings;
-		
-	
+
+
 	/*
 	*  Constructor
 	*
@@ -30,14 +30,14 @@ class acf
 	*  @param	N/A
 	*  @return	N/A
 	*/
-	
+
 	function __construct()
 	{
 		// helpers
 		add_filter('acf/helpers/get_path', array($this, 'helpers_get_path'), 1, 1);
 		add_filter('acf/helpers/get_dir', array($this, 'helpers_get_dir'), 1, 1);
-		
-		
+
+
 		// vars
 		$this->settings = array(
 			'path'				=> apply_filters('acf/helpers/get_path', __FILE__),
@@ -47,12 +47,12 @@ class acf
 			'upgrade_version'	=> '3.4.1',
 			'include_3rd_party'	=> false
 		);
-		
-		
+
+
 		// set text domain
 		load_textdomain('acf', $this->settings['path'] . 'lang/acf-' . get_locale() . '.mo');
-		
-		
+
+
 		// actions
 		add_action('init', array($this, 'init'), 1);
 		add_action('acf/pre_save_post', array($this, 'save_post_lock'), 0);
@@ -61,8 +61,8 @@ class acf
 		add_action('acf/save_post', array($this, 'save_post'), 10);
 		add_action('acf/save_post', array($this, 'save_post_unlock'), 999);
 		add_action('acf/create_fields', array($this, 'create_fields'), 1, 2);
-		
-		
+
+
 		// filters
 		add_filter('acf/get_info', array($this, 'get_info'), 1, 1);
 		add_filter('acf/parse_types', array($this, 'parse_types'), 1, 1);
@@ -70,16 +70,16 @@ class acf
 		add_filter('acf/get_taxonomies_for_select', array($this, 'get_taxonomies_for_select'), 1, 2);
 		add_filter('acf/get_image_sizes', array($this, 'get_image_sizes'), 1, 1);
 		add_filter('acf/get_post_id', array($this, 'get_post_id'), 1, 1);
-		
-		
+
+
 		// includes
 		$this->include_before_theme();
 		add_action('after_setup_theme', array($this, 'include_after_theme'), 1);
 		add_action('after_setup_theme', array($this, 'include_3rd_party'), 1);
-		
+
 	}
-	
-	
+
+
 	/*
 	*  helpers_get_path
 	*
@@ -92,13 +92,13 @@ class acf
 	*  @param	$file (file) a reference to the file
 	*  @return	(string)
 	*/
-    
+
     function helpers_get_path( $file )
     {
         return trailingslashit(dirname($file));
     }
-    
-    
+
+
     /*
 	*  helpers_get_dir
 	*
@@ -111,42 +111,42 @@ class acf
 	*  @param	$file (file) a reference to the file
 	*  @return	(string)
 	*/
-    
+
     function helpers_get_dir( $file )
     {
         $dir = trailingslashit(dirname($file));
         $count = 0;
-        
-        
+
+
         // sanitize for Win32 installs
-        $dir = str_replace('\\' ,'/', $dir); 
-        
-        
+        $dir = str_replace('\\' ,'/', $dir);
+
+
         // if file is in plugins folder
-        $wp_plugin_dir = str_replace('\\' ,'/', WP_PLUGIN_DIR); 
+        $wp_plugin_dir = str_replace('\\' ,'/', WP_PLUGIN_DIR);
         $dir = str_replace($wp_plugin_dir, plugins_url(), $dir, $count);
-        
-        
+
+
         if( $count < 1 )
         {
 	        // if file is in wp-content folder
-	        $wp_content_dir = str_replace('\\' ,'/', WP_CONTENT_DIR); 
+	        $wp_content_dir = str_replace('\\' ,'/', WP_CONTENT_DIR);
 	        $dir = str_replace($wp_content_dir, content_url(), $dir, $count);
         }
-        
-        
+
+
         if( $count < 1 )
         {
 	        // if file is in ??? folder
-	        $wp_dir = str_replace('\\' ,'/', ABSPATH); 
+	        $wp_dir = str_replace('\\' ,'/', ABSPATH);
 	        $dir = str_replace($wp_dir, site_url('/'), $dir);
         }
-        
+
 
         return $dir;
     }
-	
-	
+
+
 	/*
 	*  acf/get_post_id
 	*
@@ -158,96 +158,96 @@ class acf
 	*  @param	{mixed}	$post_id
 	*  @return	{mixed}	$post_id
 	*/
-	
+
 	function get_post_id( $post_id ) {
-		
+
 		// if not $post_id, load queried object
 		if( !$post_id ) {
-			
+
 			// try for global post (needed for setup_postdata)
 			$post_id = (int) get_the_ID();
-			
-			
+
+
 			// try for current screen
 			if( !$post_id ) {
-				
+
 				$post_id = get_queried_object();
-					
+
 			}
-			
+
 		}
-		
-		
+
+
 		// $post_id may be an object
 		if( is_object($post_id) ) {
-			
+
 			// user
 			if( isset($post_id->roles, $post_id->ID) ) {
-			
+
 				$post_id = 'user_' . $post_id->ID;
-			
+
 			// term
 			} elseif( isset($post_id->taxonomy, $post_id->term_id) ) {
-			
+
 				$post_id = $post_id->taxonomy . '_' . $post_id->term_id;
-			
+
 			// comment
 			} elseif( isset($post_id->comment_ID) ) {
-			
+
 				$post_id = 'comment_' . $post_id->comment_ID;
-			
+
 			// post
 			} elseif( isset($post_id->ID) ) {
-			
+
 				$post_id = $post_id->ID;
-			
+
 			// default
 			} else {
-				
+
 				$post_id = 0;
-				
+
 			}
-			
+
 		}
-		
-		
+
+
 		// allow for option == options
 		if( $post_id === 'option' ) {
-		
+
 			$post_id = 'options';
-			
+
 		}
-		
-		
+
+
 		/*
 		*  Override for preview
-		*  
+		*
 		*  If the $_GET['preview_id'] is set, then the user wants to see the preview data.
 		*  There is also the case of previewing a page with post_id = 1, but using get_field
 		*  to load data from another post_id.
 		*  In this case, we need to make sure that the autosave revision is actually related
-		*  to the $post_id variable. If they match, then the autosave data will be used, otherwise, 
+		*  to the $post_id variable. If they match, then the autosave data will be used, otherwise,
 		*  the user wants to load data from a completely different post_id
 		*/
-		
+
 		if( isset($_GET['preview_id']) ) {
-		
+
 			$autosave = wp_get_post_autosave( $_GET['preview_id'] );
-			
+
 			if( $autosave && $autosave->post_parent == $post_id ) {
-			
+
 				$post_id = (int) $autosave->ID;
-				
+
 			}
-			
+
 		}
-		
-		
+
+
 		// return
 		return $post_id;
 	}
-	
-	
+
+
 	/*
 	*  get_info
 	*
@@ -260,32 +260,32 @@ class acf
 	*  @param	$i (string) the setting to get
 	*  @return	(mixed)
 	*/
-	
+
 	function get_info( $i )
 	{
 		// vars
 		$return = false;
-		
-		
+
+
 		// specific
 		if( isset($this->settings[ $i ]) )
 		{
 			$return = $this->settings[ $i ];
 		}
-		
-		
+
+
 		// all
 		if( $i == 'all' )
 		{
 			$return = $this->settings;
 		}
-		
-		
+
+
 		// return
 		return $return;
 	}
-	
-	
+
+
 	/*
 	*  parse_types
 	*
@@ -293,7 +293,7 @@ class acf
 	*  @since: 2.0.4
 	*  @created: 9/12/12
 	*/
-	
+
 	function parse_types( $value )
 	{
 		// vars
@@ -304,8 +304,8 @@ class acf
 			'value',
 			'instructions'
 		);
-		
-		
+
+
 		// is value another array?
 		if( is_array($value) )
 		{
@@ -316,11 +316,11 @@ class acf
 				{
 					continue;
 				}
-				
-				
+
+
 				// filter piece
 				$value[ $k ] = apply_filters( 'acf/parse_types', $v );
-			}	
+			}
 		}
 		else
 		{
@@ -329,8 +329,8 @@ class acf
 			{
 				$value = trim( $value );
 			}
-			
-			
+
+
 			// numbers
 			if( is_numeric($value) )
 			{
@@ -346,18 +346,18 @@ class acf
 				}
 			}
 		}
-		
-		
+
+
 		// return
 		return $value;
 	}
-	
-	
+
+
 	/*
 	*  include_before_theme
 	*
 	*  This function will include core files before the theme's functions.php file has been excecuted.
-	*  
+	*
 	*  @type	action (plugins_loaded)
 	*  @date	3/09/13
 	*  @since	4.3.0
@@ -365,62 +365,62 @@ class acf
 	*  @param	N/A
 	*  @return	N/A
 	*/
-	
+
 	function include_before_theme()
 	{
 		// incudes
 		include_once('core/api.php');
-		
+
 		include_once('core/controllers/input.php');
 		include_once('core/controllers/location.php');
 		include_once('core/controllers/field_group.php');
-		
-		
+
+
 		// admin only includes
 		if( is_admin() )
 		{
 			include_once('core/controllers/post.php');
 			include_once('core/controllers/revisions.php');
-			include_once('core/controllers/everything_fields.php');	
+			include_once('core/controllers/everything_fields.php');
 			include_once('core/controllers/field_groups.php');
 		}
-		
-		
+
+
 		// register fields
 		include_once('core/fields/_functions.php');
 		include_once('core/fields/_base.php');
-		
+
 		include_once('core/fields/text.php');
 		include_once('core/fields/textarea.php');
 		include_once('core/fields/number.php');
 		include_once('core/fields/email.php');
 		include_once('core/fields/password.php');
-		
+
 		include_once('core/fields/wysiwyg.php');
 		include_once('core/fields/image.php');
 		include_once('core/fields/file.php');
-		
+
 		include_once('core/fields/select.php');
 		include_once('core/fields/checkbox.php');
 		include_once('core/fields/radio.php');
 		include_once('core/fields/true_false.php');
-		
+
 		include_once('core/fields/page_link.php');
 		include_once('core/fields/post_object.php');
 		include_once('core/fields/relationship.php');
 		include_once('core/fields/taxonomy.php');
 		include_once('core/fields/user.php');
-		
+
 		include_once('core/fields/google-map.php');
 		include_once('core/fields/date_picker/date_picker.php');
 		include_once('core/fields/color_picker.php');
-		
+
 		include_once('core/fields/message.php');
 		include_once('core/fields/tab.php');
 
 	}
-	
-	
+
+
 	/*
 	*  include_3rd_party
 	*
@@ -433,31 +433,31 @@ class acf
 	*  @param	N/A
 	*  @return	N/A
 	*/
-	
+
 	function include_3rd_party() {
-		
+
 		// run only once
 		if( $this->settings['include_3rd_party'] )
 		{
 			return false;
 		}
-		
-		
+
+
 		// update setting
 		$this->settings['include_3rd_party'] = true;
-		
-		
+
+
 		// include 3rd party fields
 		do_action('acf/register_fields');
-		
+
 	}
-	
-	
+
+
 	/*
 	*  include_after_theme
 	*
 	*  This function will include core files after the theme's functions.php file has been excecuted.
-	*  
+	*
 	*  @type	action (after_setup_theme)
 	*  @date	3/09/13
 	*  @since	4.3.0
@@ -465,16 +465,16 @@ class acf
 	*  @param	N/A
 	*  @return	N/A
 	*/
-	
+
 	function include_after_theme() {
-		
+
 		// bail early if user has defined LITE_MODE as true
 		if( defined('ACF_LITE') && ACF_LITE )
 		{
 			return;
 		}
-		
-		
+
+
 		// admin only includes
 		if( is_admin() )
 		{
@@ -483,10 +483,10 @@ class acf
 			include_once('core/controllers/third_party.php');
 			include_once('core/controllers/upgrade.php');
 		}
-		
+
 	}
-	
-	
+
+
 	/*
 	*  init
 	*
@@ -500,10 +500,10 @@ class acf
 	*  @param	N/A
 	*  @return	N/A
 	*/
-	
+
 	function init()
 	{
-		
+
 		// Create ACF post type
 		$labels = array(
 		    'name' => __( 'Field&nbsp;Groups', 'acf' ),
@@ -515,9 +515,9 @@ class acf
 		    'view_item' => __('View Field Group', 'acf'),
 		    'search_items' => __('Search Field Groups', 'acf'),
 		    'not_found' =>  __('No Field Groups found', 'acf'),
-		    'not_found_in_trash' => __('No Field Groups found in Trash', 'acf'), 
+		    'not_found_in_trash' => __('No Field Groups found in Trash', 'acf'),
 		);
-		
+
 		register_post_type('acf', array(
 			'labels' => $labels,
 			'public' => false,
@@ -532,12 +532,12 @@ class acf
 			),
 			'show_in_menu'	=> false,
 		));
-		
-		
+
+
 		// min
 		$min = defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG ? '' : '.min';
-		
-		
+
+
 		// register acf scripts
 		$scripts = array();
 		$scripts[] = array(
@@ -550,14 +550,14 @@ class acf
 			'src'		=> $this->settings['dir'] . "js/input{$min}.js",
 			'deps'		=> array('jquery', 'jquery-ui-core', 'jquery-ui-datepicker')
 		);
-		
-		
+
+
 		foreach( $scripts as $script )
 		{
 			wp_register_script( $script['handle'], $script['src'], $script['deps'], $this->settings['version'] );
 		}
-		
-		
+
+
 		// register acf styles
 		$styles = array(
 			'acf'				=> $this->settings['dir'] . 'css/acf.css',
@@ -566,20 +566,20 @@ class acf
 			'acf-input'			=> $this->settings['dir'] . 'css/input.css',
 			'acf-datepicker'	=> $this->settings['dir'] . 'core/fields/date_picker/style.date_picker.css',
 		);
-		
+
 		foreach( $styles as $k => $v )
 		{
-			wp_register_style( $k, $v, false, $this->settings['version'] ); 
+			wp_register_style( $k, $v, false, $this->settings['version'] );
 		}
-		
-		
+
+
 		// bail early if user has defined LITE_MODE as true
 		if( defined('ACF_LITE') && ACF_LITE )
 		{
 			return;
 		}
-		
-		
+
+
 		// admin only
 		if( is_admin() )
 		{
@@ -588,22 +588,22 @@ class acf
 			add_filter('post_updated_messages', array($this, 'post_updated_messages'));
 		}
 	}
-	
-	
+
+
 	/*
 	*  admin_menu
 	*
-	*  @description: 
+	*  @description:
 	*  @since 1.0.0
 	*  @created: 23/06/12
 	*/
-	
+
 	function admin_menu()
 	{
 		add_menu_page(__("Custom Fields",'acf'), __("Custom Fields",'acf'), 'manage_options', 'edit.php?post_type=acf', false, false, '80.025');
 	}
-	
-	
+
+
 	/*
 	*  post_updated_messages
 	*
@@ -615,7 +615,7 @@ class acf
 	function post_updated_messages( $messages )
 	{
 		global $post, $post_ID;
-	
+
 		$messages['acf'] = array(
 			0 => '', // Unused. Messages start at index 1.
 			1 => __('Field group updated.', 'acf'),
@@ -630,24 +630,24 @@ class acf
 			9 => __('Field group scheduled for.', 'acf'),
 			10 => __('Field group draft updated.', 'acf'),
 		);
-	
+
 		return $messages;
-	}	
-	
-	
+	}
+
+
 	/*--------------------------------------------------------------------------------------
 	*
 	*	admin_head
 	*
 	*	@author Elliot Condon
 	*	@since 1.0.0
-	* 
+	*
 	*-------------------------------------------------------------------------------------*/
-	
+
 	function admin_head()
 	{
 		?>
-<style type="text/css"> 
+<style type="text/css">
 	#adminmenu #toplevel_page_edit-post_type-acf a[href="edit.php?post_type=acf&page=acf-upgrade"]{ display: none; }
 	#adminmenu #toplevel_page_edit-post_type-acf .wp-menu-image { background-position: 1px -33px; }
 	#adminmenu #toplevel_page_edit-post_type-acf:hover .wp-menu-image,
@@ -655,22 +655,22 @@ class acf
 </style>
 		<?php
 	}
-	
-	
+
+
 	/*
 	*  get_taxonomies_for_select
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.6
 	*  @created: 27/01/13
 	*/
-	
+
 	function get_taxonomies_for_select( $choices, $simple_value = false )
-	{	
+	{
 		// vars
 		$post_types = get_post_types();
-		
-		
+
+
 		if($post_types)
 		{
 			foreach($post_types as $post_type)
@@ -688,65 +688,65 @@ class acf
 							foreach($terms as $term)
 							{
 								$value = $taxonomy . ':' . $term->term_id;
-								
+
 								if( $simple_value )
 								{
 									$value = $term->term_id;
 								}
-								
-								$choices[$post_type_object->label . ': ' . $taxonomy][$value] = $term->name; 
+
+								$choices[$post_type_object->label . ': ' . $taxonomy][$value] = $term->name;
 							}
 						}
 					}
 				}
 			}
 		}
-		
+
 		return $choices;
 	}
-	
-	
+
+
 	/*
 	*  get_post_types
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.5.5
 	*  @created: 16/12/12
 	*/
-	
+
 	function get_post_types( $post_types, $exclude = array(), $include = array() )
 	{
 		// get all custom post types
 		$post_types = array_merge($post_types, get_post_types());
-		
-		
+
+
 		// core include / exclude
 		$acf_includes = array_merge( array(), $include );
 		$acf_excludes = array_merge( array( 'acf', 'revision', 'nav_menu_item' ), $exclude );
-	 
-		
+
+
 		// include
 		foreach( $acf_includes as $p )
-		{					
+		{
 			if( post_type_exists($p) )
-			{							
+			{
 				$post_types[ $p ] = $p;
 			}
 		}
-		
-		
+
+
 		// exclude
 		foreach( $acf_excludes as $p )
 		{
 			unset( $post_types[ $p ] );
 		}
-		
-		
+
+
 		return $post_types;
-		
+
 	}
-	
-	
+
+
 	/*
 	*  get_image_sizes
 	*
@@ -754,13 +754,13 @@ class acf
 	*  @since 3.2.8
 	*  @created: 6/07/12
 	*/
-	
+
 	function get_image_sizes( $sizes )
 	{
 		// find all sizes
 		$all_sizes = get_intermediate_image_sizes();
-		
-		
+
+
 		// define default sizes
 		$sizes = array_merge($sizes, array(
 			'thumbnail'	=>	__("Thumbnail",'acf'),
@@ -768,8 +768,8 @@ class acf
 			'large'		=>	__("Large",'acf'),
 			'full'		=>	__("Full",'acf')
 		));
-		
-		
+
+
 		// add extra registered sizes
 		foreach( $all_sizes as $size )
 		{
@@ -778,68 +778,68 @@ class acf
 				$sizes[ $size ] = ucwords( str_replace('-', ' ', $size) );
 			}
 		}
-		
-		
+
+
 		// return array
 		return $sizes;
 	}
-	
-	
+
+
 	/*
 	*  render_fields_for_input
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.6
 	*  @created: 23/06/12
 	*/
-	
+
 	function create_fields( $fields, $post_id )
 	{
 		if( is_array($fields) ){ foreach( $fields as $field ){
-			
+
 			// if they didn't select a type, skip this field
 			if( !$field || !$field['type'] || $field['type'] == 'null' )
 			{
 				continue;
 			}
-			
-			
+
+
 			// set value
 			if( !isset($field['value']) )
 			{
 				$field['value'] = apply_filters('acf/load_value', false, $post_id, $field);
 				$field['value'] = apply_filters('acf/format_value', $field['value'], $post_id, $field);
 			}
-			
-			
+
+
 			// required
 			$required_class = "";
 			$required_label = "";
-			
+
 			if( $field['required'] )
 			{
 				$required_class = ' required';
 				$required_label = ' <span class="required">*</span>';
 			}
-			
-			
-			echo '<div id="acf-' . $field['name'] . '" class="field field_type-' . $field['type'] . ' field_key-' . $field['key'] . $required_class . '" data-field_name="' . $field['name'] . '" data-field_key="' . $field['key'] . '" data-field_type="' . $field['type'] . '">';
+
+
+			echo '<div id="acf-' . esc_attr( $field['name'] ) . '" class="field field_type-' . esc_attr( $field['type']) . ' field_key-' . esc_attr($field['key'] . $required_class )  . '" data-field_name="' . esc_attr($field['name']) . '" data-field_key="' . esc_attr($field['key']) . '" data-field_type="' . esc_attr($field['type']) . '">';
 
 				echo '<p class="label">';
-					echo '<label for="' . $field['id'] . '">' . $field['label'] . $required_label . '</label>';
+					echo '<label for="' . esc_attr($field['id']) . '">' . esc_attr($field['label'] . $required_label ) . '</label>';
 					echo $field['instructions'];
 				echo '</p>';
-				
-				$field['name'] = 'fields[' . $field['key'] . ']';
+
+				$field['name'] = 'fields[' . esc_attr($field['key'] ) . ']';
 				do_action('acf/create_field', $field, $post_id);
-			
+
 			echo '</div>';
-			
+
 		}}
-				
+
 	}
-	
-	
+
+
 	/*
 	*  save_post_lock
 	*
@@ -852,15 +852,15 @@ class acf
 	*  @param	{int}	$post_id
 	*  @return	{int}	$post_id
 	*/
-	
+
 	function save_post_lock( $post_id )
 	{
 		$GLOBALS['acf_save_lock'] = $post_id;
-		
+
 		return $post_id;
 	}
-	
-	
+
+
 	/*
 	*  save_post_unlock
 	*
@@ -873,32 +873,32 @@ class acf
 	*  @param	{int}	$post_id
 	*  @return	{int}	$post_id
 	*/
-	
+
 	function save_post_unlock( $post_id )
 	{
 		$GLOBALS['acf_save_lock'] = false;
-		
+
 		return $post_id;
 	}
-	
-	
+
+
 	/*
 	*  save_post
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.6
 	*  @created: 28/01/13
 	*/
-	
+
 	function save_post( $post_id )
 	{
-		
+
 		// load from post
 		if( !isset($_POST['fields']) )
 		{
 			return $post_id;
 		}
-		
+
 
 		// loop through and save
 		if( !empty($_POST['fields']) )
@@ -908,20 +908,20 @@ class acf
 			{
 				// get field
 				$f = apply_filters('acf/load_field', false, $k );
-				
+
 				// update field
 				do_action('acf/update_value', $v, $post_id, $f );
-				
+
 			}
 			// foreach($fields as $key => $value)
 		}
 		// if($fields)
-		
-		
+
+
 		return $post_id;
 	}
 
-	
+
 }
 
 
@@ -944,12 +944,12 @@ class acf
 function acf()
 {
 	global $acf;
-	
+
 	if( !isset($acf) )
 	{
 		$acf = new acf();
 	}
-	
+
 	return $acf;
 }
 
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/actions/export.php b/html/wp-content/plugins/advanced-custom-fields/core/actions/export.php
index a9d6ae9..ea2085b 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/actions/export.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/actions/export.php
@@ -3,7 +3,7 @@
 /*
 *  Export
 *
-*  @description: 
+*  @description:
 *  @since: 3.6
 *  @created: 25/01/13
 */
@@ -70,7 +70,7 @@ function fix_line_breaks( $v )
 	{
 		$v = str_replace("\r\n", "\r", $v);
 	}
-	
+
 	return $v;
 }
 
@@ -167,9 +167,9 @@ function wxr_authors_list() {
 
 	foreach( $authors as $author ) {
 		echo "\t<wp:author>";
-		echo '<wp:author_id>' . $author->ID . '</wp:author_id>';
-		echo '<wp:author_login>' . $author->user_login . '</wp:author_login>';
-		echo '<wp:author_email>' . $author->user_email . '</wp:author_email>';
+		echo '<wp:author_id>' . wxr_cdata($author->ID) . '</wp:author_id>';
+		echo '<wp:author_login>' . wxr_cdata($author->user_login) . '</wp:author_login>';
+		echo '<wp:author_email>' . wxr_cdata($author->user_email) . '</wp:author_email>';
 		echo '<wp:author_display_name>' . wxr_cdata( $author->display_name ) . '</wp:author_display_name>';
 		echo '<wp:author_first_name>' . wxr_cdata( $author->user_firstname ) . '</wp:author_first_name>';
 		echo '<wp:author_last_name>' . wxr_cdata( $author->user_lastname ) . '</wp:author_last_name>';
@@ -179,10 +179,10 @@ function wxr_authors_list() {
 
 header( 'Content-Description: File Transfer' );
 header( 'Content-Disposition: attachment; filename=advanced-custom-field-export.xml' );
-header( 'Content-Type: text/xml; charset=' . get_option( 'blog_charset' ), true );
+header( 'Content-Type: text/xml; charset=' . esc_attr(get_option( 'blog_charset' )) , true );
 
 
-echo '<?xml version="1.0" encoding="' . get_bloginfo('charset') . "\" ?>\n";
+echo '<?xml version="1.0" encoding="' . esc_attr(get_bloginfo('charset')) . "\" ?>\n";
 
 ?>
 <!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
@@ -225,10 +225,10 @@ echo '<?xml version="1.0" encoding="' . get_bloginfo('charset') . "\" ?>\n";
 
 	global $wp_query, $wpdb, $post;
 	$wp_query->in_the_loop = true; // Fake being in the loop.
-	
+
 	// create SQL with %d placeholders
 	$where = 'WHERE ID IN (' . substr(str_repeat('%d,', count($my_options['acf_posts'])), 0, -1) . ')';
-	
+
 	// now prepare the SQL based on the %d + $_POST data
 	$posts = $wpdb->get_results( $wpdb->prepare("SELECT * FROM {$wpdb->posts} $where", $my_options['acf_posts']));
 
@@ -254,22 +254,22 @@ echo '<?xml version="1.0" encoding="' . get_bloginfo('charset') . "\" ?>\n";
 		<wp:post_type><?php echo $post->post_type; ?></wp:post_type>
 		<wp:post_password><?php echo $post->post_password; ?></wp:post_password>
 <?php	$postmeta = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM $wpdb->postmeta WHERE post_id = %d", $post->ID ) );
-		foreach( $postmeta as $meta ) : if ( $meta->meta_key != '_edit_lock' ) : 
-			
+		foreach( $postmeta as $meta ) : if ( $meta->meta_key != '_edit_lock' ) :
+
 			$meta->meta_value = maybe_unserialize( $meta->meta_value );
 				$meta->meta_value = fix_line_breaks( $meta->meta_value );
 			$meta->meta_value = maybe_serialize( $meta->meta_value );
-						
+
 		?>
 		<wp:postmeta>
-			<wp:meta_key><?php echo $meta->meta_key; ?></wp:meta_key>
+			<wp:meta_key><?php echo wxr_cdata($meta->meta_key); ?></wp:meta_key>
 			<wp:meta_value><?php echo wxr_cdata( $meta->meta_value ); ?></wp:meta_value>
 		</wp:postmeta>
 <?php	endif; endforeach; ?>
 	</item>
 <?php
 	}
-} 
+}
 ?>
 </channel>
 </rss>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/api.php b/html/wp-content/plugins/advanced-custom-fields/core/api.php
index 8157bd5..a97fe8f 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/api.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/api.php
@@ -17,7 +17,7 @@
 */
 
 function get_field_reference( $field_name, $post_id ) {
-	
+
 	// cache
 	$found = false;
 	$cache = wp_cache_get( 'field_reference/post_id=' .  $post_id . '/name=' .  $field_name, 'acf', false, $found );
@@ -26,33 +26,33 @@ function get_field_reference( $field_name, $post_id ) {
 	{
 		return $cache;
 	}
-	
-	
+
+
 	// vars
 	$return = '';
 
-	
+
 	// get field key
 	if( is_numeric($post_id) )
 	{
-		$return = get_post_meta($post_id, '_' . $field_name, true); 
+		$return = get_post_meta($post_id, '_' . $field_name, true);
 	}
 	elseif( strpos($post_id, 'user_') !== false )
 	{
 		$temp_post_id = str_replace('user_', '', $post_id);
-		$return = get_user_meta($temp_post_id, '_' . $field_name, true); 
+		$return = get_user_meta($temp_post_id, '_' . $field_name, true);
 	}
 	else
 	{
-		$return = get_option('_' . $post_id . '_' . $field_name); 
+		$return = get_option('_' . $post_id . '_' . $field_name);
 	}
-	
-	
+
+
 	// set cache
 	wp_cache_set( 'field_reference/post_id=' .  $post_id . '/name=' .  $field_name, $return, 'acf' );
-		
-	
-	// return	
+
+
+	// return
 	return $return;
 }
 
@@ -73,11 +73,11 @@ function get_field_reference( $field_name, $post_id ) {
 */
 
 function get_field_objects( $post_id = false, $options = array() ) {
-	
+
 	// global
 	global $wpdb;
-	
-	
+
+
 	// filter post_id
 	$post_id = apply_filters('acf/get_post_id', $post_id );
 
@@ -85,8 +85,8 @@ function get_field_objects( $post_id = false, $options = array() ) {
 	// vars
 	$field_key = '';
 	$value = array();
-	
-	
+
+
 	// get field_names
 	if( is_numeric($post_id) )
 	{
@@ -100,7 +100,7 @@ function get_field_objects( $post_id = false, $options = array() ) {
 	elseif( strpos($post_id, 'user_') !== false )
 	{
 		$user_id = str_replace('user_', '', $post_id);
-		
+
 		$keys = $wpdb->get_col($wpdb->prepare(
 			"SELECT meta_value FROM $wpdb->usermeta WHERE user_id = %d and meta_key LIKE %s AND meta_value LIKE %s",
 			$user_id,
@@ -112,7 +112,7 @@ function get_field_objects( $post_id = false, $options = array() ) {
 	{
 		$keys = $wpdb->get_col($wpdb->prepare(
 			"SELECT option_value FROM $wpdb->options WHERE option_name LIKE %s",
-			'_' . $post_id . '_%' 
+			'_' . $post_id . '_%'
 		));
 	}
 
@@ -122,24 +122,24 @@ function get_field_objects( $post_id = false, $options = array() ) {
 		foreach( $keys as $key )
 		{
 			$field = get_field_object( $key, $post_id, $options );
-			
+
 			if( !is_array($field) )
 			{
 				continue;
 			}
-			
+
 			$value[ $field['name'] ] = $field;
 		}
  	}
- 	
- 	
+
+
 	// no value
 	if( empty($value) )
 	{
 		return false;
 	}
-	
-	
+
+
 	// return
 	return $value;
 }
@@ -161,16 +161,16 @@ function get_field_objects( $post_id = false, $options = array() ) {
 */
 
 function get_fields( $post_id = false, $format_value = true ) {
-	
+
 	// vars
 	$options = array(
 		'load_value' => true,
 		'format_value' => $format_value
 	);
-	
-	
+
+
 	$fields = get_field_objects( $post_id, $options );
-	
+
 	if( is_array($fields) )
 	{
 		foreach( $fields as $k => $field )
@@ -178,8 +178,8 @@ function get_fields( $post_id = false, $format_value = true ) {
 			$fields[ $k ] = $field['value'];
 		}
 	}
-	
-	return $fields;	
+
+	return $fields;
 }
 
 
@@ -187,7 +187,7 @@ function get_fields( $post_id = false, $format_value = true ) {
 *  get_field()
 *
 *  This function will return a custom field value for a specific field name/key + post_id.
-*  There is a 3rd parameter to turn on/off formating. This means that an Image field will not use 
+*  There is a 3rd parameter to turn on/off formating. This means that an Image field will not use
 *  its 'return option' to format the value but return only what was saved in the database
 *
 *  @type	function
@@ -200,9 +200,9 @@ function get_fields( $post_id = false, $format_value = true ) {
 *
 *  @return	mixed		$value: the value found
 */
- 
+
 function get_field( $field_key, $post_id = false, $format_value = true ) {
-	
+
 	// vars
 	$return = false;
 	$options = array(
@@ -210,18 +210,18 @@ function get_field( $field_key, $post_id = false, $format_value = true ) {
 		'format_value' => $format_value
 	);
 
-	
+
 	$field = get_field_object( $field_key, $post_id, $options);
-	
-	
+
+
 	if( is_array($field) )
 	{
 		$return = $field['value'];
 	}
-	
-	
+
+
 	return $return;
-	 
+
 }
 
 
@@ -244,41 +244,41 @@ function get_field( $field_key, $post_id = false, $format_value = true ) {
 */
 
 function get_field_object( $field_key, $post_id = false, $options = array() ) {
-	
+
 	// make sure add-ons are included
 	acf()->include_3rd_party();
-		
-		
+
+
 	// filter post_id
 	$post_id = apply_filters('acf/get_post_id', $post_id );
 	$field = false;
 	$orig_field_key = $field_key;
-	
-	
+
+
 	// defaults for options
 	$defaults = array(
 		'load_value'	=>	true,
 		'format_value'	=>	true,
 	);
-	
+
 	$options = array_merge($defaults, $options);
-	
-	
+
+
 	// is $field_name a name? pre 3.4.0
 	if( substr($field_key, 0, 6) !== 'field_' )
 	{
 		// get field key
 		$field_key = get_field_reference( $field_key, $post_id );
 	}
-	
-	
+
+
 	// get field
 	if( substr($field_key, 0, 6) === 'field_' )
 	{
 		$field = apply_filters('acf/load_field', false, $field_key );
 	}
-	
-	
+
+
 	// validate field
 	if( !$field )
 	{
@@ -296,8 +296,8 @@ function get_field_object( $field_key, $post_id = false, $options = array() ) {
 	if( $options['load_value'] )
 	{
 		$field['value'] = apply_filters('acf/load_value', false, $post_id, $field);
-		
-		
+
+
 		// format value
 		if( $options['format_value'] )
 		{
@@ -327,14 +327,14 @@ function get_field_object( $field_key, $post_id = false, $options = array() ) {
 */
 
 function the_field( $field_name, $post_id = false ) {
-	
+
 	$value = get_field($field_name, $post_id);
-	
+
 	if( is_array($value) )
 	{
 		$value = @implode(', ',$value);
 	}
-	
+
 	echo $value;
 }
 
@@ -354,29 +354,29 @@ function the_field( $field_name, $post_id = false ) {
 */
 
 function have_rows( $field_name, $post_id = false ) {
-	
+
 	// vars
 	$depth = 0;
 	$row = array();
 	$new_parent_loop = false;
 	$new_child_loop = false;
-	
-	
+
+
 	// reference
 	$_post_id = $post_id;
-	
-	
+
+
 	// filter post_id
 	$post_id = apply_filters('acf/get_post_id', $post_id );
-	
-	
+
+
 	// empty?
 	if( empty($GLOBALS['acf_field']) )
 	{
 		// reset
 		reset_rows( true );
-		
-		
+
+
 		// create a new loop
 		$new_parent_loop = true;
 	}
@@ -385,8 +385,8 @@ function have_rows( $field_name, $post_id = false ) {
 		// vars
 		$row = end( $GLOBALS['acf_field'] );
 		$prev = prev( $GLOBALS['acf_field'] );
-		
-		
+
+
 		// If post_id has changed, this is most likely an archive loop
 		if( $post_id != $row['post_id'] )
 		{
@@ -422,7 +422,7 @@ function have_rows( $field_name, $post_id = false ) {
 				// case: Change in $field_name was due to this being a nested loop
 				// action: move down one level into a new loop
 				$new_child_loop = true;
-				
+
 			}
 			else
 			{
@@ -430,20 +430,20 @@ function have_rows( $field_name, $post_id = false ) {
 				// action: leave this current loop alone and create a new parent loop
 				$new_parent_loop = true;
 			}
-			
-			
+
+
 		}
 	}
-	
-	
+
+
 	if( $new_parent_loop )
 	{
 		// vars
 		$f = get_field_object( $field_name, $post_id );
 		$v = $f['value'];
 		unset( $f['value'] );
-		
-		
+
+
 		// add row
 		$GLOBALS['acf_field'][] = array(
 			'name'		=> $field_name,
@@ -452,14 +452,14 @@ function have_rows( $field_name, $post_id = false ) {
 			'i'			=> -1,
 			'post_id'	=> $post_id,
 		);
-		
+
 	}
 	elseif( $new_child_loop )
 	{
 		// vars
 		$f = acf_get_child_field_from_parent_field( $field_name, $row['field'] );
 		$v = $row['value'][ $row['i'] ][ $field_name ];
-		
+
 		$GLOBALS['acf_field'][] = array(
 			'name'		=> $field_name,
 			'value'		=> $v,
@@ -468,27 +468,27 @@ function have_rows( $field_name, $post_id = false ) {
 			'post_id'	=> $post_id,
 		);
 
-	}	
-	
-	
+	}
+
+
 	// update vars
 	$row = end( $GLOBALS['acf_field'] );
-	
-	
+
+
 	if( is_array($row['value']) && array_key_exists( $row['i']+1, $row['value'] ) )
 	{
 		// next row exists
 		return true;
 	}
-	
-	
+
+
 	// no next row!
 	reset_rows();
-	
-	
+
+
 	// return
 	return false;
-  
+
 }
 
 
@@ -506,21 +506,21 @@ function have_rows( $field_name, $post_id = false ) {
 */
 
 function the_row() {
-	
+
 	// vars
 	$depth = count( $GLOBALS['acf_field'] ) - 1;
 
-	
-	
+
+
 	// increase row
 	$GLOBALS['acf_field'][ $depth ]['i']++;
-	
-	
+
+
 	// get row
 	$value = $GLOBALS['acf_field'][ $depth ]['value'];
 	$i = $GLOBALS['acf_field'][ $depth ]['i'];
 
-	
+
 	// return
 	return $value[ $i ];
 }
@@ -541,7 +541,7 @@ function the_row() {
 */
 
 function reset_rows( $hard_reset = false ) {
-	
+
 	// completely destroy?
 	if( $hard_reset )
 	{
@@ -551,21 +551,21 @@ function reset_rows( $hard_reset = false ) {
 	{
 		// vars
 		$depth = count( $GLOBALS['acf_field'] ) - 1;
-		
-		
+
+
 		// remove
 		unset( $GLOBALS['acf_field'][$depth] );
-		
-		
+
+
 		// refresh index
 		$GLOBALS['acf_field'] = array_values($GLOBALS['acf_field']);
 	}
-	
-	
+
+
 	// return
 	return true;
-	
-	
+
+
 }
 
 
@@ -573,7 +573,7 @@ function reset_rows( $hard_reset = false ) {
 *  has_sub_field()
 *
 *  This function is used inside a while loop to return either true or false (loop again or stop).
-*  When using a repeater or flexible content field, it will loop through the rows until 
+*  When using a repeater or flexible content field, it will loop through the rows until
 *  there are none left or a break is detected
 *
 *  @type	function
@@ -587,18 +587,18 @@ function reset_rows( $hard_reset = false ) {
 */
 
 function has_sub_field( $field_name, $post_id = false ) {
-	
+
 	// vars
 	$r = have_rows( $field_name, $post_id );
-	
-	
+
+
 	// if has rows, progress through 1 row for the while loop to work
 	if( $r )
 	{
 		the_row();
 	}
-	
-	
+
+
 	// return
 	return $r;
 }
@@ -640,25 +640,25 @@ function has_sub_fields( $field_name, $post_id = false )
 */
 
 function get_sub_field( $field_name ) {
-	
+
 	// no field?
 	if( empty($GLOBALS['acf_field']) )
 	{
 		return false;
 	}
-	
-	
+
+
 	// vars
 	$row = end( $GLOBALS['acf_field'] );
-	
-	
+
+
 	// return value
 	if( isset($row['value'][ $row['i'] ][ $field_name ]) )
 	{
 		return $row['value'][ $row['i'] ][ $field_name ];
 	}
-	
-	
+
+
 	// return false
 	return false;
 }
@@ -681,12 +681,12 @@ function get_sub_field( $field_name ) {
 function the_sub_field($field_name)
 {
 	$value = get_sub_field($field_name);
-	
+
 	if(is_array($value))
 	{
 		$value = implode(', ',$value);
 	}
-	
+
 	echo $value;
 }
 
@@ -702,7 +702,7 @@ function the_sub_field($field_name)
 *
 *  @param	string	$field_name: the name of the field - 'sub_heading'
 *
-*  @return	array	$sub_field	
+*  @return	array	$sub_field
 */
 
 function get_sub_field_object( $child_name )
@@ -721,7 +721,7 @@ function get_sub_field_object( $child_name )
 
 	// return
 	return acf_get_child_field_from_parent_field( $child_name, $parent );
-	
+
 }
 
 
@@ -737,15 +737,15 @@ function get_sub_field_object( $child_name )
 *  @param	string	$child_name: the name of the field - 'sub_heading'
 *  @param	array	$parent: the parent field object
 *
-*  @return	array	$sub_field	
+*  @return	array	$sub_field
 */
 
 function acf_get_child_field_from_parent_field( $child_name, $parent )
 {
 	// vars
 	$return = false;
-	
-	
+
+
 	// find child
 	if( isset($parent['sub_fields']) && is_array($parent['sub_fields']) )
 	{
@@ -756,7 +756,7 @@ function acf_get_child_field_from_parent_field( $child_name, $parent )
 				$return = $child;
 				break;
 			}
-			
+
 			// perhaps child has grand children?
 			$grand_child = acf_get_child_field_from_parent_field( $child_name, $child );
 			if( $grand_child )
@@ -778,11 +778,11 @@ function acf_get_child_field_from_parent_field( $child_name, $parent )
 			}
 		}
 	}
-	
+
 
 	// return
 	return $return;
-	
+
 }
 
 
@@ -810,7 +810,7 @@ function register_field_group( $array )
 	{
 		$array['id'] = uniqid();
 	}
-	
+
 
 	// 3.2.5 - changed show_on_page option
 	if( !isset($array['options']['hide_on_screen']) && isset($array['options']['show_on_page']) )
@@ -820,45 +820,45 @@ function register_field_group( $array )
 		unset( $array['options']['show_on_page'] );
 	}
 
-	
+
 	// 4.0.4 - changed location rules architecture
 	if( isset($array['location']['rules']) )
 	{
 		// vars
 		$groups = array();
 		$group_no = 0;
-		
-		
+
+
 		if( is_array($array['location']['rules']) )
 	 	{
 		 	foreach( $array['location']['rules'] as $rule )
 		 	{
 			 	$rule['group_no'] = $group_no;
-			 	
+
 			 	// sperate groups?
 			 	if( $array['location']['allorany'] == 'any' )
 			 	{
 				 	$group_no++;
 			 	}
-			 	
-			 	
+
+
 			 	// add to group
 			 	$groups[ $rule['group_no'] ][ $rule['order_no'] ] = $rule;
-			 	
-			 	
+
+
 			 	// sort rules
 			 	ksort( $groups[ $rule['group_no'] ] );
-	 	
+
 		 	}
-		 	
+
 		 	// sort groups
 			ksort( $groups );
 	 	}
-	 	
+
 	 	$array['location'] = $groups;
 	}
-	
-	
+
+
 	$GLOBALS['acf_register_field_group'][] = $array;
 }
 
@@ -871,8 +871,8 @@ function api_acf_get_field_groups( $return )
 	{
 		return $return;
 	}
-	
-	
+
+
 	foreach( $GLOBALS['acf_register_field_group'] as $acf )
 	{
 		$return[] = array(
@@ -882,7 +882,7 @@ function api_acf_get_field_groups( $return )
 		);
 	}
 
-	
+
 	// order field groups based on menu_order, title
 	// Obtain a list of columns
 	foreach( $return as $key => $row )
@@ -890,14 +890,14 @@ function api_acf_get_field_groups( $return )
 	    $menu_order[ $key ] = $row['menu_order'];
 	    $title[ $key ] = $row['title'];
 	}
-	
+
 	// Sort the array with menu_order ascending
 	// Add $array as the last parameter, to sort by the common key
 	if(isset($menu_order))
 	{
 		array_multisort($menu_order, SORT_ASC, $title, SORT_ASC, $return);
 	}
-	
+
 	return $return;
 }
 
@@ -916,7 +916,7 @@ function api_acf_field_group_get_fields( $fields, $post_id )
 				{
 					$fields[] = apply_filters('acf/load_field', $f, $f['key']);
 				}
-				
+
 				break;
 			}
 		}
@@ -1010,8 +1010,8 @@ function get_row_layout()
 {
 	// vars
 	$value = get_sub_field('acf_fc_layout');
-	
-	
+
+
 	return $value;
 }
 
@@ -1039,24 +1039,24 @@ function acf_shortcode( $atts )
 		'field' => "",
 		'post_id' => false,
 	), $atts ) );
-	
-	
+
+
 	// $field is requird
 	if( !$field || $field == "" )
 	{
 		return "";
 	}
-	
-	
+
+
 	// get value and return it
 	$value = get_field( $field, $post_id );
-	
-	
+
+
 	if( is_array($value) )
 	{
 		$value = @implode( ', ',$value );
 	}
-	
+
 	return $value;
 }
 add_shortcode( 'acf', 'acf_shortcode' );
@@ -1080,21 +1080,21 @@ function acf_form_head()
 {
 	// global vars
 	global $post_id;
-	
-	
+
+
 	// verify nonce
 	if( isset($_POST['acf_nonce']) && wp_verify_nonce($_POST['acf_nonce'], 'input') )
 	{
 		// $post_id to save against
 		$post_id = $_POST['post_id'];
-		
-		
+
+
 		// allow for custom save
 		$post_id = apply_filters('acf/pre_save_post', $post_id);
-		
-		
+
+
 		// save the data
-		do_action('acf/save_post', $post_id);	
+		do_action('acf/save_post', $post_id);
 
 
 		// redirect
@@ -1104,19 +1104,19 @@ function acf_form_head()
 			exit;
 		}
 	}
-	
-	
+
+
 	// need wp styling
 	wp_enqueue_style(array(
 		'colors-fresh'
 	));
-	
-		
+
+
 	// actions
 	do_action('acf/input/admin_enqueue_scripts');
 
 	add_action('wp_head', 'acf_form_wp_head');
-	
+
 }
 
 function acf_form_wp_head()
@@ -1136,7 +1136,7 @@ function acf_form_wp_head()
 *
 *  @param	array		$options: an array containing many options to customize the form
 *			string		+ post_id: post id to get field groups from and save data to. Default is false
-*			array		+ field_groups: an array containing field group ID's. If this option is set, 
+*			array		+ field_groups: an array containing field group ID's. If this option is set,
 *						  the post_id will not be used to dynamically find the field groups
 *			boolean		+ form: display the form tag or not. Defaults to true
 *			array		+ form_attributes: an array containg attributes which will be added into the form tag
@@ -1144,7 +1144,7 @@ function acf_form_wp_head()
 *			string		+ html_before_fields: html inside form before fields
 *			string		+ html_after_fields: html inside form after fields
 *			string		+ submit_value: value of submit button
-*			string		+ updated_message: default updated message. Can be false					 
+*			string		+ updated_message: default updated message. Can be false
 *
 *  @return	N/A
 */
@@ -1152,8 +1152,8 @@ function acf_form_wp_head()
 function acf_form( $options = array() )
 {
 	global $post;
-	
-	
+
+
 	// defaults
 	$defaults = array(
 		'post_id' => false,
@@ -1169,14 +1169,14 @@ function acf_form( $options = array() )
 		'html_before_fields' => '',
 		'html_after_fields' => '',
 		'submit_value' => __("Update", 'acf'),
-		'updated_message' => __("Post updated", 'acf'), 
+		'updated_message' => __("Post updated", 'acf'),
 	);
-	
-	
+
+
 	// merge defaults with options
 	$options = array_merge($defaults, $options);
-	
-	
+
+
 	// merge sub arrays
 	foreach( $options as $k => $v )
 	{
@@ -1185,17 +1185,17 @@ function acf_form( $options = array() )
 			$options[ $k ] = array_merge($defaults[ $k ], $options[ $k ]);
 		}
 	}
-	
-	
+
+
 	// filter post_id
 	$options['post_id'] = apply_filters('acf/get_post_id', $options['post_id'] );
-	
-	
+
+
 	// attributes
 	$options['form_attributes']['class'] .= 'acf-form';
-	
-	
-	
+
+
+
 	// register post box
 	if( empty($options['field_groups']) )
 	{
@@ -1203,8 +1203,8 @@ function acf_form( $options = array() )
 		$filter = array(
 			'post_id' => $options['post_id']
 		);
-		
-		
+
+
 		if( strpos($options['post_id'], 'user_') !== false )
 		{
 			$user_id = str_replace('user_', '', $options['post_id']);
@@ -1219,8 +1219,8 @@ function acf_form( $options = array() )
 				'ef_taxonomy' => $taxonomy_id
 			);
 		}
-		
-		
+
+
 		$options['field_groups'] = array();
 		$options['field_groups'] = apply_filters( 'acf/location/match_field_groups', $options['field_groups'], $filter );
 	}
@@ -1231,75 +1231,75 @@ function acf_form( $options = array() )
 	{
 		echo '<div id="message" class="updated"><p>' . $options['updated_message'] . '</p></div>';
 	}
-	
-	
+
+
 	// display form
 	if( $options['form'] ): ?>
 	<form <?php if($options['form_attributes']){foreach($options['form_attributes'] as $k => $v){echo $k . '="' . $v .'" '; }} ?>>
 	<?php endif; ?>
-	
+
 	<div style="display:none">
 		<script type="text/javascript">
-			acf.o.post_id = <?php echo is_numeric($options['post_id']) ? $options['post_id'] : '"' . $options['post_id'] . '"'; ?>;
+			acf.o.post_id = <?php echo is_numeric($options['post_id']) ? $options['post_id'] : '"' . esc_attr($options['post_id']) . '"'; ?>;
 		</script>
 		<input type="hidden" name="acf_nonce" value="<?php echo wp_create_nonce( 'input' ); ?>" />
-		<input type="hidden" name="post_id" value="<?php echo $options['post_id']; ?>" />
-		<input type="hidden" name="return" value="<?php echo $options['return']; ?>" />
+		<input type="hidden" name="post_id" value="<?php echo esc_attr($options['post_id']); ?>" />
+		<input type="hidden" name="return" value="<?php echo esc_attr($options['return']); ?>" />
 		<?php wp_editor('', 'acf_settings'); ?>
 	</div>
-	
+
 	<div id="poststuff">
 	<?php
-	
+
 	// html before fields
 	echo $options['html_before_fields'];
-	
-	
+
+
 	$acfs = apply_filters('acf/get_field_groups', array());
-	
+
 	if( is_array($acfs) ){ foreach( $acfs as $acf ){
-		
+
 		// only add the chosen field groups
 		if( !in_array( $acf['id'], $options['field_groups'] ) )
 		{
 			continue;
 		}
-		
-		
+
+
 		// load options
 		$acf['options'] = apply_filters('acf/field_group/get_options', array(), $acf['id']);
-		
-		
+
+
 		// load fields
 		$fields = apply_filters('acf/field_group/get_fields', array(), $acf['id']);
-		
-		
-		echo '<div id="acf_' . $acf['id'] . '" class="postbox acf_postbox ' . $acf['options']['layout'] . '">';
-		echo '<h3 class="hndle"><span>' . $acf['title'] . '</span></h3>';
+
+
+		echo '<div id="acf_' . esc_attr($acf['id']) . '" class="postbox acf_postbox ' . esc_attr($acf['options']['layout']) . '">';
+		echo '<h3 class="hndle"><span>' . esc_html($acf['title']) . '</span></h3>';
 		echo '<div class="inside">';
-							
+
 		do_action('acf/create_fields', $fields, $options['post_id']);
-		
+
 		echo '</div></div>';
-		
+
 	}}
-	
-	
+
+
 	// html after fields
 	echo $options['html_after_fields'];
-	
+
 	?>
-	
+
 	<?php if( $options['form'] ): ?>
 	<!-- Submit -->
 	<div class="field">
-		<input type="submit" value="<?php echo $options['submit_value']; ?>" />
+		<input type="submit" value="<?php echo esc_attr($options['submit_value']); ?>" />
 	</div>
 	<!-- / Submit -->
 	<?php endif; ?>
-	
+
 	</div><!-- <div id="poststuff"> -->
-	
+
 	<?php if( $options['form'] ): ?>
 	</form>
 	<?php endif;
@@ -1326,17 +1326,17 @@ function update_field( $field_key, $value, $post_id = false )
 {
 	// filter post_id
 	$post_id = apply_filters('acf/get_post_id', $post_id );
-	
-	
+
+
 	// vars
 	$options = array(
 		'load_value' => false,
 		'format_value' => false
 	);
-	
+
 	$field = get_field_object( $field_key, $post_id, $options);
 
-	
+
 	// sub fields? They need formatted data
 	if( $field['type'] == 'repeater' )
 	{
@@ -1352,14 +1352,14 @@ function update_field( $field_key, $value, $post_id = false )
 			}
 		}
 	}
-	
-	
+
+
 	// save
 	do_action('acf/update_value', $value, $post_id, $field );
-	
-	
+
+
 	return true;
-	
+
 }
 
 
@@ -1426,7 +1426,7 @@ function acf_convert_field_names_to_keys( $value, $field )
 	{
 		return $value;
 	}
-	
+
 
 	// define sub field keys
 	$sub_fields = array();
@@ -1437,8 +1437,8 @@ function acf_convert_field_names_to_keys( $value, $field )
 			$sub_fields[ $sub_field['name'] ] = $sub_field;
 		}
 	}
-	
-	
+
+
 	// loop through the values and format the array to use sub field keys
 	if( is_array($value) )
 	{
@@ -1453,21 +1453,21 @@ function acf_convert_field_names_to_keys( $value, $field )
 					{
 						continue;
 					}
-					
-					
+
+
 					// vars
 					$sub_field = $sub_fields[ $sub_field_name ];
 					$sub_field_value = acf_convert_field_names_to_keys( $sub_field_value, $sub_field );
-					
-					
+
+
 					// set new value
 					$value[$row_i][ $sub_field['key'] ] = $sub_field_value;
-					
-					
+
+
 					// unset old value
 					unset( $value[$row_i][$sub_field_name] );
-						
-					
+
+
 				}
 				// foreach( $row as $sub_field_name => $sub_field_value )
 			}
@@ -1476,8 +1476,8 @@ function acf_convert_field_names_to_keys( $value, $field )
 		// foreach( $value as $row_i => $row)
 	}
 	// if( $value )
-	
-	
+
+
 	return $value;
 
 }
@@ -1497,34 +1497,34 @@ function acf_convert_field_names_to_keys( $value, $field )
 */
 
 function acf_force_type_array( $var ) {
-	
+
 	// is array?
 	if( is_array($var) ) {
-	
+
 		return $var;
-	
+
 	}
-	
-	
+
+
 	// bail early if empty
 	if( empty($var) && !is_numeric($var) ) {
-		
+
 		return array();
-		
+
 	}
-	
-	
-	// string 
+
+
+	// string
 	if( is_string($var) ) {
-		
+
 		return explode(',', $var);
-		
+
 	}
-	
-	
+
+
 	// place in array
 	return array( $var );
-} 
+}
 
 
 /*
@@ -1542,59 +1542,59 @@ function acf_force_type_array( $var ) {
 */
 
 function acf_get_valid_terms( $terms = false, $taxonomy = 'category' ) {
-	
+
 	// bail early if function does not yet exist or
 	if( !function_exists('wp_get_split_term') || empty($terms) ) {
-		
+
 		return $terms;
-		
+
 	}
-	
-	
+
+
 	// vars
 	$is_array = is_array($terms);
-	
-	
+
+
 	// force into array
 	$terms = acf_force_type_array( $terms );
-	
-	
+
+
 	// force ints
 	$terms = array_map('intval', $terms);
-	
-	
+
+
 	// attempt to find new terms
 	foreach( $terms as $i => $term_id ) {
-		
+
 		$new_term_id = wp_get_split_term($term_id, $taxonomy);
-		
+
 		if( $new_term_id ) {
-			
+
 			$terms[ $i ] = $new_term_id;
-			
+
 		}
-		
+
 	}
-	
-	
+
+
 	// revert array if needed
 	if( !$is_array ) {
-		
+
 		$terms = $terms[0];
-		
+
 	}
-	
-	
+
+
 	// return
 	return $terms;
-	
+
 }
 
 
 /*
 *  Depreceated Functions
 *
-*  @description: 
+*  @description:
 *  @created: 23/07/12
 */
 
@@ -1606,7 +1606,7 @@ function acf_get_valid_terms( $terms = false, $taxonomy = 'category' ) {
 *	@author Elliot Condon
 *	@depreciated: 3.3.4 - now use has_sub_field
 *	@since 1.0.3
-* 
+*
 *-------------------------------------------------------------------------------------*/
 
 function reset_the_repeater_field()
@@ -1622,7 +1622,7 @@ function reset_the_repeater_field()
 *	@author Elliot Condon
 *	@depreciated: 3.3.4 - now use has_sub_field
 *	@since 1.0.3
-* 
+*
 *-------------------------------------------------------------------------------------*/
 
 function the_repeater_field($field_name, $post_id = false)
@@ -1638,7 +1638,7 @@ function the_repeater_field($field_name, $post_id = false)
 *	@author Elliot Condon
 *	@depreciated: 3.3.4 - now use has_sub_field
 *	@since 3.?.?
-* 
+*
 *-------------------------------------------------------------------------------------*/
 
 function the_flexible_field($field_name, $post_id = false)
@@ -1665,4 +1665,4 @@ function acf_filter_post_id( $post_id )
 	return apply_filters('acf/get_post_id', $post_id );
 }
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/controllers/addons.php b/html/wp-content/plugins/advanced-custom-fields/core/controllers/addons.php
index 5c7693e..573335a 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/controllers/addons.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/controllers/addons.php
@@ -1,4 +1,4 @@
-<?php 
+<?php
 
 /*
 *  acf_addons
@@ -10,83 +10,83 @@
 
 class acf_addons
 {
-	
+
 	var $action;
-	
-	
+
+
 	/*
 	*  __construct
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function __construct()
 	{
 		// actions
 		add_action('admin_menu', array($this,'admin_menu'), 11, 0);
 	}
-	
-	
+
+
 	/*
 	*  admin_menu
 	*
-	*  @description: 
+	*  @description:
 	*  @created: 2/08/12
 	*/
-	
+
 	function admin_menu()
 	{
 		// add page
 		$page = add_submenu_page('edit.php?post_type=acf', __('Add-ons','acf'), __('Add-ons','acf'), 'manage_options', 'acf-addons', array($this,'html'));
-		
-		
+
+
 		// actions
 		add_action('load-' . $page, array($this,'load'));
 		add_action('admin_print_scripts-' . $page, array($this, 'admin_print_scripts'));
 		add_action('admin_print_styles-' . $page, array($this, 'admin_print_styles'));
 		add_action('admin_head-' . $page, array($this,'admin_head'));
 	}
-	
-	
+
+
 	/*
 	*  load
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.5.2
 	*  @created: 16/11/12
 	*  @thanks: Kevin Biloski and Charlie Eriksen via Secunia SVCRP
 	*/
-	
+
 	function load()
 	{
-		
+
 	}
-	
-	
+
+
 	/*
 	*  admin_print_scripts
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function admin_print_scripts()
 	{
-		
+
 	}
-	
-	
+
+
 	/*
 	*  admin_print_styles
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function admin_print_styles()
 	{
 		wp_enqueue_style(array(
@@ -95,36 +95,36 @@ class acf_addons
 			'acf',
 		));
 	}
-	
-	
+
+
 	/*
 	*  admin_head
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function admin_head()
 	{
-				
+
 	}
-	
-	
+
+
 	/*
 	*  html
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function html()
 	{
 		// vars
 		$dir = apply_filters('acf/get_info', 'dir');
-		
-		
+
+
 		$premium = array();
 		$premium[] = array(
 			'title' => __("Repeater Field",'acf'),
@@ -154,8 +154,8 @@ class acf_addons
 			'active' => class_exists('acf_field_flexible_content'),
 			'url' => 'http://www.advancedcustomfields.com/add-ons/flexible-content-field/'
 		);
-		
-		
+
+
 		$free = array();
 		$free[] = array(
 			'title' => __("Gravity Forms Field",'acf'),
@@ -185,15 +185,15 @@ class acf_addons
 			'active' => class_exists('acf_field_cf7'),
 			'url' => 'https://github.com/taylormsj/acf-cf7-field/'
 		);
-		
+
 		?>
 <div class="wrap" style="max-width:970px;">
 
 	<div class="icon32" id="icon-acf"><br></div>
 	<h2 style="margin: 4px 0 15px;"><?php _e("Advanced Custom Fields Add-Ons",'acf'); ?></h2>
-	
+
 	<div class="acf-alert">
-	<p style=""><?php _e("The following Add-ons are available to increase the functionality of the Advanced Custom Fields plugin.",'acf'); ?><br />
+	<p style=""><?php esc_html_e("The following Add-ons are available to increase the functionality of the Advanced Custom Fields plugin.",'acf'); ?><br />
 	<?php _e("Each Add-on can be installed as a separate plugin (receives updates) or included in your theme (does not receive updates).",'acf'); ?></p>
 	</div>
 	<?php /*
@@ -201,87 +201,87 @@ class acf_addons
 		<p><strong><?php _e("Just updated to version 4?",'acf'); ?></strong> <?php _e("Activation codes have changed to plugins! Download your purchased add-ons",'acf'); ?> <a href="http://www.advancedcustomfields.com/add-ons-download/" target="_blank"><?php _e("here",'acf'); ?></a></p>
 	</div>
 	*/ ?>
-	
+
 	<div id="add-ons" class="clearfix">
-		
+
 		<div class="add-on-group clearfix">
 		<?php foreach( $premium as $addon ): ?>
 		<div class="add-on wp-box <?php if( $addon['active'] ): ?>add-on-active<?php endif; ?>">
-			<a target="_blank" href="<?php echo $addon['url']; ?>">
-				<img src="<?php echo $addon['thumbnail']; ?>" />
+			<a target="_blank" href="<?php echo esc_url($addon['url']); ?>">
+				<img src="<?php echo esc_url($addon['thumbnail']); ?>" />
 			</a>
 			<div class="inner">
-				<h3><a target="_blank" href="<?php echo $addon['url']; ?>"><?php echo $addon['title']; ?></a></h3>
-				<p><?php echo $addon['description']; ?></p>
+				<h3><a target="_blank" href="<?php echo esc_url($addon['url']); ?>"><?php echo esc_html($addon['title']); ?></a></h3>
+				<p><?php echo esc_html($addon['description']); ?></p>
 			</div>
 			<div class="footer">
 				<?php if( $addon['active'] ): ?>
-					<a class="button button-disabled"><span class="acf-sprite-tick"></span><?php _e("Installed",'acf'); ?></a>
+					<a class="button button-disabled"><span class="acf-sprite-tick"></span><?php esc_html_e("Installed",'acf'); ?></a>
 				<?php else: ?>
-					<a target="_blank" href="<?php echo $addon['url']; ?>" class="button"><?php _e("Purchase & Install",'acf'); ?></a>
+					<a target="_blank" href="<?php echo esc_url($addon['url']); ?>" class="button"><?php esc_html_e("Purchase & Install",'acf'); ?></a>
 				<?php endif; ?>
 			</div>
 		</div>
 		<?php endforeach; ?>
 		</div>
-		
+
 		<div class="add-on-group clearfix">
 		<?php foreach( $free as $addon ): ?>
 		<div class="add-on wp-box <?php if( $addon['active'] ): ?>add-on-active<?php endif; ?>">
-			<a target="_blank" href="<?php echo $addon['url']; ?>">
-				<img src="<?php echo $addon['thumbnail']; ?>" />
+			<a target="_blank" href="<?php echo esc_url($addon['url']); ?>">
+				<img src="<?php echo esc_url($addon['thumbnail']); ?>" />
 			</a>
 			<div class="inner">
-				<h3><a target="_blank" href="<?php echo $addon['url']; ?>"><?php echo $addon['title']; ?></a></h3>
-				<p><?php echo $addon['description']; ?></p>
+				<h3><a target="_blank" href="<?php echo esc_url($addon['url']); ?>"><?php echo esc_html($addon['title']); ?></a></h3>
+				<p><?php echo esc_html($addon['description']); ?></p>
 			</div>
 			<div class="footer">
 				<?php if( $addon['active'] ): ?>
-					<a class="button button-disabled"><span class="acf-sprite-tick"></span><?php _e("Installed",'acf'); ?></a>
+					<a class="button button-disabled"><span class="acf-sprite-tick"></span><?php esc_html_e("Installed",'acf'); ?></a>
 				<?php else: ?>
-					<a target="_blank" href="<?php echo $addon['url']; ?>" class="button"><?php _e("Download",'acf'); ?></a>
+					<a target="_blank" href="<?php echo esc_url($addon['url']); ?>" class="button"><?php esc_html_e("Download",'acf'); ?></a>
 				<?php endif; ?>
 			</div>
 		</div>
-		<?php endforeach; ?>	
+		<?php endforeach; ?>
 		</div>
-		
-				
+
+
 	</div>
-	
+
 </div>
 <script type="text/javascript">
 (function($) {
-	
+
 	$(window).on('load', function(){
-		
+
 		$('#add-ons .add-on-group').each(function(){
-		
+
 			var $el = $(this),
 				h = 0;
-			
-			
+
+
 			$el.find('.add-on').each(function(){
-				
+
 				h = Math.max( $(this).height(), h );
-				
+
 			});
-			
+
 			$el.find('.add-on').height( h );
-			
+
 		});
-		
+
 	});
-	
-})(jQuery);	
+
+})(jQuery);
 </script>
 		<?php
-		
+
 		return;
-		
-	}		
+
+	}
 }
 
 new acf_addons();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/controllers/export.php b/html/wp-content/plugins/advanced-custom-fields/core/controllers/export.php
index ec77751..a57b91f 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/controllers/export.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/controllers/export.php
@@ -1,4 +1,4 @@
-<?php 
+<?php
 
 /*
 *  acf_export
@@ -10,69 +10,69 @@
 
 class acf_export
 {
-	
+
 	var $action;
-	
-	
+
+
 	/*
 	*  __construct
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function __construct()
 	{
 		// vars
 		$this->action = '';
-		
-		
+
+
 		// actions
 		add_action('admin_menu', array($this,'admin_menu'), 11, 0);
-		
-		
+
+
 		// filters
 		add_filter('acf/export/clean_fields', array($this,'clean_fields'), 10, 1);
 	}
-	
-	
+
+
 	/*
 	*  admin_menu
 	*
-	*  @description: 
+	*  @description:
 	*  @created: 2/08/12
 	*/
-	
+
 	function admin_menu()
 	{
 		// add page
 		$page = add_submenu_page('edit.php?post_type=acf', __('Export','acf'), __('Export','acf'), 'manage_options', 'acf-export', array($this,'html'));
-		
-		
+
+
 		// actions
 		add_action('load-' . $page, array($this,'load'));
 		add_action('admin_print_scripts-' . $page, array($this, 'admin_print_scripts'));
 		add_action('admin_print_styles-' . $page, array($this, 'admin_print_styles'));
 		add_action('admin_head-' . $page, array($this,'admin_head'));
 	}
-	
-	
+
+
 	/*
 	*  load
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.5.2
 	*  @created: 16/11/12
 	*  @thanks: Kevin Biloski and Charlie Eriksen via Secunia SVCRP
 	*/
-	
+
 	function load()
 	{
 		// vars
 		$path = apply_filters('acf/get_info', 'path');
-		
-		
+
+
 		// verify nonce
 		if( isset($_POST['nonce']) && wp_verify_nonce($_POST['nonce'], 'export') )
 		{
@@ -85,8 +85,8 @@ class acf_export
 				$this->action = 'export_to_php';
 			}
 		}
-		
-		
+
+
 		// include export action
 		if( $this->action == 'export_to_xml' )
 		{
@@ -94,30 +94,30 @@ class acf_export
 			die;
 		}
 	}
-	
-	
+
+
 	/*
 	*  admin_print_scripts
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function admin_print_scripts()
 	{
-		
+
 	}
-	
-	
+
+
 	/*
 	*  admin_print_styles
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function admin_print_styles()
 	{
 		wp_enqueue_style(array(
@@ -126,39 +126,39 @@ class acf_export
 			'acf',
 		));
 	}
-	
-	
+
+
 	/*
 	*  admin_head
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function admin_head()
 	{
-				
+
 	}
-	
-	
+
+
 	/*
 	*  html
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function html()
-	{	
+	{
 		?>
 <div class="wrap">
 
 	<div class="icon32" id="icon-acf"><br></div>
-	<h2 style="margin: 4px 0 25px;"><?php _e("Export",'acf'); ?></h2>
+	<h2 style="margin: 4px 0 25px;"><?php esc_html_e("Export",'acf'); ?></h2>
 		<?php
-		
+
 		if( $this->action == "export_to_php" )
 		{
 			$this->html_php();
@@ -167,23 +167,23 @@ class acf_export
 		{
 			$this->html_index();
 		}
-		
+
 		?>
 </div>
 		<?php
-		
+
 		return;
-		
+
 	}
-	
-	
+
+
 	/*
 	*  html_index
 	*
-	*  @description: 
+	*  @description:
 	*  @created: 9/08/12
 	*/
-	
+
 	function html_index()
 	{
 		// vars
@@ -196,30 +196,30 @@ class acf_export
 
 		// blank array to hold acfs
 		$choices = array();
-		
+
 		if($acfs)
 		{
 			foreach($acfs as $acf)
 			{
 				// find title. Could use get_the_title, but that uses get_post(), so I think this uses less Memory
 				$title = apply_filters( 'the_title', $acf->post_title, $acf->ID );
-				
+
 				$choices[$acf->ID] = $title;
 			}
 		}
-		
+
 		?>
 <form method="post">
 <input type="hidden" name="nonce" value="<?php echo wp_create_nonce( 'export' ); ?>" />
 <div class="wp-box">
 	<div class="title">
-		<h3><?php _e("Export Field Groups",'acf'); ?></h3>
+		<h3><?php esc_html_e("Export Field Groups",'acf'); ?></h3>
 	</div>
 	<table class="acf_input widefat">
 		<tr>
 			<td class="label">
-				<label><?php _e("Field Groups",'acf'); ?></label>
-				<p class="description"><?php _e("Select the field groups to be exported",'acf'); ?></p>
+				<label><?php esc_html_e("Field Groups",'acf'); ?></label>
+				<p class="description"><?php esc_html_e("Select the field groups to be exported",'acf'); ?></p>
 			</td>
 			<td>
 				<?php do_action('acf/create_field', array(
@@ -236,10 +236,10 @@ class acf_export
 			<td>
 				<ul class="hl clearfix">
 					<li>
-						<input type="submit" class="acf-button" name="export_to_xml" value="<?php _e("Export to XML",'acf'); ?>" />
+						<input type="submit" class="acf-button" name="export_to_xml" value="<?php esc_attr_e("Export to XML",'acf'); ?>" />
 					</li>
 					<li>
-						<input type="submit" class="acf-button" name="export_to_php" value="<?php _e("Export to PHP",'acf'); ?>" />
+						<input type="submit" class="acf-button" name="export_to_php" value="<?php esc_attr_e("Export to PHP",'acf'); ?>" />
 					</li>
 				</ul>
 			</td>
@@ -249,92 +249,92 @@ class acf_export
 </form>
 
 <p><br /></p>
-<h3><?php _e("Export to XML",'acf'); ?></h3>
-<p><?php _e("ACF will create a .xml export file which is compatible with the native WP import plugin.",'acf'); ?></p>
-<p><?php _e("Imported field groups <b>will</b> appear in the list of editable field groups. This is useful for migrating fields groups between Wp websites.",'acf'); ?></p>
+<h3><?php esc_html_e("Export to XML",'acf'); ?></h3>
+<p><?php esc_html_e("ACF will create a .xml export file which is compatible with the native WP import plugin.",'acf'); ?></p>
+<p><?php esc_html_e("Imported field groups <b>will</b> appear in the list of editable field groups. This is useful for migrating fields groups between Wp websites.",'acf'); ?></p>
 <ol>
-	<li><?php _e("Select field group(s) from the list and click \"Export XML\"",'acf'); ?></li>
-	<li><?php _e("Save the .xml file when prompted",'acf'); ?></li>
-	<li><?php _e("Navigate to Tools &raquo; Import and select WordPress",'acf'); ?></li>
-	<li><?php _e("Install WP import plugin if prompted",'acf'); ?></li>
-	<li><?php _e("Upload and import your exported .xml file",'acf'); ?></li>
-	<li><?php _e("Select your user and ignore Import Attachments",'acf'); ?></li>
-	<li><?php _e("That's it! Happy WordPressing",'acf'); ?></li>
+	<li><?php esc_html_e("Select field group(s) from the list and click \"Export XML\"",'acf'); ?></li>
+	<li><?php esc_html_e("Save the .xml file when prompted",'acf'); ?></li>
+	<li><?php esc_html_e("Navigate to Tools &raquo; Import and select WordPress",'acf'); ?></li>
+	<li><?php esc_html_e("Install WP import plugin if prompted",'acf'); ?></li>
+	<li><?php esc_html_e("Upload and import your exported .xml file",'acf'); ?></li>
+	<li><?php esc_html_e("Select your user and ignore Import Attachments",'acf'); ?></li>
+	<li><?php esc_html_e("That's it! Happy WordPressing",'acf'); ?></li>
 </ol>
 
 <p><br /></p>
 
-<h3><?php _e("Export to PHP",'acf'); ?></h3>
-<p><?php _e("ACF will create the PHP code to include in your theme.",'acf'); ?></p>
-<p><?php _e("Registered field groups <b>will not</b> appear in the list of editable field groups. This is useful for including fields in themes.",'acf'); ?></p>
-<p><?php _e("Please note that if you export and register field groups within the same WP, you will see duplicate fields on your edit screens. To fix this, please move the original field group to the trash or remove the code from your functions.php file.",'acf'); ?></p>
+<h3><?php esc_html_e("Export to PHP",'acf'); ?></h3>
+<p><?php esc_html_e("ACF will create the PHP code to include in your theme.",'acf'); ?></p>
+<p><?php esc_html_e("Registered field groups <b>will not</b> appear in the list of editable field groups. This is useful for including fields in themes.",'acf'); ?></p>
+<p><?php esc_html_e("Please note that if you export and register field groups within the same WP, you will see duplicate fields on your edit screens. To fix this, please move the original field group to the trash or remove the code from your functions.php file.",'acf'); ?></p>
 <ol>
-	<li><?php _e("Select field group(s) from the list and click \"Create PHP\"",'acf'); ?></li>
-	<li><?php _e("Copy the PHP code generated",'acf'); ?></li>
-	<li><?php _e("Paste into your functions.php file",'acf'); ?></li>
-	<li><?php _e("To activate any Add-ons, edit and use the code in the first few lines.",'acf'); ?></li>
+	<li><?php esc_html_e("Select field group(s) from the list and click \"Create PHP\"",'acf'); ?></li>
+	<li><?php esc_html_e("Copy the PHP code generated",'acf'); ?></li>
+	<li><?php esc_html_e("Paste into your functions.php file",'acf'); ?></li>
+	<li><?php esc_html_e("To activate any Add-ons, edit and use the code in the first few lines.",'acf'); ?></li>
 </ol>
 <?php
 
 	}
-	
-	
+
+
 	/*
 	*  html_php
 	*
-	*  @description: 
+	*  @description:
 	*  @created: 9/08/12
 	*/
-	
+
 	function html_php()
 	{
-		
+
 		?>
 <div class="wp-box">
 	<div class="title">
-		<h3><?php _e("Export Field Groups to PHP",'acf'); ?></h3>
+		<h3><?php esc_html_e("Export Field Groups to PHP",'acf'); ?></h3>
 	</div>
 	<table class="acf_input widefat">
 		<tr>
 			<td class="label">
-<h3><?php _e("Instructions",'acf'); ?></h3>
+<h3><?php esc_html_e("Instructions",'acf'); ?></h3>
 <ol>
-	<li><?php _e("Copy the PHP code generated",'acf'); ?></li>
-	<li><?php _e("Paste into your functions.php file",'acf'); ?></li>
-	<li><?php _e("To activate any Add-ons, edit and use the code in the first few lines.",'acf'); ?></li>
+	<li><?php esc_html_e("Copy the PHP code generated",'acf'); ?></li>
+	<li><?php esc_html_e("Paste into your functions.php file",'acf'); ?></li>
+	<li><?php esc_html_e("To activate any Add-ons, edit and use the code in the first few lines.",'acf'); ?></li>
 </ol>
 
 <p><br /></p>
 
-<h3><?php _e("Notes",'acf'); ?></h3>
-<p><?php _e("Registered field groups <b>will not</b> appear in the list of editable field groups. This is useful for including fields in themes.",'acf'); ?></p>
-<p><?php _e("Please note that if you export and register field groups within the same WP, you will see duplicate fields on your edit screens. To fix this, please move the original field group to the trash or remove the code from your functions.php file.",'acf'); ?></p>
+<h3><?php esc_html_e("Notes",'acf'); ?></h3>
+<p><?php esc_html_e("Registered field groups <b>will not</b> appear in the list of editable field groups. This is useful for including fields in themes.",'acf'); ?></p>
+<p><?php esc_html_e("Please note that if you export and register field groups within the same WP, you will see duplicate fields on your edit screens. To fix this, please move the original field group to the trash or remove the code from your functions.php file.",'acf'); ?></p>
 
 
 <p><br /></p>
 
-<h3><?php _e("Include in theme",'acf'); ?></h3>
-<p><?php _e("The Advanced Custom Fields plugin can be included within a theme. To do so, move the ACF plugin inside your theme and add the following code to your functions.php file:",'acf'); ?></p>
+<h3><?php esc_html_e("Include in theme",'acf'); ?></h3>
+<p><?php esc_html_e("The Advanced Custom Fields plugin can be included within a theme. To do so, move the ACF plugin inside your theme and add the following code to your functions.php file:",'acf'); ?></p>
 
 <pre>
 include_once('advanced-custom-fields/acf.php');
 </pre>
 
-<p><?php _e("To remove all visual interfaces from the ACF plugin, you can use a constant to enable lite mode. Add the following code to your functions.php file <b>before</b> the include_once code:",'acf'); ?></p>
+<p><?php esc_html_e("To remove all visual interfaces from the ACF plugin, you can use a constant to enable lite mode. Add the following code to your functions.php file <b>before</b> the include_once code:",'acf'); ?></p>
 
 <pre>
 define( 'ACF_LITE', true );
 </pre>
- 
+
 <p><br /></p>
 
-<p><a href="">&laquo; <?php _e("Back to export",'acf'); ?></a></p>
+<p><a href="">&laquo; <?php esc_html_e("Back to export",'acf'); ?></a></p>
 			</td>
 			<td>
 				<textarea class="pre" readonly="true"><?php
-		
+
 		$acfs = array();
-		
+
 		if( isset($_POST['acf_posts']) )
 		{
 			$acfs = get_posts(array(
@@ -363,31 +363,31 @@ if(function_exists("register_field_group"))
 					'options' => apply_filters('acf/field_group/get_options', array(), $acf->ID),
 					'menu_order' => $acf->menu_order,
 				);
-				
-				
+
+
 				$var['fields'] = apply_filters('acf/export/clean_fields', $var['fields']);
 
 
 				// create html
 				$html = var_export($var, true);
-				
+
 				// change double spaces to tabs
 				$html = str_replace("  ", "\t", $html);
-				
+
 				// correctly formats "=> array("
 				$html = preg_replace('/([\t\r\n]+?)array/', 'array', $html);
-				
+
 				// Remove number keys from array
 				$html = preg_replace('/[0-9]+ => array/', 'array', $html);
-				
+
 				// add extra tab at start of each line
 				$html = str_replace("\n", "\n\t", $html);
-				
+
 				// add the WP __() function to specific strings for translation in theme
 				//$html = preg_replace("/'label'(.*?)('.*?')/", "'label'$1__($2)", $html);
 				//$html = preg_replace("/'instructions'(.*?)('.*?')/", "'instructions'$1__($2)", $html);
-				
-								
+
+
 ?>	register_field_group(<?php echo $html ?>);
 <?php
 			}
@@ -397,7 +397,7 @@ if(function_exists("register_field_group"))
 		}
 		else
 		{
-			_e("No field groups were selected",'acf');
+			esc_html_e("No field groups were selected",'acf');
 		}
 				?></textarea>
 			</td>
@@ -406,31 +406,31 @@ if(function_exists("register_field_group"))
 </div>
 <script type="text/javascript">
 (function($){
-	
+
 	var i = 0;
-	
+
 	$(document).on('click', 'textarea.pre', function(){
-		
+
 		if( i == 0 )
 		{
 			i++;
-			
+
 			$(this).focus().select();
-			
+
 			return false;
 		}
-				
+
 	});
-	
+
 	$(document).on('keyup', 'textarea.pre', function(){
-	
+
 	    $(this).height( 0 );
 	    $(this).height( this.scrollHeight );
-	
+
 	});
 
 	$(document).ready(function(){
-		
+
 		$('textarea.pre').trigger('keyup');
 
 	});
@@ -439,16 +439,16 @@ if(function_exists("register_field_group"))
 </script>
 	<?php
 	}
-	
-	
+
+
 	/*
 	*  clean_fields
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.5.7
 	*  @created: 7/03/13
 	*/
-	
+
 	function clean_fields( $fields )
 	{
 		// trim down the fields
@@ -458,29 +458,29 @@ if(function_exists("register_field_group"))
 			{
 				// unset unneccessary bits
 				unset( $field['id'], $field['class'], $field['order_no'], $field['field_group'], $field['_name'] );
-				
-				
+
+
 				// instructions
 				if( !$field['instructions'] )
 				{
 					unset( $field['instructions'] );
 				}
-				
-				
+
+
 				// Required
 				if( !$field['required'] )
 				{
 					unset( $field['required'] );
 				}
-				
-				
+
+
 				// conditional logic
 				if( !$field['conditional_logic']['status'] )
 				{
 					unset( $field['conditional_logic'] );
 				}
-				
-				
+
+
 				// children
 				if( isset($field['sub_fields']) )
 				{
@@ -494,16 +494,16 @@ if(function_exists("register_field_group"))
 					}
 				}
 
-				
+
 				// override field
 				$fields[ $i ] = $field;
 			}
 		}
-		
+
 		return $fields;
-	}	
+	}
 }
 
 new acf_export();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/controllers/field_group.php b/html/wp-content/plugins/advanced-custom-fields/core/controllers/field_group.php
index 6c04305..1984438 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/controllers/field_group.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/controllers/field_group.php
@@ -1,4 +1,4 @@
-<?php 
+<?php
 
 /*
 *  acf_field_group
@@ -10,64 +10,64 @@
 
 class acf_field_group
 {
-	
+
 	var $settings;
-	
-	
+
+
 	/*
 	*  __construct
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function __construct()
 	{
 		// actions
 		add_action('admin_enqueue_scripts', array($this,'admin_enqueue_scripts'));
-		
-		
+
+
 		// filters
 		add_filter('acf/get_field_groups', array($this, 'get_field_groups'), 1, 1);
 		add_filter('acf/field_group/get_fields', array($this, 'get_fields'), 5, 2);
 		add_filter('acf/field_group/get_location', array($this, 'get_location'), 5, 2);
 		add_filter('acf/field_group/get_options', array($this, 'get_options'), 5, 2);
 		add_filter('acf/field_group/get_next_field_id', array($this, 'get_next_field_id'), 5, 1);
-		
-		
+
+
 		// save
 		add_filter('name_save_pre', array($this, 'name_save_pre'));
 		add_action('save_post', array($this, 'save_post'));
-		
-		
+
+
 		// ajax
 		add_action('wp_ajax_acf/field_group/render_options', array($this, 'ajax_render_options'));
 		add_action('wp_ajax_acf/field_group/render_location', array($this, 'ajax_render_location'));
-		
+
 	}
-	
-	
+
+
 	/*
 	*  get_field_groups
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.6
 	*  @created: 27/01/13
 	*/
-	
+
 	function get_field_groups( $array )
 	{
 		// cache
 		$found = false;
 		$cache = wp_cache_get( 'field_groups', 'acf', false, $found );
-		
+
 		if( $found )
 		{
 			return $cache;
 		}
-		
-		
+
+
 		// get acf's
 		$posts = get_posts(array(
 			'numberposts' 	=> -1,
@@ -77,27 +77,27 @@ class acf_field_group
 			'suppress_filters' => false,
 		));
 
-		
+
 		// populate acfs
 		if( $posts ){ foreach( $posts as $post ){
-			
+
 			 $array[] = array(
 				'id' => $post->ID,
 				'title' => $post->post_title,
 				'menu_order' => $post->menu_order,
 			);
-			
+
 		}}
 
-		
+
 		// set cache
 		wp_cache_set( 'field_groups', $array, 'acf' );
-				
-				
+
+
 		return $array;
 	}
-	
-	
+
+
 	/*
 	*  get_fields
 	*
@@ -105,199 +105,199 @@ class acf_field_group
 	*  @since: 3.6
 	*  @created: 26/01/13
 	*/
-	
+
 	function get_fields( $fields, $post_id )
 	{
 		// global
 		global $wpdb;
-		
-		
+
+
 		// loaded by PHP already?
 		if( !empty($fields) )
 		{
-			return $fields;	
+			return $fields;
 		}
 
-		
+
 		// get field from postmeta
 		$rows = $wpdb->get_results( $wpdb->prepare("SELECT meta_key FROM $wpdb->postmeta WHERE post_id = %d AND meta_key LIKE %s", $post_id, 'field_%'), ARRAY_A);
-		
-		
+
+
 		if( $rows )
 		{
 			foreach( $rows as $row )
 			{
 				$field = apply_filters('acf/load_field', false, $row['meta_key'], $post_id );
-	
+
 			 	$fields[ $field['order_no'] ] = $field;
 			}
-		 	
+
 		 	// sort
 		 	ksort( $fields );
 	 	}
-	 	
-	 	
-	 	
+
+
+
 	 	// return
 		return $fields;
-		
+
 	}
-	
-	
+
+
 	/*
 	*  get_location
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.6
 	*  @created: 26/01/13
 	*/
-	
+
 	function get_location( $location, $post_id )
 	{
 		// loaded by PHP already?
 		if( !empty($location) )
 		{
-			return $location;	
+			return $location;
 		}
-		
-		
+
+
 		// vars
 		$groups = array();
 		$group_no = 0;
-		
-		
+
+
 		// get all rules
 	 	$rules = get_post_meta($post_id, 'rule', false);
-	 	
-	 	
+
+
 	 	if( is_array($rules) )
 	 	{
 		 	foreach( $rules as $rule )
 		 	{
 		 		// if field group was duplicated, it may now be a serialized string!
 		 		$rule = maybe_unserialize($rule);
-		 		
-		 		
+
+
 			 	// does this rule have a group?
 			 	// + groups were added in 4.0.4
 			 	if( !isset($rule['group_no']) )
 			 	{
 				 	$rule['group_no'] = $group_no;
-				 	
+
 				 	// sperate groups?
 				 	if( get_post_meta($post_id, 'allorany', true) == 'any' )
 				 	{
 					 	$group_no++;
 				 	}
 			 	}
-			 	
-			 	
+
+
 			 	// add to group
 			 	$groups[ $rule['group_no'] ][ $rule['order_no'] ] = $rule;
-			 	
-			 	
+
+
 			 	// sort rules
 			 	ksort( $groups[ $rule['group_no'] ] );
-	 	
+
 		 	}
-		 	
+
 		 	// sort groups
 			ksort( $groups );
 	 	}
-	 		 	
-	 	
+
+
 	 	// return fields
 		return $groups;
 	}
-	
-	
+
+
 	/*
 	*  get_options
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.6
 	*  @created: 26/01/13
 	*/
-	
+
 	function get_options( $options, $post_id )
 	{
 		// loaded by PHP already?
 		if( !empty($options) )
 		{
-			return $options;	
+			return $options;
 		}
-		
-		
+
+
 		// defaults
 	 	$options = array(
 	 		'position'			=>	'normal',
 	 		'layout'			=>	'no_box',
 	 		'hide_on_screen'	=>	array(),
 	 	);
-	 	
-	 	
+
+
 	 	// vars
 	 	$position = get_post_meta($post_id, 'position', true);
 	 	if( $position )
 		{
 			$options['position'] = $position;
 		}
-		
+
 		$layout = get_post_meta($post_id, 'layout', true);
 	 	if( $layout )
 		{
 			$options['layout'] = $layout;
 		}
-		
+
 		$hide_on_screen = get_post_meta($post_id, 'hide_on_screen', true);
 	 	if( $hide_on_screen )
 		{
 			$hide_on_screen = maybe_unserialize($hide_on_screen);
 			$options['hide_on_screen'] = $hide_on_screen;
 		}
-		
-	 	
+
+
 	 	// return
 	 	return $options;
 	}
-	
-	
+
+
 	/*
 	*  validate_page
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.2.6
 	*  @created: 23/06/12
 	*/
-	
+
 	function validate_page()
 	{
 		// global
 		global $pagenow, $typenow;
-		
+
 
 		// vars
 		$return = false;
-		
-		
+
+
 		// validate page
 		if( in_array( $pagenow, array('post.php', 'post-new.php') ) )
 		{
-		
+
 			// validate post type
 			if( $typenow == "acf" )
 			{
 				$return = true;
 			}
-			
+
 		}
-		
-		
+
+
 		// return
 		return $return;
 	}
-	
-	
+
+
 	/*
 	*  admin_enqueue_scripts
 	*
@@ -305,55 +305,55 @@ class acf_field_group
 	*  @since: 3.6
 	*  @created: 26/01/13
 	*/
-	
+
 	function admin_enqueue_scripts()
 	{
 		// validate page
 		if( ! $this->validate_page() ){ return; }
-		
-		
+
+
 		// settings
 		$this->settings = apply_filters('acf/get_info', 'all');
-		
-		
+
+
 		// no autosave
 		wp_dequeue_script( 'autosave' );
-		
-		
+
+
 		// custom scripts
 		wp_enqueue_script(array(
 			'acf-field-group',
 		));
-		
-		
+
+
 		// custom styles
 		wp_enqueue_style(array(
 			'acf-global',
 			'acf-field-group',
 		));
-		
-		
+
+
 		// actions
 		do_action('acf/field_group/admin_enqueue_scripts');
 		add_action('admin_head', array($this,'admin_head'));
-		
+
 	}
-	
-	
+
+
 	/*
 	*  admin_head
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function admin_head()
 	{
 		// global
 		global $wp_version, $post;
-		
-		
+
+
 		// l10n
 		$l10n = array(
 			'move_to_trash'		=>	__("Move to trash. Are you sure?",'acf'),
@@ -367,9 +367,9 @@ class acf_field_group
 			'sibling_fields'	=>	__("Sibling fields",'acf'),
 			'hide_show_all'		=>	__("Hide / Show All",'acf')
 		);
-		
 
-		
+
+
 		?>
 <script type="text/javascript">
 (function($) {
@@ -380,48 +380,48 @@ class acf_field_group
 	acf.admin_url = "<?php echo admin_url(); ?>";
 	acf.ajaxurl = "<?php echo admin_url( 'admin-ajax.php' ); ?>";
 	acf.wp_version = "<?php echo $wp_version; ?>";
-	
-	
+
+
 	// l10n
 	acf.l10n = <?php echo json_encode( $l10n ); ?>;
-	
-})(jQuery);	
+
+})(jQuery);
 </script>
 		<?php
-		
+
 		// new action
 		do_action('acf/field_group/admin_head');
-		
-		
+
+
 		// add metaboxes
 		add_meta_box('acf_fields', __("Fields",'acf'), array($this, 'html_fields'), 'acf', 'normal', 'high');
 		add_meta_box('acf_location', __("Location",'acf'), array($this, 'html_location'), 'acf', 'normal', 'high');
 		add_meta_box('acf_options', __("Options",'acf'), array($this, 'html_options'), 'acf', 'normal', 'high');
-		
-		
+
+
 		// add screen settings
 		add_filter('screen_settings', array($this, 'screen_settings'), 10, 1);
 	}
-	
-	
+
+
 	/*
 	*  html_fields
 	*
-	*  @description: 
+	*  @description:
 	*  @since 1.0.0
 	*  @created: 23/06/12
 	*/
-	
+
 	function html_fields()
 	{
 		include( $this->settings['path'] . 'core/views/meta_box_fields.php' );
 	}
-	
-	
+
+
 	/*
 	*  html_location
 	*
-	*  @description: 
+	*  @description:
 	*  @since 1.0.0
 	*  @created: 23/06/12
 	*/
@@ -430,43 +430,43 @@ class acf_field_group
 	{
 		include( $this->settings['path'] . 'core/views/meta_box_location.php' );
 	}
-	
-	
+
+
 	/*
 	*  html_options
 	*
-	*  @description: 
+	*  @description:
 	*  @since 1.0.0
 	*  @created: 23/06/12
 	*/
-	
+
 	function html_options()
 	{
 		include( $this->settings['path'] . 'core/views/meta_box_options.php' );
 	}
-	
-	
+
+
 	/*
 	*  screen_settings
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.6
 	*  @created: 26/01/13
 	*/
-	
+
 	function screen_settings( $current )
 	{
-	    $current .= '<h5>' . __("Fields",'acf') . '</h5>';
-	    
-	    $current .= '<div class="show-field_key">' . __("Show Field Key:",'acf');
-			$current .= '<label class="show-field_key-no"><input checked="checked" type="radio" value="0" name="show-field_key" />' . __("No",'acf') . '</label>';
-			$current .= '<label class="show-field_key-yes"><input type="radio" value="1" name="show-field_key" />' . __("Yes",'acf') . '</label>';
+	    $current .= '<h5>' . esc_html__("Fields",'acf') . '</h5>';
+
+	    $current .= '<div class="show-field_key">' . esc_html__("Show Field Key:",'acf');
+			$current .= '<label class="show-field_key-no"><input checked="checked" type="radio" value="0" name="show-field_key" />' . esc_html__("No",'acf') . '</label>';
+			$current .= '<label class="show-field_key-yes"><input type="radio" value="1" name="show-field_key" />' . esc_html__("Yes",'acf') . '</label>';
 		$current .= '</div>';
-	    
+
 	    return $current;
 	}
-	
-	
+
+
 	/*
 	*  ajax_render_options
 	*
@@ -474,7 +474,7 @@ class acf_field_group
 	*  @since 3.1.6
 	*  @created: 23/06/12
 	*/
-	
+
 	function ajax_render_options()
 	{
 		// vars
@@ -484,43 +484,43 @@ class acf_field_group
 			'post_id' => 0,
 			'nonce' => ''
 		);
-		
+
 		// load post options
 		$options = array_merge($options, $_POST);
-		
-		
+
+
 		// verify nonce
 		if( ! wp_verify_nonce($options['nonce'], 'acf_nonce') )
 		{
 			die(0);
 		}
-		
-		
+
+
 		// required
 		if( ! $options['field_type'] )
 		{
 			die(0);
 		}
-		
-		
+
+
 		// find key (not actual field key, more the html attr name)
 		$options['field_key'] = str_replace("fields[", "", $options['field_key']);
 		$options['field_key'] = str_replace("][type]", "", $options['field_key']) ;
-		
-		
+
+
 		// render options
 		$field = array(
 			'type' => $options['field_type'],
 			'name' => $options['field_key']
 		);
 		do_action('acf/create_field_options', $field );
-		
-		
+
+
 		die();
-		
+
 	}
-	
-	
+
+
 	/*
 	*  ajax_render_location
 	*
@@ -528,7 +528,7 @@ class acf_field_group
 	*  @since 3.1.6
 	*  @created: 23/06/12
 	*/
-	
+
 	function ajax_render_location( $options = array() )
 	{
 		// defaults
@@ -538,14 +538,14 @@ class acf_field_group
 			'value' => null,
 			'param' => null,
 		);
-		
+
 		$is_ajax = false;
 		if( isset($_POST['nonce']) && wp_verify_nonce($_POST['nonce'], 'acf_nonce') )
 		{
 			$is_ajax = true;
 		}
-		
-		
+
+
 		// Is AJAX call?
 		if( $is_ajax )
 		{
@@ -555,30 +555,30 @@ class acf_field_group
 		{
 			$options = array_merge($defaults, $options);
 		}
-		
+
 		// vars
 		$choices = array();
-		
-		
+
+
 		// some case's have the same outcome
 		if($options['param'] == "page_parent")
 		{
 			$options['param'] = "page";
 		}
 
-		
+
 		switch($options['param'])
 		{
 			case "post_type":
-				
+
 				// all post types except attachment
 				$choices = apply_filters('acf/get_post_types', array(), array('attachment'));
 
 				break;
-			
-			
+
+
 			case "page":
-				
+
 				$post_type = 'page';
 				$posts = get_posts(array(
 					'posts_per_page'			=>	-1,
@@ -589,7 +589,7 @@ class acf_field_group
 					'suppress_filters'			=> false,
 					'update_post_meta_cache'	=> false,
 				));
-				
+
 				if( $posts )
 				{
 					// sort into hierachial order!
@@ -597,7 +597,7 @@ class acf_field_group
 					{
 						$posts = get_page_children( 0, $posts );
 					}
-					
+
 					foreach( $posts as $page )
 					{
 						$title = '';
@@ -609,28 +609,28 @@ class acf_field_group
 								$title .= '- ';
 							}
 						}
-						
+
 						$title .= apply_filters( 'the_title', $page->post_title, $page->ID );
-						
-						
+
+
 						// status
 						if($page->post_status != "publish")
 						{
 							$title .= " ($page->post_status)";
 						}
-						
+
 						$choices[ $page->ID ] = $title;
-						
+
 					}
 					// foreach($pages as $page)
-				
+
 				}
-				
+
 				break;
-			
-			
+
+
 			case "page_type" :
-				
+
 				$choices = array(
 					'front_page'	=>	__("Front Page",'acf'),
 					'posts_page'	=>	__("Posts Page",'acf'),
@@ -638,55 +638,55 @@ class acf_field_group
 					'parent'		=>	__("Parent Page (has children)",'acf'),
 					'child'			=>	__("Child Page (has parent)",'acf'),
 				);
-								
+
 				break;
-				
+
 			case "page_template" :
-				
+
 				$choices = array(
 					'default'	=>	__("Default Template",'acf'),
 				);
-				
+
 				$templates = get_page_templates();
 				foreach($templates as $k => $v)
 				{
 					$choices[$v] = $k;
 				}
-				
+
 				break;
-			
+
 			case "post" :
-				
+
 				$post_types = get_post_types();
-				
+
 				unset( $post_types['page'], $post_types['attachment'], $post_types['revision'] , $post_types['nav_menu_item'], $post_types['acf']  );
-				
+
 				if( $post_types )
 				{
 					foreach( $post_types as $post_type )
 					{
-						
+
 						$posts = get_posts(array(
 							'numberposts' => '-1',
 							'post_type' => $post_type,
 							'post_status' => array('publish', 'private', 'draft', 'inherit', 'future'),
 							'suppress_filters' => false,
 						));
-						
+
 						if( $posts)
 						{
 							$choices[$post_type] = array();
-							
+
 							foreach($posts as $post)
 							{
 								$title = apply_filters( 'the_title', $post->post_title, $post->ID );
-								
+
 								// status
 								if($post->post_status != "publish")
 								{
 									$title .= " ($post->post_status)";
 								}
-								
+
 								$choices[$post_type][$post->ID] = $title;
 
 							}
@@ -697,34 +697,34 @@ class acf_field_group
 					// foreach( $post_types as $post_type )
 				}
 				// if( $post_types )
-				
-				
+
+
 				break;
-			
+
 			case "post_category" :
-				
+
 				$terms = get_terms( 'category', array( 'hide_empty' => false ) );
-				
+
 				if( !empty($terms) ) {
-					
+
 					foreach( $terms as $term ) {
-						
+
 						$choices[ $term->term_id ] = $term->name;
-						
+
 					}
-					
+
 				}
-				
+
 				break;
-			
+
 			case "post_format" :
-				
+
 				$choices = get_post_format_strings();
-								
+
 				break;
-			
+
 			case "post_status" :
-				
+
 				$choices = array(
 					'publish'	=> __( 'Published', 'acf'),
 					'pending'	=> __( 'Pending Review', 'acf'),
@@ -734,71 +734,71 @@ class acf_field_group
 					'inherit'	=> __( 'Revision', 'acf'),
 					'trash'		=> __( 'Trash', 'acf'),
 				);
-								
+
 				break;
-			
+
 			case "user_type" :
-				
+
 				global $wp_roles;
-				
+
 				$choices = $wp_roles->get_names();
 
 				if( is_multisite() )
 				{
 					$choices['super_admin'] = __('Super Admin', 'acf');
 				}
-								
+
 				break;
-			
+
 			case "taxonomy" :
-				
+
 				$choices = array();
 				$simple_value = true;
 				$choices = apply_filters('acf/get_taxonomies_for_select', $choices, $simple_value);
-								
+
 				break;
-			
+
 			case "ef_taxonomy" :
-				
+
 				$choices = array('all' => __('All', 'acf'));
 				$taxonomies = get_taxonomies( array('public' => true), 'objects' );
-				
+
 				foreach($taxonomies as $taxonomy)
 				{
 					$choices[ $taxonomy->name ] = $taxonomy->labels->name;
 				}
-				
+
 				// unset post_format (why is this a public taxonomy?)
 				if( isset($choices['post_format']) )
 				{
 					unset( $choices['post_format']) ;
 				}
-			
-								
+
+
 				break;
-			
+
 			case "ef_user" :
-				
+
 				global $wp_roles;
-				
+
 				$choices = array_merge( array('all' => __('All', 'acf')), $wp_roles->get_names() );
-			
+
 				break;
-				
-				
+
+
 			case "ef_media" :
-				
+
 				$choices = array('all' => __('All', 'acf'));
-			
+
 				break;
-				
+
 		}
-		
-		
+
+
 		// allow custom location rules
 		$choices = apply_filters( 'acf/location/rule_values/' . $options['param'], $choices );
-							
-		
+
+
 		// create field
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
@@ -806,49 +806,49 @@ class acf_field_group
 			'value'	=>	$options['value'],
 			'choices' => $choices,
 		));
-		
-		
+
+
 		// ajax?
 		if( $is_ajax )
 		{
 			die();
 		}
-								
-	}	
-	
-	
+
+	}
+
+
 	/*
 	*  name_save_pre
 	*
-	*  @description: intercepts the acf post obejct and adds an "acf_" to the start of 
+	*  @description: intercepts the acf post obejct and adds an "acf_" to the start of
 	*				 it's name to stop conflicts between acf's and page's urls
 	*  @since 1.0.0
 	*  @created: 23/06/12
 	*/
-		
+
 	function name_save_pre($name)
 	{
 		// validate
-		if( !isset($_POST['post_type']) || $_POST['post_type'] != 'acf' ) 
+		if( !isset($_POST['post_type']) || $_POST['post_type'] != 'acf' )
 		{
 			return $name;
 		}
-		
-		
+
+
 		// need a title
 		if( !$_POST['post_title'] )
 		{
 			$_POST['post_title'] = 'Unnamed Field Group';
 		}
-		
-		
+
+
         $name = 'acf_' . sanitize_title($_POST['post_title']);
 
-        
+
         return $name;
 	}
-	
-	
+
+
 	/*
 	*  save_post
 	*
@@ -856,7 +856,7 @@ class acf_field_group
 	*  @since 1.0.0
 	*  @created: 23/06/12
 	*/
-	
+
 	function save_post($post_id)
 	{
 		// do not save if this is an auto save routine
@@ -864,29 +864,29 @@ class acf_field_group
 		{
 			return $post_id;
 		}
-		
-		
+
+
 		// verify nonce
 		if( !isset($_POST['acf_nonce']) || !wp_verify_nonce($_POST['acf_nonce'], 'field_group') )
 		{
 			return $post_id;
 		}
-		
-		
+
+
 		// only save once! WordPress save's a revision as well.
 		if( wp_is_post_revision($post_id) )
 		{
 	    	return $post_id;
         }
-		
-		
+
+
 		/*
 		*  save fields
 		*/
-		
+
 		// vars
 		$dont_delete = array();
-		
+
 		if( isset($_POST['fields']) && is_array($_POST['fields']) )
 		{
 			$i = -1;
@@ -894,31 +894,31 @@ class acf_field_group
 
 			// remove clone field
 			unset( $_POST['fields']['field_clone'] );
-			
-			
+
+
 
 			// loop through and save fields
 			foreach( $_POST['fields'] as $key => $field )
 			{
 				$i++;
-				
-				
+
+
 				// order + key
 				$field['order_no'] = $i;
 				$field['key'] = $key;
-				
-				
+
+
 				// save
 				do_action('acf/update_field', $field, $post_id );
-				
-				
+
+
 				// add to dont delete array
 				$dont_delete[] = $field['key'];
 			}
 		}
 		unset( $_POST['fields'] );
-		
-		
+
+
 		// delete all other field
 		$keys = get_post_custom_keys($post_id);
 		foreach( $keys as $key )
@@ -929,17 +929,17 @@ class acf_field_group
 				do_action('acf/delete_field', $post_id, $key);
 			}
 		}
-		
-		
+
+
 		/*
 		*  save location rules
 		*/
-		
+
 		if( isset($_POST['location']) && is_array($_POST['location']) )
 		{
 			delete_post_meta( $post_id, 'rule' );
-			
-			
+
+
 			// clean array keys
 			$_POST['location'] = array_values( $_POST['location'] );
 			foreach( $_POST['location'] as $group_id => $group )
@@ -952,21 +952,21 @@ class acf_field_group
 					{
 						$rule['order_no'] = $rule_id;
 						$rule['group_no'] = $group_id;
-						
+
 
 						add_post_meta( $post_id, 'rule', $rule );
 					}
 				}
 			}
-			
+
 			unset( $_POST['location'] );
 		}
-		
-		
+
+
 		/*
 		*  save options
 		*/
-		
+
 		if( isset($_POST['options']) && is_array($_POST['options']) )
 		{
 			update_post_meta($post_id, 'position', $_POST['options']['position']);
@@ -974,15 +974,15 @@ class acf_field_group
 			update_post_meta($post_id, 'hide_on_screen', $_POST['options']['hide_on_screen']);
 		}
 
-		
+
 		unset( $_POST['options'] );
-	
-		
+
+
 	}
-	
-			
+
+
 }
 
 new acf_field_group();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/controllers/field_groups.php b/html/wp-content/plugins/advanced-custom-fields/core/controllers/field_groups.php
index bff69ff..994dbf2 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/controllers/field_groups.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/controllers/field_groups.php
@@ -1,61 +1,61 @@
-<?php 
+<?php
 
 /*
 *  acf_field_groups
 *
-*  @description: 
+*  @description:
 *  @since: 3.6
 *  @created: 25/01/13
 */
 
-class acf_field_groups 
+class acf_field_groups
 {
 
 	/*
 	*  __construct
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function __construct()
 	{
 		// actions
 		add_action('admin_menu', array($this,'admin_menu'));
 	}
-	
-	
+
+
 	/*
 	*  admin_menu
 	*
-	*  @description: 
+	*  @description:
 	*  @created: 2/08/12
 	*/
-	
+
 	function admin_menu()
 	{
-		
+
 		// validate page
 		if( ! $this->validate_page() )
 		{
 			return;
 		}
-		
-		
+
+
 		// actions
 		add_action('admin_print_scripts', array($this,'admin_print_scripts'));
 		add_action('admin_print_styles', array($this,'admin_print_styles'));
 		add_action('admin_footer', array($this,'admin_footer'));
-		
-		
+
+
 		// columns
 		add_filter( 'manage_edit-acf_columns', array($this,'acf_edit_columns'), 10, 1 );
 		add_action( 'manage_acf_posts_custom_column' , array($this,'acf_columns_display'), 10, 2 );
-		
+
 	}
-	
-	
+
+
 	/*
 	*  validate_page
 	*
@@ -63,49 +63,49 @@ class acf_field_groups
 	*  @since 3.2.6
 	*  @created: 23/06/12
 	*/
-	
+
 	function validate_page()
 	{
 		// global
 		global $pagenow;
-		
-		
+
+
 		// vars
 		$return = false;
-		
-		
+
+
 		// validate page
 		if( in_array( $pagenow, array('edit.php') ) )
 		{
-		
+
 			// validate post type
 			if( isset($_GET['post_type']) && $_GET['post_type'] == 'acf' )
 			{
 				$return = true;
 			}
-			
-			
+
+
 			if( isset($_GET['page']) )
 			{
 				$return = false;
 			}
-			
+
 		}
-		
-		
+
+
 		// return
 		return $return;
 	}
-	
-	
+
+
 	/*
 	*  admin_print_scripts
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function admin_print_scripts()
 	{
 		wp_enqueue_script(array(
@@ -113,16 +113,16 @@ class acf_field_groups
 			'thickbox',
 		));
 	}
-	
-	
+
+
 	/*
 	*  admin_print_styles
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function admin_print_styles()
 	{
 		wp_enqueue_style(array(
@@ -131,15 +131,15 @@ class acf_field_groups
 			'acf',
 		));
 	}
-	
-	
+
+
 	/*
 	*  acf_edit_columns
 	*
-	*  @description: 
+	*  @description:
 	*  @created: 2/08/12
 	*/
-	
+
 	function acf_edit_columns( $columns )
 	{
 		$columns = array(
@@ -147,29 +147,29 @@ class acf_field_groups
 			'title' 	=> __("Title"),
 			'fields' 	=> __("Fields", 'acf')
 		);
-		
+
 		return $columns;
 	}
-	
-	
+
+
 	/*
 	*  acf_columns_display
 	*
-	*  @description: 
+	*  @description:
 	*  @created: 2/08/12
 	*/
-	
+
 	function acf_columns_display( $column, $post_id )
 	{
 		// vars
 		switch ($column)
 	    {
 	        case "fields":
-	            
+
 	            // vars
 				$count =0;
 				$keys = get_post_custom_keys( $post_id );
-				
+
 				if($keys)
 				{
 					foreach($keys as $key)
@@ -180,22 +180,22 @@ class acf_field_groups
 						}
 					}
 			 	}
-			 	
+
 			 	echo $count;
 
 	            break;
 	    }
 	}
-	
-	
+
+
 	/*
 	*  admin_footer
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.8
 	*  @created: 23/06/12
 	*/
-	
+
 	function admin_footer()
 	{
 		// vars
@@ -204,31 +204,31 @@ class acf_field_groups
 		$path = apply_filters('acf/get_info', 'path');
 		$show_tab = isset($_GET['info']);
 		$tab = isset($_GET['info']) ? $_GET['info'] : 'changelog';
-		
+
 		?>
 <script type="text/html" id="tmpl-acf-column-2">
 <div class="acf-column-2">
 	<div class="wp-box">
 		<div class="inner">
-			<h2><?php _e("Advanced Custom Fields",'acf'); ?> <?php echo $version; ?></h2>
+			<h2><?php esc_html_e("Advanced Custom Fields",'acf'); ?> <?php echo esc_html($version); ?></h2>
 
-			<h3><?php _e("Changelog",'acf'); ?></h3>
+			<h3><?php esc_html_e("Changelog",'acf'); ?></h3>
 			<p><?php printf(__('See what\'s new in %1$sversion %2$s%3$s','acf'),'<a href="'.admin_url('edit.php?post_type=acf&info=changelog').'">',$version,'</a>'); ?></p>
-			
-			<h3><?php _e("Resources",'acf'); ?></h3>
+
+			<h3><?php esc_html_e("Resources",'acf'); ?></h3>
 			<ul>
-				<li><a href="http://www.advancedcustomfields.com/resources/#getting-started" target="_blank"><?php _e("Getting Started",'acf'); ?></a></li>
-				<li><a href="http://www.advancedcustomfields.com/resources/#field-types" target="_blank"><?php _e("Field Types",'acf'); ?></a></li>
-				<li><a href="http://www.advancedcustomfields.com/resources/#functions" target="_blank"><?php _e("Functions",'acf'); ?></a></li>
-				<li><a href="http://www.advancedcustomfields.com/resources/#actions" target="_blank"><?php _e("Actions",'acf'); ?></a></li>
-				<li><a href="http://www.advancedcustomfields.com/resources/#filters" target="_blank"><?php _e("Filters",'acf'); ?></a></li>
-				<li><a href="http://www.advancedcustomfields.com/resources/#how-to" target="_blank"><?php _e("'How to' guides",'acf'); ?></a></li>
-				<li><a href="http://www.advancedcustomfields.com/resources/#tutorials" target="_blank"><?php _e("Tutorials",'acf'); ?></a></li>
+				<li><a href="http://www.advancedcustomfields.com/resources/#getting-started" target="_blank"><?php esc_html_e("Getting Started",'acf'); ?></a></li>
+				<li><a href="http://www.advancedcustomfields.com/resources/#field-types" target="_blank"><?php esc_html_e("Field Types",'acf'); ?></a></li>
+				<li><a href="http://www.advancedcustomfields.com/resources/#functions" target="_blank"><?php esc_html_e("Functions",'acf'); ?></a></li>
+				<li><a href="http://www.advancedcustomfields.com/resources/#actions" target="_blank"><?php esc_html_e("Actions",'acf'); ?></a></li>
+				<li><a href="http://www.advancedcustomfields.com/resources/#filters" target="_blank"><?php esc_html_e("Filters",'acf'); ?></a></li>
+				<li><a href="http://www.advancedcustomfields.com/resources/#how-to" target="_blank"><?php esc_html_e("'How to' guides",'acf'); ?></a></li>
+				<li><a href="http://www.advancedcustomfields.com/resources/#tutorials" target="_blank"><?php esc_html_e("Tutorials",'acf'); ?></a></li>
 			</ul>
 		</div>
 		<div class="footer footer-blue">
 			<ul class="hl">
-				<li><?php _e("Created by",'acf'); ?> Elliot Condon</li>
+				<li><?php esc_html_e("Created by",'acf'); ?> Elliot Condon</li>
 			</ul>
 		</div>
 	</div>
@@ -237,291 +237,291 @@ class acf_field_groups
 <script type="text/html" id="tmpl-acf-about">
 <!-- acf-about -->
 <div id="acf-about" class="acf-content">
-	
+
 	<!-- acf-content-title -->
 	<div class="acf-content-title">
-		<h1><?php _e("Welcome to Advanced Custom Fields",'acf'); ?> <?php echo $version; ?></h1>
-		<h2><?php _e("Thank you for updating to the latest version!",'acf'); ?> <br /><?php printf(__('ACF %s is more polished and enjoyable than ever before. We hope you like it.','acf'),$version); ?></h2>
+		<h1><?php esc_html_e("Welcome to Advanced Custom Fields",'acf'); ?> <?php echo esc_attr($version); ?></h1>
+		<h2><?php esc_html_e("Thank you for updating to the latest version!",'acf'); ?> <br /><?php printf(__('ACF %s is more polished and enjoyable than ever before. We hope you like it.','acf'),$version); ?></h2>
 	</div>
 	<!-- / acf-content-title -->
-	
+
 	<!-- acf-content-body -->
 	<div class="acf-content-body">
 		<h2 class="nav-tab-wrapper">
-			<a class="acf-tab-toggle nav-tab <?php if( $tab == 'whats-new' ){ echo 'nav-tab-active'; } ?>" href="<?php echo admin_url('edit.php?post_type=acf&info=whats-new'); ?>"><?php _e("What’s New",'acf'); ?></a>
-			<a class="acf-tab-toggle nav-tab <?php if( $tab == 'changelog' ){ echo 'nav-tab-active'; } ?>" href="<?php echo admin_url('edit.php?post_type=acf&info=changelog'); ?>"><?php _e("Changelog",'acf'); ?></a>
+			<a class="acf-tab-toggle nav-tab <?php if( $tab == 'whats-new' ){ echo 'nav-tab-active'; } ?>" href="<?php echo admin_url('edit.php?post_type=acf&info=whats-new'); ?>"><?php esc_html_e("What’s New",'acf'); ?></a>
+			<a class="acf-tab-toggle nav-tab <?php if( $tab == 'changelog' ){ echo 'nav-tab-active'; } ?>" href="<?php echo admin_url('edit.php?post_type=acf&info=changelog'); ?>"><?php esc_html_e("Changelog",'acf'); ?></a>
 			<?php if( $tab == 'download-add-ons' ): ?>
 			<a class="acf-tab-toggle nav-tab nav-tab-active" href="<?php echo admin_url('edit.php?post_type=acf&info=download-add-ons'); ?>"><?php _e("Download Add-ons",'acf'); ?></a>
 			<?php endif; ?>
 		</h2>
 
-<?php if( $tab == 'whats-new' ): 
-		
+<?php if( $tab == 'whats-new' ):
+
 		$activation_codes = array(
 			'repeater' => get_option('acf_repeater_ac', ''),
 			'gallery' => get_option('acf_gallery_ac', ''),
 			'options_page' => get_option('acf_options_page_ac', ''),
 			'flexible_content' => get_option('acf_flexible_content_ac', '')
 		);
-		
+
 		$active = array(
 			'repeater' => class_exists('acf_field_repeater'),
 			'gallery' => class_exists('acf_field_gallery'),
 			'options_page' => class_exists('acf_options_page_plugin'),
 			'flexible_content' => class_exists('acf_field_flexible_content')
 		);
-		
+
 		$update_required = false;
 		$update_complete = true;
-		
+
 		foreach( $activation_codes as $k => $v )
 		{
 			if( $v )
 			{
 				$update_required = true;
-				
+
 				if( !$active[ $k ] )
 				{
 					$update_complete = false;
 				}
 			}
 		}
-		
-		
+
+
 		?>
 
 		<table id="acf-add-ons-table" class="alignright">
 			<tr>
-				<td><img src="<?php echo $dir; ?>images/add-ons/repeater-field-thumb.jpg" /></td>
-				<td><img src="<?php echo $dir; ?>images/add-ons/gallery-field-thumb.jpg" /></td>
+				<td><img src="<?php echo esc_url($dir); ?>images/add-ons/repeater-field-thumb.jpg" /></td>
+				<td><img src="<?php echo esc_url($dir); ?>images/add-ons/gallery-field-thumb.jpg" /></td>
 			</tr>
 			<tr>
-				<td><img src="<?php echo $dir; ?>images/add-ons/options-page-thumb.jpg" /></td>
-				<td><img src="<?php echo $dir; ?>images/add-ons/flexible-content-field-thumb.jpg" /></td>
+				<td><img src="<?php echo esc_url($dir); ?>images/add-ons/options-page-thumb.jpg" /></td>
+				<td><img src="<?php echo esc_url($dir); ?>images/add-ons/flexible-content-field-thumb.jpg" /></td>
 			</tr>
 		</table>
-		
+
 		<div style="margin-right: 300px;">
-	
-			<h3><?php _e("Add-ons",'acf'); ?></h3>
-			
-			<h4><?php _e("Activation codes have grown into plugins!",'acf'); ?></h4>
-			<p><?php _e("Add-ons are now activated by downloading and installing individual plugins. Although these plugins will not be hosted on the wordpress.org repository, each Add-on will continue to receive updates in the usual way.",'acf'); ?></p>
-			
-			
+
+			<h3><?php esc_html_e("Add-ons",'acf'); ?></h3>
+
+			<h4><?php esc_html_e("Activation codes have grown into plugins!",'acf'); ?></h4>
+			<p><?php esc_html_e("Add-ons are now activated by downloading and installing individual plugins. Although these plugins will not be hosted on the wordpress.org repository, each Add-on will continue to receive updates in the usual way.",'acf'); ?></p>
+
+
 			<?php if( $update_required ): ?>
 				<?php if( $update_complete ): ?>
 				<div class="acf-alert acf-alert-success">
-					<p><?php _e("All previous Add-ons have been successfully installed",'acf'); ?></p>
+					<p><?php esc_html_e("All previous Add-ons have been successfully installed",'acf'); ?></p>
 				</div>
 				<?php else: ?>
 				<div class="acf-alert acf-alert-success">
-					<p><?php _e("This website uses premium Add-ons which need to be downloaded",'acf'); ?> <a href="<?php echo admin_url('edit.php?post_type=acf&info=download-add-ons'); ?>" class="acf-button" style="display: inline-block;"><?php _e("Download your activated Add-ons",'acf'); ?></a></p>
+					<p><?php esc_html_e("This website uses premium Add-ons which need to be downloaded",'acf'); ?> <a href="<?php echo admin_url('edit.php?post_type=acf&info=download-add-ons'); ?>" class="acf-button" style="display: inline-block;"><?php esc_html_e("Download your activated Add-ons",'acf'); ?></a></p>
 				</div>
 				<?php endif; ?>
 			<?php else: ?>
 			<div class="acf-alert acf-alert-success">
-				<p><?php _e("This website does not use premium Add-ons and will not be affected by this change.",'acf'); ?></p>
+				<p><?php esc_html_e("This website does not use premium Add-ons and will not be affected by this change.",'acf'); ?></p>
 			</div>
 			<?php endif; ?>
-			
+
 		</div>
-		
+
 		<div class="clear"></div>
-		
+
 		<hr />
-		
-		<h3><?php _e("Easier Development",'acf'); ?></h3>
-		
-		<h4><?php _e("New Field Types",'acf'); ?></h4>
+
+		<h3><?php esc_html_e("Easier Development",'acf'); ?></h3>
+
+		<h4><?php esc_html_e("New Field Types",'acf'); ?></h4>
 		<ul>
-			<li><?php _e("Taxonomy Field",'acf'); ?></li>
-			<li><?php _e("User Field",'acf'); ?></li>
-			<li><?php _e("Email Field",'acf'); ?></li>
-			<li><?php _e("Password Field",'acf'); ?></li>
+			<li><?php esc_html_e("Taxonomy Field",'acf'); ?></li>
+			<li><?php esc_html_e("User Field",'acf'); ?></li>
+			<li><?php esc_html_e("Email Field",'acf'); ?></li>
+			<li><?php esc_html_e("Password Field",'acf'); ?></li>
 		</ul>
-		<h4><?php _e("Custom Field Types",'acf'); ?></h4>
-		<p><?php _e("Creating your own field type has never been easier! Unfortunately, version 3 field types are not compatible with version 4.",'acf'); ?><br />
+		<h4><?php esc_html_e("Custom Field Types",'acf'); ?></h4>
+		<p><?php esc_html_e("Creating your own field type has never been easier! Unfortunately, version 3 field types are not compatible with version 4.",'acf'); ?><br />
 		<?php printf(__('Migrating your field types is easy, please %sfollow this tutorial%s to learn more.','acf'),'<a href="http://www.advancedcustomfields.com/docs/tutorials/creating-a-new-field-type/" target="_blank">','</a>'); ?></p>
-		
-		<h4><?php _e("Actions &amp; Filters",'acf'); ?></h4>
+
+		<h4><?php esc_html_e("Actions &amp; Filters",'acf'); ?></h4>
 		<p><?php printf(__('All actions & filters have received a major facelift to make customizing ACF even easier! Please %sread this guide%s to find the updated naming convention.','acf'),'<a href="http://www.advancedcustomfields.com/resources/getting-started/migrating-from-v3-to-v4/" target="_blank">','</a>'); ?></p>
-		
-		<h4><?php _e("Preview draft is now working!",'acf'); ?></h4>
-		<p><?php _e("This bug has been squashed along with many other little critters!",'acf'); ?> <a class="acf-tab-toggle" href="<?php echo admin_url('edit.php?post_type=acf&info=changelog'); ?>" data-tab="2"><?php _e("See the full changelog",'acf'); ?></a></p>
-		
+
+		<h4><?php esc_html_e("Preview draft is now working!",'acf'); ?></h4>
+		<p><?php esc_html_e("This bug has been squashed along with many other little critters!",'acf'); ?> <a class="acf-tab-toggle" href="<?php echo admin_url('edit.php?post_type=acf&info=changelog'); ?>" data-tab="2"><?php esc_html_e("See the full changelog",'acf'); ?></a></p>
+
 		<hr />
-		
-		<h3><?php _e("Important",'acf'); ?></h3>
-		
-		<h4><?php _e("Database Changes",'acf'); ?></h4>
-		<p><?php _e("Absolutely <strong>no</strong> changes have been made to the database between versions 3 and 4. This means you can roll back to version 3 without any issues.",'acf'); ?></p>
-		
-		<h4><?php _e("Potential Issues",'acf'); ?></h4>
+
+		<h3><?php esc_html_e("Important",'acf'); ?></h3>
+
+		<h4><?php esc_html_e("Database Changes",'acf'); ?></h4>
+		<p><?php esc_html_e("Absolutely <strong>no</strong> changes have been made to the database between versions 3 and 4. This means you can roll back to version 3 without any issues.",'acf'); ?></p>
+
+		<h4><?php esc_html_e("Potential Issues",'acf'); ?></h4>
 		<p><?php printf(__('Due to the sizable changes surrounding Add-ons, field types and action/filters, your website may not operate correctly. It is important that you read the full %sMigrating from v3 to v4%s guide to view the full list of changes.','acf'),'<a href="http://www.advancedcustomfields.com/resources/getting-started/migrating-from-v3-to-v4/" target="_blank">','</a>'); ?></p>
-		
+
 		<div class="acf-alert acf-alert-error">
-			<p><strong><?php _e("Really Important!",'acf'); ?></strong> <?php printf(__('If you updated the ACF plugin without prior knowledge of such changes, please roll back to the latest %sversion 3%s of this plugin.','acf'),'<a href="http://wordpress.org/extend/plugins/advanced-custom-fields/developers/">','</a>'); ?></p>
+			<p><strong><?php esc_html_e("Really Important!",'acf'); ?></strong> <?php printf(__('If you updated the ACF plugin without prior knowledge of such changes, please roll back to the latest %sversion 3%s of this plugin.','acf'),'<a href="http://wordpress.org/extend/plugins/advanced-custom-fields/developers/">','</a>'); ?></p>
 		</div>
-		
+
 		<hr />
-		
-		<h3><?php _e("Thank You",'acf'); ?></h3>
-		<p><?php _e("A <strong>BIG</strong> thank you to everyone who has helped test the version 4 beta and for all the support I have received.",'acf'); ?></p>
-		<p><?php _e("Without you all, this release would not have been possible!",'acf'); ?></p>
+
+		<h3><?php esc_html_e("Thank You",'acf'); ?></h3>
+		<p><?php esc_html_e("A <strong>BIG</strong> thank you to everyone who has helped test the version 4 beta and for all the support I have received.",'acf'); ?></p>
+		<p><?php esc_html_e("Without you all, this release would not have been possible!",'acf'); ?></p>
 
 <?php elseif( $tab == 'changelog' ): ?>
-		
-		<h3><?php _e("Changelog for",'acf'); ?> <?php echo $version; ?></h3>
+
+		<h3><?php esc_html_e("Changelog for",'acf'); ?> <?php echo $version; ?></h3>
 		<?php
-		
+
 		$items = file_get_contents( $path . 'readme.txt' );
 		$items = explode('= ' . $version . ' =', $items);
-		
+
 		$items = end( $items );
 		$items = current( explode("\n\n", $items) );
 		$items = array_filter( array_map('trim', explode("*", $items)) );
-		
+
 		?>
 		<ul class="acf-changelog">
-		<?php foreach( $items as $item ): 
-			
+		<?php foreach( $items as $item ):
+
 			$item = explode('http', $item);
-				
+
 		?>
-			<li><?php echo $item[0]; ?><?php if( isset($item[1]) ): ?><a href="http<?php echo $item[1]; ?>" target="_blank"><?php _e("Learn more",'acf'); ?></a><?php endif; ?></li>
+			<li><?php echo esc_html( $item[0]); ?><?php if( isset($item[1]) ): ?><a href="http<?php echo $item[1]; ?>" target="_blank"><?php esc_html_e("Learn more",'acf'); ?></a><?php endif; ?></li>
 		<?php endforeach; ?>
 		</ul>
 
 <?php elseif( $tab == 'download-add-ons' ): ?>
-		
-		<h3><?php _e("Overview",'acf'); ?></h3>
-		
-		<p><?php _e("Previously, all Add-ons were unlocked via an activation code (purchased from the ACF Add-ons store). New to v4, all Add-ons act as separate plugins which need to be individually downloaded, installed and updated.",'acf'); ?></p>
-		
-		<p><?php _e("This page will assist you in downloading and installing each available Add-on.",'acf'); ?></p>
-		
-		<h3><?php _e("Available Add-ons",'acf'); ?></h3>
-		
-		<p><?php _e("The following Add-ons have been detected as activated on this website.",'acf'); ?></p>
-		
-		<?php 
-		
+
+		<h3><?php esc_html_e("Overview",'acf'); ?></h3>
+
+		<p><?php esc_html_e("Previously, all Add-ons were unlocked via an activation code (purchased from the ACF Add-ons store). New to v4, all Add-ons act as separate plugins which need to be individually downloaded, installed and updated.",'acf'); ?></p>
+
+		<p><?php esc_html_e("This page will assist you in downloading and installing each available Add-on.",'acf'); ?></p>
+
+		<h3><?php esc_html_e("Available Add-ons",'acf'); ?></h3>
+
+		<p><?php esc_html_e("The following Add-ons have been detected as activated on this website.",'acf'); ?></p>
+
+		<?php
+
 		$ac_repeater = get_option('acf_repeater_ac', '');
 		$ac_options_page = get_option('acf_options_page_ac', '');
 		$ac_flexible_content = get_option('acf_flexible_content_ac', '');
 		$ac_gallery = get_option('acf_gallery_ac', '');
-		
+
 		?>
 		<table class="widefat" id="acf-download-add-ons-table">
 			<thead>
 			<tr>
-				<th colspan="2"><?php _e("Name",'acf'); ?></th>
-				<th><?php _e("Activation Code",'acf'); ?></th>
-				<th><?php _e("Download",'acf'); ?></th>
+				<th colspan="2"><?php esc_html_e("Name",'acf'); ?></th>
+				<th><?php esc_html_e("Activation Code",'acf'); ?></th>
+				<th><?php esc_html_e("Download",'acf'); ?></th>
 			</tr>
 			</thead>
 			<tbody>
 			<?php if( $ac_repeater ): ?>
 			<tr>
-				<td class="td-image"><img src="<?php echo $dir; ?>images/add-ons/repeater-field-thumb.jpg" style="width:50px" /></td>
-				<th class="td-name"><?php _e("Repeater Field",'acf'); ?></th>
+				<td class="td-image"><img src="<?php echo esc_attr($dir); ?>images/add-ons/repeater-field-thumb.jpg" style="width:50px" /></td>
+				<th class="td-name"><?php esc_html_e("Repeater Field",'acf'); ?></th>
 				<td class="td-code">XXXX-XXXX-XXXX-<?php echo substr($ac_repeater,-4); ?></td>
-				<td class="td-download"><a class="button" href="http://download.advancedcustomfields.com/<?php echo $ac_repeater; ?>/trunk"><?php _e("Download",'acf'); ?></a></td>
+				<td class="td-download"><a class="button" href="http://download.advancedcustomfields.com/<?php echo $ac_repeater; ?>/trunk"><?php esc_html_e("Download",'acf'); ?></a></td>
 			</tr>
 			<?php endif; ?>
 			<?php if( $ac_gallery ): ?>
 			<tr>
 				<td><img src="<?php echo $dir; ?>images/add-ons/gallery-field-thumb.jpg" /></td>
-				<th><?php _e("Gallery Field",'acf'); ?></th>
+				<th><?php esc_html_e("Gallery Field",'acf'); ?></th>
 				<td>XXXX-XXXX-XXXX-<?php echo substr($ac_gallery,-4); ?></td>
-				<td><a class="button" href="http://download.advancedcustomfields.com/<?php echo $ac_gallery; ?>/trunk"><?php _e("Download",'acf'); ?></a></td>
-			</tr>	
+				<td><a class="button" href="http://download.advancedcustomfields.com/<?php echo $ac_gallery; ?>/trunk"><?php esc_html_e("Download",'acf'); ?></a></td>
+			</tr>
 			<?php endif; ?>
 			<?php if( $ac_options_page ): ?>
 			<tr>
 				<td><img src="<?php echo $dir; ?>images/add-ons/options-page-thumb.jpg" /></td>
-				<th><?php _e("Options Page",'acf'); ?></th>
+				<th><?php esc_html_e("Options Page",'acf'); ?></th>
 				<td>XXXX-XXXX-XXXX-<?php echo substr($ac_options_page,-4); ?></td>
-				<td><a class="button" href="http://download.advancedcustomfields.com/<?php echo $ac_options_page; ?>/trunk"><?php _e("Download",'acf'); ?></a></td>
+				<td><a class="button" href="http://download.advancedcustomfields.com/<?php echo $ac_options_page; ?>/trunk"><?php esc_html_e("Download",'acf'); ?></a></td>
 			</tr>
 			<?php endif; ?>
 			<?php if($ac_flexible_content): ?>
 			<tr>
 				<td><img src="<?php echo $dir; ?>images/add-ons/flexible-content-field-thumb.jpg" /></td>
-				<th><?php _e("Flexible Content",'acf'); ?></th>
+				<th><?php esc_html_e("Flexible Content",'acf'); ?></th>
 				<td>XXXX-XXXX-XXXX-<?php echo substr($ac_flexible_content,-4); ?></td>
-				<td><a class="button" href="http://download.advancedcustomfields.com/<?php echo $ac_flexible_content; ?>/trunk"><?php _e("Download",'acf'); ?></a></td>
+				<td><a class="button" href="http://download.advancedcustomfields.com/<?php echo $ac_flexible_content; ?>/trunk"><?php esc_html_e("Download",'acf'); ?></a></td>
 			</tr>
 			<?php endif; ?>
 			</tbody>
 		</table>
-		
-		
-		
-		<h3><?php _e("Installation",'acf'); ?></h3>
-		
-		<p><?php _e("For each Add-on available, please perform the following:",'acf'); ?></p>
+
+
+
+		<h3><?php esc_html_e("Installation",'acf'); ?></h3>
+
+		<p><?php esc_html_e("For each Add-on available, please perform the following:",'acf'); ?></p>
 		<ol>
-			<li><?php _e("Download the Add-on plugin (.zip file) to your desktop",'acf'); ?></li>
+			<li><?php esc_html_e("Download the Add-on plugin (.zip file) to your desktop",'acf'); ?></li>
 			<li><?php printf(__('Navigate to %sPlugins > Add New > Upload%s','acf'),'<a target="_blank" href="'.admin_url('plugin-install.php?tab=upload').'">','</a>'); ?></li>
-			<li><?php _e("Use the uploader to browse, select and install your Add-on (.zip file)",'acf'); ?></li>
-			<li><?php _e("Once the plugin has been uploaded and installed, click the 'Activate Plugin' link",'acf'); ?></li>
-			<li><?php _e("The Add-on is now installed and activated!",'acf'); ?></li>
+			<li><?php esc_html_e("Use the uploader to browse, select and install your Add-on (.zip file)",'acf'); ?></li>
+			<li><?php esc_html_e("Once the plugin has been uploaded and installed, click the 'Activate Plugin' link",'acf'); ?></li>
+			<li><?php esc_html_e("The Add-on is now installed and activated!",'acf'); ?></li>
 		</ol>
-		
-		
+
+
 <?php endif; ?>
 
-		
+
 	</div>
 	<!-- / acf-content-body -->
-	
-	
+
+
 	<!-- acf-content-footer -->
 	<div class="acf-content-footer">
 		<ul class="hl clearfix">
-			<li><a class="acf-button acf-button-big" href="<?php echo admin_url('edit.php?post_type=acf'); ?>"><?php _e("Awesome. Let's get to work",'acf'); ?></a></li>
+			<li><a class="acf-button acf-button-big" href="<?php echo admin_url('edit.php?post_type=acf'); ?>"><?php esc_html_e("Awesome. Let's get to work",'acf'); ?></a></li>
 		</ul>
 	</div>
 	<!-- / acf-content-footer -->
-	
-	
-	
+
+
+
 </div>
 <!-- / acf-about -->
 </script>
 <script type="text/javascript">
 (function($){
-	
+
 	// wrap
 	$('#wpbody .wrap').attr('id', 'acf-field-group-wrap');
-	
-	
+
+
 	// wrap column main
 	$('#acf-field-group-wrap').wrapInner('<div class="acf-columns-2" />');
-	
-	
+
+
 	// add column main
 	$('#posts-filter').addClass('acf-column-1');
-	
-	
+
+
 	// add column side
 	$('#posts-filter').after( $('#tmpl-acf-column-2').html() );
-	
-	
+
+
 	<?php if( $show_tab ): ?>
 	// add about copy
 	$('#wpbody-content').prepend( $('#tmpl-acf-about').html() );
 	$('#acf-field-group-wrap').hide();
 	$('#screen-meta-links').hide();
 	<?php endif; ?>
-	
+
 })(jQuery);
 </script>
 		<?php
 	}
-			
+
 }
 
 new acf_field_groups();
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/controllers/post.php b/html/wp-content/plugins/advanced-custom-fields/core/controllers/post.php
index ed627a3..c990799 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/controllers/post.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/controllers/post.php
@@ -1,4 +1,4 @@
-<?php 
+<?php
 
 /*
 *  acf_controller_post
@@ -13,7 +13,7 @@
 
 class acf_controller_post
 {
-	
+
 	/*
 	*  Constructor
 	*
@@ -26,20 +26,20 @@ class acf_controller_post
 	*  @param	N/A
 	*  @return	N/A
 	*/
-	
+
 	function __construct()
 	{
 		// actions
 		add_action('admin_enqueue_scripts',				array($this, 'admin_enqueue_scripts'));
 		add_action('save_post', 						array($this, 'save_post'), 10, 1);
-		
-		
+
+
 		// ajax
 		add_action('wp_ajax_acf/post/render_fields',	array($this, 'ajax_render_fields'));
 		add_action('wp_ajax_acf/post/get_style', 		array($this, 'ajax_get_style'));
 	}
-	
-	
+
+
 	/*
 	*  validate_page
 	*
@@ -52,48 +52,48 @@ class acf_controller_post
 	*  @param	N/A
 	*  @return	(boolean)
 	*/
-	
+
 	function validate_page()
 	{
 		// global
 		global $pagenow, $typenow;
-		
-		
+
+
 		// vars
 		$return = false;
-		
-		
+
+
 		// validate page
 		if( in_array( $pagenow, array('post.php', 'post-new.php') ) )
 		{
-		
+
 			// validate post type
 			global $typenow;
-			
+
 			if( $typenow != "acf" )
 			{
 				$return = true;
 			}
-			
+
 		}
-		
-		
+
+
 		// validate page (Shopp)
 		if( $pagenow == "admin.php" && isset( $_GET['page'] ) && $_GET['page'] == "shopp-products" && isset( $_GET['id'] ) )
 		{
 			$return = true;
 		}
-		
-		
+
+
 		// return
 		return $return;
 	}
-	
-	
+
+
 	/*
 	*  admin_enqueue_scripts
 	*
-	*  This action is run after post query but before any admin script / head actions. 
+	*  This action is run after post query but before any admin script / head actions.
 	*  It is a good place to register all actions.
 	*
 	*  @type	action (admin_enqueue_scripts)
@@ -103,7 +103,7 @@ class acf_controller_post
 	*  @param	N/A
 	*  @return	N/A
 	*/
-	
+
 	function admin_enqueue_scripts()
 	{
 		// validate page
@@ -112,14 +112,14 @@ class acf_controller_post
 			return;
 		}
 
-		
+
 		// actions
 		do_action('acf/input/admin_enqueue_scripts');
-		
+
 		add_action('admin_head', array($this,'admin_head'));
 	}
-	
-	
+
+
 	/*
 	*  admin_head
 	*
@@ -132,65 +132,65 @@ class acf_controller_post
 	*  @param	N/A
 	*  @return	N/A
 	*/
-	
+
 	function admin_head()
 	{
 		// globals
 		global $post, $pagenow, $typenow;
-		
-		
+
+
 		// shopp
 		if( $pagenow == "admin.php" && isset( $_GET['page'] ) && $_GET['page'] == "shopp-products" && isset( $_GET['id'] ) )
 		{
 			$typenow = "shopp_product";
 		}
-		
-		
+
+
 		// vars
 		$post_id = $post ? $post->ID : 0;
-		
-			
+
+
 		// get field groups
-		$filter = array( 
-			'post_id'	=> $post_id, 
-			'post_type'	=> $typenow 
+		$filter = array(
+			'post_id'	=> $post_id,
+			'post_type'	=> $typenow
 		);
 		$metabox_ids = array();
 		$metabox_ids = apply_filters( 'acf/location/match_field_groups', $metabox_ids, $filter );
-		
-		
+
+
 		// get style of first field group
 		$style = '';
 		if( isset($metabox_ids[0]) )
 		{
 			$style = $this->get_style( $metabox_ids[0] );
 		}
-		
-		
+
+
 		// Style
 		echo '<style type="text/css" id="acf_style" >' . $style . '</style>';
-		
-		
+
+
 		// add user js + css
 		do_action('acf/input/admin_head');
-		
-		
+
+
 		// get field groups
 		$acfs = apply_filters('acf/get_field_groups', array());
-		
-		
+
+
 		if( $acfs )
 		{
 			foreach( $acfs as $acf )
 			{
 				// load options
 				$acf['options'] = apply_filters('acf/field_group/get_options', array(), $acf['id']);
-				
-				
+
+
 				// vars
 				$show = in_array( $acf['id'], $metabox_ids ) ? 1 : 0;
-				
-				
+
+
 				// priority
 				$priority = 'high';
 				if( $acf['options']['position'] == 'side' )
@@ -198,34 +198,34 @@ class acf_controller_post
 					$priority = 'core';
 				}
 				$priority = apply_filters('acf/input/meta_box_priority', $priority, $acf);
-				
-				
+
+
 				// add meta box
 				add_meta_box(
-					'acf_' . $acf['id'], 
-					$acf['title'], 
-					array($this, 'meta_box_input'), 
-					$typenow, 
-					$acf['options']['position'], 
-					$priority, 
+					'acf_' . $acf['id'],
+					$acf['title'],
+					array($this, 'meta_box_input'),
+					$typenow,
+					$acf['options']['position'],
+					$priority,
 					array( 'field_group' => $acf, 'show' => $show, 'post_id' => $post_id )
 				);
-				
+
 			}
 			// foreach($acfs as $acf)
 		}
 		// if($acfs)
-		
-		
+
+
 		// Allow 'acf_after_title' metabox position
 		add_action('edit_form_after_title', array($this, 'edit_form_after_title'));
-		
-		
+
+
 		// remove ACF from meta postbox
 		add_filter( 'is_protected_meta', array($this, 'is_protected_meta'), 10, 3 );
 	}
-	
-	
+
+
 	/*
 	*  edit_form_after_title
 	*
@@ -237,21 +237,21 @@ class acf_controller_post
 	*  @param	N/A
 	*  @return	N/A
 	*/
-	
+
 	function edit_form_after_title()
 	{
 		// globals
 		global $post, $wp_meta_boxes;
-		
-		
+
+
 		// render
 		do_meta_boxes( get_current_screen(), 'acf_after_title', $post);
-		
-		
+
+
 		// clean up
 		unset( $wp_meta_boxes['post']['acf_after_title'] );
-		
-		
+
+
 		// preview hack
 		// the following code will add a hidden input which will trigger WP to create a revision apon save
 		// http://support.advancedcustomfields.com/forums/topic/preview-solution/#post-4106
@@ -261,64 +261,64 @@ class acf_controller_post
 		</div>
 		<?php
 	}
-	
-	
+
+
 	/*
 	*  meta_box_input
 	*
-	*  @description: 
+	*  @description:
 	*  @since 1.0.0
 	*  @created: 23/06/12
 	*/
-	
+
 	function meta_box_input( $post, $args )
 	{
 		// extract $args
 		extract( $args );
-		
-		
+
+
 		// classes
 		$class = 'acf_postbox ' . $args['field_group']['options']['layout'];
 		$toggle_class = 'acf_postbox-toggle';
-		
-		
+
+
 		if( ! $args['show'] )
 		{
 			$class .= ' acf-hidden';
 			$toggle_class .= ' acf-hidden';
 		}
-		
-		
+
+
 		// HTML
 		if( $args['show'] )
 		{
 			$fields = apply_filters('acf/field_group/get_fields', array(), $args['field_group']['id']);
-	
+
 			do_action('acf/create_fields', $fields, $args['post_id']);
 		}
 		else
 		{
 			echo '<div class="acf-replace-with-fields"><div class="acf-loading"></div></div>';
 		}
-		
-		
+
+
 		// nonce
 		echo '<div style="display:none">';
 			echo '<input type="hidden" name="acf_nonce" value="' . wp_create_nonce( 'input' ) . '" />';
 			?>
 <script type="text/javascript">
 (function($) {
-	
-	$('#<?php echo $id; ?>').addClass('<?php echo $class; ?>').removeClass('hide-if-js');
-	$('#adv-settings label[for="<?php echo $id; ?>-hide"]').addClass('<?php echo $toggle_class; ?>');
-	
-})(jQuery);	
+
+	$('#<?php echo esc_attr($id); ?>').addClass('<?php echo esc_attr($class); ?>').removeClass('hide-if-js');
+	$('#adv-settings label[for="<?php echo esc_attr($id); ?>-hide"]').addClass('<?php echo esc_attr($toggle_class); ?>');
+
+})(jQuery);
 </script>
 			<?php
 		echo '</div>';
 	}
-	
-	
+
+
 	/*
 	*  get_style
 	*
@@ -332,9 +332,9 @@ class acf_controller_post
 		// vars
 		$options = apply_filters('acf/field_group/get_options', array(), $acf_id);
 		$html = '';
-		
-		
-		// add style to html 
+
+
+		// add style to html
 		if( in_array('permalink',$options['hide_on_screen']) )
 		{
 			$html .= '#edit-slug-box {display: none;} ';
@@ -391,12 +391,12 @@ class acf_controller_post
 		{
 			$html .= '#trackbacksdiv, #screen-meta label[for=trackbacksdiv-hide] {display: none;} ';
 		}
-		
-				
+
+
 		return $html;
 	}
-	
-	
+
+
 	/*
 	*  ajax_get_input_style
 	*
@@ -404,7 +404,7 @@ class acf_controller_post
 	*  @since 2.0.5
 	*  @created: 23/06/12
 	*/
-	
+
 	function ajax_get_style()
 	{
 		// vars
@@ -412,57 +412,57 @@ class acf_controller_post
 			'acf_id' => 0,
 			'nonce' => ''
 		);
-		
+
 		// load post options
 		$options = array_merge($options, $_POST);
-		
-		
+
+
 		// verify nonce
 		if( ! wp_verify_nonce($options['nonce'], 'acf_nonce') )
 		{
 			die(0);
 		}
-		
-		
+
+
 		// return style
 		echo $this->get_style( $options['acf_id'] );
-		
-		
+
+
 		// die
 		die;
 	}
-	
-	
+
+
 	/*
 	*  ajax_render_fields
 	*
-	*  @description: 
+	*  @description:
 	*  @since 3.1.6
 	*  @created: 23/06/12
 	*/
 
 	function ajax_render_fields()
 	{
-		
+
 		// defaults
 		$options = array(
 			'acf_id' => 0,
 			'post_id' => 0,
 			'nonce' => ''
 		);
-		
-		
+
+
 		// load post options
 		$options = array_merge($options, $_POST);
-		
-		
+
+
 		// verify nonce
 		if( ! wp_verify_nonce($options['nonce'], 'acf_nonce') )
 		{
 			die(0);
 		}
-		
-		
+
+
 		// get acfs
 		$acfs = apply_filters('acf/get_field_groups', array());
 		if( $acfs )
@@ -472,19 +472,19 @@ class acf_controller_post
 				if( $acf['id'] == $options['acf_id'] )
 				{
 					$fields = apply_filters('acf/field_group/get_fields', array(), $acf['id']);
-					
+
 					do_action('acf/create_fields', $fields, $options['post_id']);
-					
+
 					break;
 				}
 			}
 		}
 
 		die();
-		
+
 	}
-	
-	
+
+
 	/*
 	*  save_post
 	*
@@ -492,24 +492,24 @@ class acf_controller_post
 	*  @since 1.0.0
 	*  @created: 23/06/12
 	*/
-	
+
 	function save_post( $post_id )
-	{	
-		
+	{
+
 		// do not save if this is an auto save routine
 		if( defined('DOING_AUTOSAVE') && DOING_AUTOSAVE )
 		{
 			return $post_id;
 		}
-		
-		
+
+
 		// verify nonce
 		if( !isset($_POST['acf_nonce'], $_POST['fields']) || !wp_verify_nonce($_POST['acf_nonce'], 'input') )
 		{
 			return $post_id;
 		}
-		
-		
+
+
 		// if save lock contains a value, the save_post action is already running for another post.
 		// this would imply that the user is hooking into an ACF update_value or save_post action and inserting a new post
 		// if this is the case, we do not want to save all the $POST data to this post.
@@ -517,14 +517,14 @@ class acf_controller_post
 		{
 			return $post_id;
 		}
-		
-		
+
+
 		// update the post (may even be a revision / autosave preview)
 		do_action('acf/save_post', $post_id);
-        
+
 	}
-	
-	
+
+
 	/*
 	*  is_protected_meta
 	*
@@ -537,35 +537,35 @@ class acf_controller_post
 	*  @param	$post_id (int)
 	*  @return	$post_id (int)
 	*/
-	
+
 	function is_protected_meta( $protected, $meta_key, $meta_type ) {
-		
+
 		// globals
 		global $post;
-		
-		
+
+
 		// if acf_get_field_reference returns a valid key, this is an acf value, so protect it!
 		if( !$protected ) {
-			
+
 			$reference = get_field_reference( $meta_key, $post->ID );
-			
+
 			if( substr($reference, 0, 6) === 'field_' ) {
-				
+
 				$protected = true;
-				
-			} 
-			
+
+			}
+
 		}
-		
-		
+
+
 		// return
 		return $protected;
-				
+
 	}
-	
-			
+
+
 }
 
 new acf_controller_post();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/checkbox.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/checkbox.php
index 0e4ce90..335a984 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/checkbox.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/checkbox.php
@@ -11,7 +11,7 @@ class acf_field_checkbox extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -23,13 +23,13 @@ class acf_field_checkbox extends acf_field
 			'choices'		=>	array(),
 			'default_value'	=>	'',
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
 	}
-		
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -41,7 +41,7 @@ class acf_field_checkbox extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// value must be array
@@ -58,30 +58,30 @@ class acf_field_checkbox extends acf_field
 				$field['value'] = array( $field['value'] );
 			}
 		}
-		
-		
+
+
 		// trim value
 		$field['value'] = array_map('trim', $field['value']);
-		
-		
+
+
 		// vars
 		$i = 0;
 		$e = '<input type="hidden" name="' .  esc_attr($field['name']) . '" value="" />';
 		$e .= '<ul class="acf-checkbox-list ' . esc_attr($field['class']) . ' ' . esc_attr($field['layout']) . '">';
-		
-		
+
+
 		// checkbox saves an array
 		$field['name'] .= '[]';
-		
-		
+
+
 		// foreach choices
 		foreach( $field['choices'] as $key => $value )
 		{
 			// vars
 			$i++;
 			$atts = '';
-			
-			
+
+
 			if( in_array($key, $field['value']) )
 			{
 				$atts = 'checked="yes"';
@@ -90,27 +90,27 @@ class acf_field_checkbox extends acf_field
 			{
 				$atts .= ' disabled="true"';
 			}
-			
-			
+
+
 			// each checkbox ID is generated with the $key, however, the first checkbox must not use $key so that it matches the field's label for attribute
 			$id = $field['id'];
-			
+
 			if( $i > 1 )
 			{
 				$id .= '-' . $key;
 			}
-			
-			$e .= '<li><label><input id="' . esc_attr($id) . '" type="checkbox" class="' . esc_attr($field['class']) . '" name="' . esc_attr($field['name']) . '" value="' . esc_attr($key) . '" ' . $atts . ' />' . $value . '</label></li>';
+
+			$e .= '<li><label><input id="' . esc_attr($id) . '" type="checkbox" class="' . esc_attr($field['class']) . '" name="' . esc_attr($field['name']) . '" value="' . esc_attr($key) . '" ' . $atts . ' />' . esc_html( $value ) . '</label></li>';
 		}
-		
+
 		$e .= '</ul>';
-		
-		
+
+
 		// return
 		echo $e;
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -123,88 +123,88 @@ class acf_field_checkbox extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
-		
+
+
 		// implode checkboxes so they work in a textarea
 		if( is_array($field['choices']) )
-		{		
+		{
 			foreach( $field['choices'] as $k => $v )
 			{
 				$field['choices'][ $k ] = $k . ' : ' . $v;
 			}
 			$field['choices'] = implode("\n", $field['choices']);
 		}
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label for=""><?php _e("Choices",'acf'); ?></label>
-		<p><?php _e("Enter each choice on a new line.",'acf'); ?></p>
-		<p><?php _e("For more control, you may specify both a value and label like this:",'acf'); ?></p>
-		<p><?php _e("red : Red",'acf'); ?><br /><?php _e("blue : Blue",'acf'); ?></p>
+		<label for=""><?php esc_html_e("Choices",'acf'); ?></label>
+		<p><?php esc_html_e("Enter each choice on a new line.",'acf'); ?></p>
+		<p><?php esc_html_e("For more control, you may specify both a value and label like this:",'acf'); ?></p>
+		<p><?php esc_html_e("red : Red",'acf'); ?><br /><?php esc_html_e("blue : Blue",'acf'); ?></p>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'textarea',
 			'class' => 	'textarea field_option-choices',
-			'name'	=>	'fields['.$key.'][choices]',
+			'name'	=>	'fields['. esc_attr($key) .'][choices]',
 			'value'	=>	$field['choices'],
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Default Value",'acf'); ?></label>
-		<p class="description"><?php _e("Enter each default value on a new line",'acf'); ?></p>
+		<label><?php esc_html_e("Default Value", 'acf'); ?></label>
+		<p class="description"><?php esc_html_e("Enter each default value on a new line",'acf'); ?></p>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'textarea',
-			'name'	=>	'fields['.$key.'][default_value]',
+			'name'	=>	'fields['. esc_attr($key) .'][default_value]',
 			'value'	=>	$field['default_value'],
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name) ?>">
 	<td class="label">
-		<label for=""><?php _e("Layout",'acf'); ?></label>
+		<label for=""><?php esc_html_e("Layout",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'radio',
-			'name'	=>	'fields['.$key.'][layout]',
+			'name'	=>	'fields['. esc_attr($key) .'][layout]',
 			'value'	=>	$field['layout'],
-			'layout' => 'horizontal', 
+			'layout' => 'horizontal',
 			'choices' => array(
-				'vertical' => __("Vertical",'acf'), 
+				'vertical' => __("Vertical",'acf'),
 				'horizontal' => __("Horizontal",'acf')
 			)
 		));
-		
+
 		?>
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
+
 }
 
 new acf_field_checkbox();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/color_picker.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/color_picker.php
index 7650b05..aaa8040 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/color_picker.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/color_picker.php
@@ -2,7 +2,7 @@
 
 class acf_field_color_picker extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_color_picker extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -21,14 +21,14 @@ class acf_field_color_picker extends acf_field
 		$this->defaults = array(
 			'default_value'	=>	'',
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
-    	
+
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -40,31 +40,31 @@ class acf_field_color_picker extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// vars
 		$o = array( 'id', 'class', 'name', 'value' );
 		$e = '';
-		
-		
+
+
 		$e .= '<div class="acf-color_picker">';
 		$e .= '<input type="text"';
-		
+
 		foreach( $o as $k )
 		{
-			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';	
+			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';
 		}
-		
+
 		$e .= ' />';
 		$e .= '</div>';
-		
-		
+
+
 		// return
 		echo $e;
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -77,22 +77,22 @@ class acf_field_color_picker extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Default Value",'acf'); ?></label>
+		<label><?php _e("Default Value", 'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'			=>	'text',
-			'name'			=>	'fields[' .$key.'][default_value]',
+			'name'			=>	'fields[' . esc_attr($key) .'][default_value]',
 			'value'			=>	$field['default_value'],
 			'placeholder'	=>	'#ffffff'
 		));
@@ -100,11 +100,11 @@ class acf_field_color_picker extends acf_field
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
+
 }
 
 new acf_field_color_picker();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/date_picker/date_picker.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/date_picker/date_picker.php
index e1a0eed..7c4c421 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/date_picker/date_picker.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/date_picker/date_picker.php
@@ -2,7 +2,7 @@
 
 class acf_field_date_picker extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_date_picker extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -23,21 +23,21 @@ class acf_field_date_picker extends acf_field
 			'display_format' => 'dd/mm/yy',
 			'first_day' => 1, // monday
 		);
-		
-		
+
+
 		// actions
 		add_action('init', array($this, 'init'));
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
 	}
-	
-	
+
+
 	/*
 	*  init
 	*
-	*  This function is run on the 'init' action to set the field's $l10n data. Before the init action, 
+	*  This function is run on the 'init' action to set the field's $l10n data. Before the init action,
 	*  access to the $wp_locale variable is not possible.
 	*
 	*  @type	action (init)
@@ -46,11 +46,11 @@ class acf_field_date_picker extends acf_field
 	*  @param	N/A
 	*  @return	N/A
 	*/
-	
+
 	function init()
 	{
 		global $wp_locale;
-		
+
 		$this->l10n = array(
 			'closeText'         => __( 'Done', 'acf' ),
 	        'currentText'       => __( 'Today', 'acf' ),
@@ -63,8 +63,8 @@ class acf_field_date_picker extends acf_field
 	        'isRTL'             => isset($wp_locale->is_rtl) ? $wp_locale->is_rtl : false,
 		);
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -76,7 +76,7 @@ class acf_field_date_picker extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// make sure it's not blank
@@ -88,16 +88,16 @@ class acf_field_date_picker extends acf_field
 		{
 			$field['display_format'] = 'dd/mm/yy';
 		}
-		
+
 
 		// html
-		echo '<div class="acf-date_picker" data-save_format="' . $field['date_format'] . '" data-display_format="' . $field['display_format'] . '" data-first_day="' . $field['first_day'] . '">';
-			echo '<input type="hidden" value="' . $field['value'] . '" name="' . $field['name'] . '" class="input-alt" />';
+		echo '<div class="acf-date_picker" data-save_format="' . esc_attr($field['date_format']) . '" data-display_format="' . esc_attr( $field['display_format'] ) . '" data-first_day="' . esc_attr($field['first_day']) . '">';
+			echo '<input type="hidden" value="' . esc_attr( $field['value'] ) . '" name="' . esc_attr( $field['name'] ) . '" class="input-alt" />';
 			echo '<input type="text" value="" class="input"  />';
 		echo '</div>';
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -110,74 +110,74 @@ class acf_field_date_picker extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// global
 		global $wp_locale;
-		
-		
+
+
 		// vars
 		$key = $field['name'];
-	    
+
 	    ?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Save format",'acf'); ?></label>
-		<p class="description"><?php _e("This format will determine the value saved to the database and returned via the API",'acf'); ?></p>
-		<p><?php _e("\"yymmdd\" is the most versatile save format. Read more about",'acf'); ?> <a href="http://docs.jquery.com/UI/Datepicker/formatDate"><?php _e("jQuery date formats",'acf'); ?></a></p>
+		<label><?php esc_html_e("Save format",'acf'); ?></label>
+		<p class="description"><?php esc_html_e("This format will determine the value saved to the database and returned via the API",'acf'); ?></p>
+		<p><?php esc_html_e("\"yymmdd\" is the most versatile save format. Read more about",'acf'); ?> <a href="http://docs.jquery.com/UI/Datepicker/formatDate"><?php esc_html_e("jQuery date formats",'acf'); ?></a></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][date_format]',
+			'name'	=>	'fields[' . esc_attr($key) .'][date_format]',
 			'value'	=>	$field['date_format'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Display format",'acf'); ?></label>
-		<p class="description"><?php _e("This format will be seen by the user when entering a value",'acf'); ?></p>
-		<p><?php _e("\"dd/mm/yy\" or \"mm/dd/yy\" are the most used display formats. Read more about",'acf'); ?> <a href="http://docs.jquery.com/UI/Datepicker/formatDate" target="_blank"><?php _e("jQuery date formats",'acf'); ?></a></p>
+		<label><?php esc_html_e("Display format",'acf'); ?></label>
+		<p class="description"><?php esc_html_e("This format will be seen by the user when entering a value", 'acf'); ?></p>
+		<p><?php esc_html_e("\"dd/mm/yy\" or \"mm/dd/yy\" are the most used display formats. Read more about", 'acf'); ?> <a href="http://docs.jquery.com/UI/Datepicker/formatDate" target="_blank"><?php esc_html_e("jQuery date formats",'acf'); ?></a></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][display_format]',
+			'name'	=>	'fields[' . esc_attr($key) .'][display_format]',
 			'value'	=>	$field['display_format'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name) ?>">
 	<td class="label">
-		<label for=""><?php _e("Week Starts On",'acf'); ?></label>
+		<label for=""><?php esc_html_e("Week Starts On",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
-		
+		<?php
+
 		$choices = array_values( $wp_locale->weekday );
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
-			'name'	=>	'fields['.$key.'][first_day]',
+			'name'	=>	'fields['. esc_attr($key) .'][first_day]',
 			'value'	=>	$field['first_day'],
 			'choices'	=>	$choices,
 		));
-		
+
 		?>
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
+
 }
 
 new acf_field_date_picker();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/email.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/email.php
index 959ea32..9be4276 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/email.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/email.php
@@ -2,7 +2,7 @@
 
 class acf_field_email extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_email extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -23,13 +23,13 @@ class acf_field_email extends acf_field
 			'prepend'		=>	'',
 			'append'		=>	''
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
 	}
-		
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -41,47 +41,47 @@ class acf_field_email extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// vars
 		$o = array( 'id', 'class', 'name', 'value', 'placeholder' );
 		$e = '';
-		
-		
+
+
 		// prepend
 		if( $field['prepend'] !== "" )
 		{
 			$field['class'] .= ' acf-is-prepended';
-			$e .= '<div class="acf-input-prepend">' . $field['prepend'] . '</div>';
+			$e .= '<div class="acf-input-prepend">' . esc_html($field['prepend']) . '</div>';
 		}
-		
-		
+
+
 		// append
 		if( $field['append'] !== "" )
 		{
 			$field['class'] .= ' acf-is-appended';
-			$e .= '<div class="acf-input-append">' . $field['append'] . '</div>';
+			$e .= '<div class="acf-input-append">' . esc_html($field['append']) . '</div>';
 		}
-		
-		
+
+
 		$e .= '<div class="acf-input-wrap">';
 		$e .= '<input type="email"';
-		
+
 		foreach( $o as $k )
 		{
-			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';	
+			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';
 		}
-		
+
 		$e .= ' />';
 		$e .= '</div>';
-		
-		
+
+
 		// return
 		echo $e;
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -94,80 +94,80 @@ class acf_field_email extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Default Value",'acf'); ?></label>
-		<p><?php _e("Appears when creating a new post",'acf') ?></p>
+		<label><?php esc_html_e("Default Value",'acf'); ?></label>
+		<p><?php esc_html_e("Appears when creating a new post",'acf') ?></p>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields['.$key.'][default_value]',
+			'name'	=>	'fields['. esc_attr($key) .'][default_value]',
 			'value'	=>	$field['default_value'],
 		));
 
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Placeholder Text",'acf'); ?></label>
-		<p><?php _e("Appears within the input",'acf') ?></p>
+		<label><?php esc_html_e("Placeholder Text",'acf'); ?></label>
+		<p><?php esc_html_e("Appears within the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][placeholder]',
+			'name'	=>	'fields[' . esc_attr($key) .'][placeholder]',
 			'value'	=>	$field['placeholder'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Prepend",'acf'); ?></label>
-		<p><?php _e("Appears before the input",'acf') ?></p>
+		<label><?php esc_html_e("Prepend",'acf'); ?></label>
+		<p><?php esc_html_e("Appears before the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][prepend]',
+			'name'	=>	'fields[' . esc_attr($key) .'][prepend]',
 			'value'	=>	$field['prepend'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Append",'acf'); ?></label>
-		<p><?php _e("Appears after the input",'acf') ?></p>
+		<label><?php esc_html_e("Append",'acf'); ?></label>
+		<p><?php esc_html_e("Appears after the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][append]',
+			'name'	=>	'fields[' . esc_attr($key) .'][append]',
 			'value'	=>	$field['append'],
 		));
 		?>
 	</td>
 </tr>
 		<?php
-	}	
-	
+	}
+
 }
 
 new acf_field_email();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/file.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/file.php
index b5683eb..3d14219 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/file.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/file.php
@@ -2,7 +2,7 @@
 
 class acf_field_file extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_file extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -28,23 +28,23 @@ class acf_field_file extends acf_field
 			'update'		=>	__("Update File",'acf'),
 			'uploadedTo'	=>	__("Uploaded to this post",'acf'),
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
-    	
-    	
+
+
     	// filters
 		add_filter('get_media_item_args', array($this, 'get_media_item_args'));
 		add_filter('wp_prepare_attachment_for_js', array($this, 'wp_prepare_attachment_for_js'), 10, 3);
-		
-		
+
+
 		// JSON
 		add_action('wp_ajax_acf/fields/file/get_files', array($this, 'ajax_get_files'));
 		add_action('wp_ajax_nopriv_acf/fields/file/get_files', array($this, 'ajax_get_files'), 10, 1);
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -56,7 +56,7 @@ class acf_field_file extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// vars
@@ -68,11 +68,11 @@ class acf_field_file extends acf_field
 			'url'		=>	'',
 			'name'		=>	'',
 		);
-		
+
 		if( $field['value'] && is_numeric($field['value']) )
 		{
 			$file = get_post( $field['value'] );
-			
+
 			if( $file )
 			{
 				$o['class'] = 'active';
@@ -80,20 +80,20 @@ class acf_field_file extends acf_field
 				$o['title']	= $file->post_title;
 				$o['size'] = size_format(filesize( get_attached_file( $file->ID ) ));
 				$o['url'] = wp_get_attachment_url( $file->ID );
-				
+
 				$explode = explode('/', $o['url']);
-				$o['name'] = end( $explode );				
+				$o['name'] = end( $explode );
 			}
 		}
-		
-		
+
+
 		?>
-<div class="acf-file-uploader clearfix <?php echo $o['class']; ?>" data-library="<?php echo $field['library']; ?>">
-	<input class="acf-file-value" type="hidden" name="<?php echo $field['name']; ?>" value="<?php echo $field['value']; ?>" />
+<div class="acf-file-uploader clearfix <?php echo esc_attr($o['class']); ?>" data-library="<?php echo esc_attr($field['library']); ?>">
+	<input class="acf-file-value" type="hidden" name="<?php echo esc_attr($field['name']); ?>" value="<?php echo esc_attr($field['value']); ?>" />
 	<div class="has-file">
 		<ul class="hl clearfix">
 			<li>
-				<img class="acf-file-icon" src="<?php echo $o['icon']; ?>" alt=""/>
+				<img class="acf-file-icon" src="<?php echo esc_url($o['icon']); ?>" alt=""/>
 				<div class="hover">
 					<ul class="bl">
 						<li><a href="#" class="acf-button-delete ir">Remove</a></li>
@@ -103,32 +103,32 @@ class acf_field_file extends acf_field
 			</li>
 			<li>
 				<p>
-					<strong class="acf-file-title"><?php echo $o['title']; ?></strong>
+					<strong class="acf-file-title"><?php echo esc_html($o['title']); ?></strong>
 				</p>
 				<p>
-					<strong><?php _e('Name', 'acf'); ?>:</strong>
-					<a class="acf-file-name" href="<?php echo $o['url']; ?>" target="_blank"><?php echo $o['name']; ?></a>
+					<strong><?php esc_html_e('Name', 'acf'); ?>:</strong>
+					<a class="acf-file-name" href="<?php echo esc_url($o['url']); ?>" target="_blank"><?php echo esc_html($o['name']); ?></a>
 				</p>
 				<p>
-					<strong><?php _e('Size', 'acf'); ?>:</strong>
-					<span class="acf-file-size"><?php echo $o['size']; ?></span>
+					<strong><?php esc_html_e('Size', 'acf'); ?>:</strong>
+					<span class="acf-file-size"><?php echo esc_html($o['size']); ?></span>
 				</p>
-				
+
 			</li>
 		</ul>
 	</div>
 	<div class="no-file">
 		<ul class="hl clearfix">
 			<li>
-				<span><?php _e('No File Selected','acf'); ?></span>. <a href="#" class="button add-file"><?php _e('Add File','acf'); ?></a>
+				<span><?php esc_html_e('No File Selected','acf'); ?></span>. <a href="#" class="button add-file"><?php esc_html_e('Add File','acf'); ?></a>
 			</li>
 		</ul>
 	</div>
 </div>
 		<?php
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -141,23 +141,23 @@ class acf_field_file extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
 		<label><?php _e("Return Value",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'		=>	'radio',
-			'name'		=>	'fields['.$key.'][save_format]',
+			'name'		=>	'fields['. esc_attr($key) .'][save_format]',
 			'value'		=>	$field['save_format'],
 			'layout'	=>	'horizontal',
 			'choices' 	=>	array(
@@ -166,20 +166,20 @@ class acf_field_file extends acf_field
 				'id'		=>	__("File ID",'acf')
 			)
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Library",'acf'); ?></label>
+		<label><?php esc_html_e("Library",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'		=>	'radio',
-			'name'		=>	'fields['.$key.'][library]',
+			'name'		=>	'fields['. esc_attr($key) .'][library]',
 			'value'		=>	$field['library'],
 			'layout'	=>	'horizontal',
 			'choices' 	=>	array(
@@ -192,10 +192,10 @@ class acf_field_file extends acf_field
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  format_value_for_api()
 	*
@@ -211,7 +211,7 @@ class acf_field_file extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field )
 	{
 
@@ -220,8 +220,8 @@ class acf_field_file extends acf_field
 		{
 			return false;
 		}
-		
-		
+
+
 		// format
 		if( $field['save_format'] == 'url' )
 		{
@@ -230,15 +230,15 @@ class acf_field_file extends acf_field
 		elseif( $field['save_format'] == 'object' )
 		{
 			$attachment = get_post( $value );
-			
-			
+
+
 			// validate
 			if( !$attachment )
 			{
-				return false;	
+				return false;
 			}
-			
-			
+
+
 			// create array to hold value data
 			$value = array(
 				'id' => $attachment->ID,
@@ -250,34 +250,34 @@ class acf_field_file extends acf_field
 				'url' => wp_get_attachment_url( $attachment->ID ),
 			);
 		}
-		
+
 		return $value;
 	}
-	
-	
+
+
 	/*
 	*  get_media_item_args
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.6
 	*  @created: 27/01/13
 	*/
-	
+
 	function get_media_item_args( $vars )
 	{
 	    $vars['send'] = true;
 	    return($vars);
 	}
-		
-	
+
+
 	/*
    	*  ajax_get_files
    	*
-   	*  @description: 
+   	*  @description:
    	*  @since: 3.5.7
    	*  @created: 13/01/13
    	*/
-	
+
    	function ajax_get_files()
    	{
    		// vars
@@ -286,45 +286,45 @@ class acf_field_file extends acf_field
 			'files' => array()
 		);
 		$return = array();
-		
-		
+
+
 		// load post options
 		$options = array_merge($options, $_POST);
-		
-		
+
+
 		// verify nonce
 		if( ! wp_verify_nonce($options['nonce'], 'acf_nonce') )
 		{
 			die(0);
 		}
-		
-		
+
+
 		if( $options['files'] )
 		{
 			foreach( $options['files'] as $id )
 			{
 				$o = array();
 				$file = get_post( $id );
-					
+
 				$o['id'] = $file->ID;
 				$o['icon'] = wp_mime_type_icon( $file->ID );
 				$o['title']	= $file->post_title;
 				$o['size'] = size_format(filesize( get_attached_file( $file->ID ) ));
 				$o['url'] = wp_get_attachment_url( $file->ID );
-				$o['name'] = end(explode('/', $o['url']));				
-				
+				$o['name'] = end(explode('/', $o['url']));
+
 				$return[] = $o;
 			}
 		}
-		
-		
+
+
 		// return json
 		echo json_encode( $return );
 		die;
-		
+
    	}
-   	
-	
+
+
 	/*
 	*  update_value()
 	*
@@ -340,25 +340,25 @@ class acf_field_file extends acf_field
 	*
 	*  @return	$value - the modified value
 	*/
-	
+
 	function update_value( $value, $post_id, $field )
 	{
 		// array?
 		if( is_array($value) && isset($value['id']) )
 		{
-			$value = $value['id'];	
+			$value = $value['id'];
 		}
-		
+
 		// object?
 		if( is_object($value) && isset($value->ID) )
 		{
 			$value = $value->ID;
 		}
-		
+
 		return $value;
 	}
-	
-	
+
+
 	/*
 	*  wp_prepare_attachment_for_js
 	*
@@ -370,30 +370,30 @@ class acf_field_file extends acf_field
 	*  @param	{int}	$post_id
 	*  @return	{int}	$post_id
 	*/
-	
+
 	function wp_prepare_attachment_for_js( $response, $attachment, $meta )
 	{
 		// default
 		$fs = '0 kb';
-		
-		
+
+
 		// supress PHP warnings caused by corrupt images
 		if( $i = @filesize( get_attached_file( $attachment->ID ) ) )
 		{
 			$fs = size_format( $i );
 		}
-		
-		
+
+
 		// update JSON
 		$response['filesize'] = $fs;
-		
-		
+
+
 		// return
 		return $response;
 	}
-	
+
 }
 
 new acf_field_file();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/google-map.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/google-map.php
index 962651d..4cca3a2 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/google-map.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/google-map.php
@@ -10,7 +10,7 @@ class acf_field_google_map extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -33,13 +33,13 @@ class acf_field_google_map extends acf_field
 			'locating'			=>	__("Locating",'acf'),
 			'browser_support'	=>	__("Sorry, this browser does not support geolocation",'acf'),
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -51,93 +51,93 @@ class acf_field_google_map extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// require the googlemaps JS ( this script is now lazy loaded via JS )
 		//wp_enqueue_script('acf-googlemaps');
-		
-		
+
+
 		// default value
 		if( !is_array($field['value']) )
 		{
 			$field['value'] = array();
 		}
-		
+
 		$field['value'] = wp_parse_args($field['value'], array(
 			'address'	=> '',
 			'lat'		=> '',
 			'lng'		=> ''
 		));
-		
-		
+
+
 		// default options
 		foreach( $this->default_values as $k => $v )
 		{
 			if( ! $field[ $k ] )
 			{
 				$field[ $k ] = $v;
-			}	
+			}
 		}
-		
-		
+
+
 		// vars
 		$o = array(
 			'class'		=>	'',
 		);
-		
+
 		if( $field['value']['address'] )
 		{
 			$o['class'] = 'active';
 		}
-		
-		
+
+
 		$atts = '';
-		$keys = array( 
-			'data-id'	=> 'id', 
+		$keys = array(
+			'data-id'	=> 'id',
 			'data-lat'	=> 'center_lat',
 			'data-lng'	=> 'center_lng',
 			'data-zoom'	=> 'zoom'
 		);
-		
+
 		foreach( $keys as $k => $v )
 		{
-			$atts .= ' ' . $k . '="' . esc_attr( $field[ $v ] ) . '"';	
+			$atts .= ' ' . $k . '="' . esc_attr( $field[ $v ] ) . '"';
 		}
-		
+
 		?>
-		<div class="acf-google-map <?php echo $o['class']; ?>" <?php echo $atts; ?>>
-			
+		<div class="acf-google-map <?php echo esc_attr($o['class']); ?>" <?php echo $atts; ?>>
+
 			<div style="display:none;">
 				<?php foreach( $field['value'] as $k => $v ): ?>
 					<input type="hidden" class="input-<?php echo $k; ?>" name="<?php echo esc_attr($field['name']); ?>[<?php echo $k; ?>]" value="<?php echo esc_attr( $v ); ?>" />
 				<?php endforeach; ?>
 			</div>
-			
+
 			<div class="title">
-				
+
 				<div class="has-value">
-					<a href="#" class="acf-sprite-remove ir" title="<?php _e("Clear location",'acf'); ?>">Remove</a>
-					<h4><?php echo $field['value']['address']; ?></h4>
+					<a href="#" class="acf-sprite-remove ir" title="<?php esc_attr_e("Clear location",'acf'); ?>">Remove</a>
+					<h4><?php echo esc_html($field['value']['address']); ?></h4>
 				</div>
-				
+
 				<div class="no-value">
-					<a href="#" class="acf-sprite-locate ir" title="<?php _e("Find current location",'acf'); ?>">Locate</a>
-					<input type="text" placeholder="<?php _e("Search for address...",'acf'); ?>" class="search" />
+					<a href="#" class="acf-sprite-locate ir" title="<?php esc_html_e("Find current location",'acf'); ?>">Locate</a>
+					<input type="text" placeholder="<?php esc_html_e("Search for address...",'acf'); ?>" class="search" />
 				</div>
-				
+
 			</div>
-			
-			<div class="canvas" style="height: <?php echo $field['height']; ?>px">
-				
+
+			<div class="canvas" style="height: <?php echo esc_attr($field['height']); ?>px">
+
 			</div>
-			
+
 		</div>
 		<?php
 	}
-	
-	
-	
+
+
+
 	/*
 	*  create_options()
 	*
@@ -150,92 +150,92 @@ class acf_field_google_map extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Center",'acf'); ?></label>
-		<p class="description"><?php _e('Center the initial map','acf'); ?></p>
+		<label><?php esc_html_e("Center",'acf'); ?></label>
+		<p class="description"><?php esc_html_e('Center the initial map','acf'); ?></p>
 	</td>
 	<td>
 		<ul class="hl clearfix">
 			<li style="width:48%;">
-				<?php 
-			
+				<?php
+
 				do_action('acf/create_field', array(
 					'type'			=> 'text',
-					'name'			=> 'fields['.$key.'][center_lat]',
+					'name'			=> 'fields['. esc_attr($key) .'][center_lat]',
 					'value'			=> $field['center_lat'],
 					'prepend'		=> 'lat',
 					'placeholder'	=> $this->default_values['center_lat']
 				));
-				
+
 				?>
 			</li>
 			<li style="width:48%; margin-left:4%;">
-				<?php 
-			
+				<?php
+
 				do_action('acf/create_field', array(
 					'type'			=> 'text',
-					'name'			=> 'fields['.$key.'][center_lng]',
+					'name'			=> 'fields['. esc_attr($key) .'][center_lng]',
 					'value'			=> $field['center_lng'],
 					'prepend'		=> 'lng',
 					'placeholder'	=> $this->default_values['center_lng']
 				));
-				
+
 				?>
 			</li>
 		</ul>
-		
+
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Zoom",'acf'); ?></label>
-		<p class="description"><?php _e('Set the initial zoom level','acf'); ?></p>
+		<label><?php esc_html_e("Zoom",'acf'); ?></label>
+		<p class="description"><?php esc_html_e('Set the initial zoom level','acf'); ?></p>
 	</td>
 	<td>
-		<?php 
-		
+		<?php
+
 		do_action('acf/create_field', array(
 			'type'			=> 'number',
-			'name'			=> 'fields['.$key.'][zoom]',
+			'name'			=> 'fields['. esc_attr($key) .'][zoom]',
 			'value'			=> $field['zoom'],
 			'placeholder'	=> $this->default_values['zoom']
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name) ?>">
 	<td class="label">
-		<label><?php _e("Height",'acf'); ?></label>
-		<p class="description"><?php _e('Customise the map height','acf'); ?></p>
+		<label><?php esc_html_e("Height",'acf'); ?></label>
+		<p class="description"><?php esc_html_e('Customise the map height','acf'); ?></p>
 	</td>
 	<td>
-		<?php 
-		
+		<?php
+
 		do_action('acf/create_field', array(
 			'type'			=> 'number',
-			'name'			=> 'fields['.$key.'][height]',
+			'name'			=> 'fields['. esc_attr($key) .'][height]',
 			'value'			=> $field['height'],
 			'append'		=> 'px',
 			'placeholder'	=> $this->default_values['height']
 		));
-		
+
 		?>
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  update_value()
 	*
@@ -251,21 +251,21 @@ class acf_field_google_map extends acf_field
 	*
 	*  @return	$value - the modified value
 	*/
-	
+
 	function update_value( $value, $post_id, $field ) {
-	
+
 		if( empty($value) || empty($value['lat']) || empty($value['lng']) ) {
-			
+
 			return false;
-			
+
 		}
-		
-		
+
+
 		// return
 		return $value;
 	}
-	
-	
+
+
 	/*
    	*  input_admin_footer
    	*
@@ -278,42 +278,42 @@ class acf_field_google_map extends acf_field
    	*  @param	$post_id (int)
    	*  @return	$post_id (int)
    	*/
-   	
+
    	function input_admin_head() {
-	   	
+
 	   	$action = is_admin() ? 'admin_footer' : 'wp_footer';
    		add_action( $action, array( $this, 'input_admin_footer') );
-   		
+
    	}
-   	
+
    	function input_admin_footer() {
-	   	
+
 	   	// vars
 	   	$api = array(
 			'libraries'		=> 'places',
 			'key'			=> '',
 			'client'		=> ''
 	   	);
-	   	
-	   	
+
+
 	   	// filter
 	   	$api = apply_filters('acf/fields/google_map/api', $api);
-	   	
-	   	
+
+
 	   	// remove empty
 	   	if( empty($api['key']) ) unset($api['key']);
 	   	if( empty($api['client']) ) unset($api['client']);
-	   	
-	   	
+
+
 ?>
 <script type="text/javascript">
 acf.fields.google_map.api = <?php echo json_encode($api); ?>;
 </script>
 <?php
-	
+
    	}
 }
 
 new acf_field_google_map();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/image.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/image.php
index a7f1b74..c8d5840 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/image.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/image.php
@@ -2,7 +2,7 @@
 
 class acf_field_image extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_image extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -29,23 +29,23 @@ class acf_field_image extends acf_field
 			'update'		=>	__("Update Image",'acf'),
 			'uploadedTo'	=>	__("Uploaded to this post",'acf'),
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
-    	
-    	
+
+
 		// filters
 		add_filter('get_media_item_args', array($this, 'get_media_item_args'));
 		add_filter('wp_prepare_attachment_for_js', array($this, 'wp_prepare_attachment_for_js'), 10, 3);
-		
-		
+
+
 		// JSON
 		add_action('wp_ajax_acf/fields/image/get_images', array($this, 'ajax_get_images'), 10, 1);
 		add_action('wp_ajax_nopriv_acf/fields/image/get_images', array($this, 'ajax_get_images'), 10, 1);
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -57,7 +57,7 @@ class acf_field_image extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// vars
@@ -65,42 +65,42 @@ class acf_field_image extends acf_field
 			'class'		=>	'',
 			'url'		=>	'',
 		);
-		
-		
+
+
 		// has value?
 		if( $field['value'] && is_numeric($field['value']) ) {
-			
+
 			$url = wp_get_attachment_image_src($field['value'], $field['preview_size']);
-			
+
 			if( $url ) {
-				
+
 				$o['url'] = $url[0];
 				$o['class'] = 'active';
-			
+
 			}
-						
+
 		}
-		
+
 		?>
-<div class="acf-image-uploader clearfix <?php echo $o['class']; ?>" data-preview_size="<?php echo $field['preview_size']; ?>" data-library="<?php echo $field['library']; ?>" >
-	<input class="acf-image-value" type="hidden" name="<?php echo $field['name']; ?>" value="<?php echo $field['value']; ?>" />
+<div class="acf-image-uploader clearfix <?php echo esc_attr($o['class']); ?>" data-preview_size="<?php echo esc_attr($field['preview_size']); ?>" data-library="<?php echo esc_attr($field['library']); ?>" >
+	<input class="acf-image-value" type="hidden" name="<?php echo esc_attr($field['name']); ?>" value="<?php echo esc_attr($field['value']); ?>" />
 	<div class="has-image">
 		<div class="hover">
 			<ul class="bl">
-				<li><a class="acf-button-delete ir" href="#"><?php _e("Remove",'acf'); ?></a></li>
-				<li><a class="acf-button-edit ir" href="#"><?php _e("Edit",'acf'); ?></a></li>
+				<li><a class="acf-button-delete ir" href="#"><?php esc_html_e("Remove",'acf'); ?></a></li>
+				<li><a class="acf-button-edit ir" href="#"><?php esc_html_e("Edit",'acf'); ?></a></li>
 			</ul>
 		</div>
 		<img class="acf-image-image" src="<?php echo $o['url']; ?>" alt=""/>
 	</div>
 	<div class="no-image">
-		<p><?php _e('No image selected','acf'); ?> <input type="button" class="button add-image" value="<?php _e('Add Image','acf'); ?>" />
+		<p><?php esc_html_e('No image selected','acf'); ?> <input type="button" class="button add-image" value="<?php esc_html_e('Add Image','acf'); ?>" />
 	</div>
 </div>
 		<?php
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -113,23 +113,23 @@ class acf_field_image extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Return Value",'acf'); ?></label>
-		<p><?php _e("Specify the returned value on front end",'acf') ?></p>
+		<label><?php esc_html_e("Return Value",'acf'); ?></label>
+		<p><?php esc_html_e("Specify the returned value on front end",'acf') ?></p>
 	</td>
 	<td>
 		<?php
 		do_action('acf/create_field', array(
 			'type'		=>	'radio',
-			'name'		=>	'fields['.$key.'][save_format]',
+			'name'		=>	'fields['. esc_attr($key) .'][save_format]',
 			'value'		=>	$field['save_format'],
 			'layout'	=>	'horizontal',
 			'choices'	=> array(
@@ -141,17 +141,17 @@ class acf_field_image extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Preview Size",'acf'); ?></label>
-		<p><?php _e("Shown when entering data",'acf') ?></p>
+		<label><?php esc_html_e("Preview Size",'acf'); ?></label>
+		<p><?php esc_html_e("Shown when entering data",'acf') ?></p>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'		=>	'radio',
-			'name'		=>	'fields['.$key.'][preview_size]',
+			'name'		=>	'fields['. esc_attr($key) .'][preview_size]',
 			'value'		=>	$field['preview_size'],
 			'layout'	=>	'horizontal',
 			'choices' 	=>	apply_filters('acf/get_image_sizes', array())
@@ -160,17 +160,17 @@ class acf_field_image extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Library",'acf'); ?></label>
-		<p><?php _e("Limit the media library choice",'acf') ?></p>
+		<label><?php esc_html_e("Library",'acf'); ?></label>
+		<p><?php esc_html_e("Limit the media library choice",'acf') ?></p>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'		=>	'radio',
-			'name'		=>	'fields['.$key.'][library]',
+			'name'		=>	'fields['. esc_attr($key) .'][library]',
 			'value'		=>	$field['library'],
 			'layout'	=>	'horizontal',
 			'choices' 	=>	array(
@@ -183,10 +183,10 @@ class acf_field_image extends acf_field
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  format_value_for_api()
 	*
@@ -202,17 +202,17 @@ class acf_field_image extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field )
 	{
-		
+
 		// validate
 		if( !$value )
 		{
 			return false;
 		}
-		
-		
+
+
 		// format
 		if( $field['save_format'] == 'url' )
 		{
@@ -221,18 +221,18 @@ class acf_field_image extends acf_field
 		elseif( $field['save_format'] == 'object' )
 		{
 			$attachment = get_post( $value );
-			
-			
+
+
 			// validate
 			if( !$attachment )
 			{
-				return false;	
+				return false;
 			}
-			
-			
+
+
 			// create array to hold value data
 			$src = wp_get_attachment_image_src( $attachment->ID, 'full' );
-			
+
 			$value = array(
 				'id' => $attachment->ID,
 				'alt' => get_post_meta($attachment->ID, '_wp_attachment_image_alt', true),
@@ -245,18 +245,18 @@ class acf_field_image extends acf_field
 				'height' => $src[2],
 				'sizes' => array(),
 			);
-			
-			
+
+
 			// find all image sizes
 			$image_sizes = get_intermediate_image_sizes();
-			
+
 			if( $image_sizes )
 			{
 				foreach( $image_sizes as $image_size )
 				{
 					// find src
 					$src = wp_get_attachment_image_src( $attachment->ID, $image_size );
-					
+
 					// add src
 					$value[ 'sizes' ][ $image_size ] = $src[0];
 					$value[ 'sizes' ][ $image_size . '-width' ] = $src[1];
@@ -265,37 +265,37 @@ class acf_field_image extends acf_field
 				// foreach( $image_sizes as $image_size )
 			}
 			// if( $image_sizes )
-			
+
 		}
-		
+
 		return $value;
-		
+
 	}
-	
-	
+
+
 	/*
 	*  get_media_item_args
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.6
 	*  @created: 27/01/13
 	*/
-	
+
 	function get_media_item_args( $vars )
 	{
 	    $vars['send'] = true;
 	    return($vars);
 	}
-	
-	
+
+
 	/*
    	*  ajax_get_images
    	*
-   	*  @description: 
+   	*  @description:
    	*  @since: 3.5.7
    	*  @created: 13/01/13
    	*/
-	
+
    	function ajax_get_images()
    	{
    		// vars
@@ -305,53 +305,53 @@ class acf_field_image extends acf_field
 			'preview_size' => 'thumbnail'
 		);
 		$return = array();
-		
-		
+
+
 		// load post options
 		$options = array_merge($options, $_POST);
-		
-		
+
+
 		// verify nonce
 		if( ! wp_verify_nonce($options['nonce'], 'acf_nonce') )
 		{
 			die(0);
 		}
-		
-		
+
+
 		if( $options['images'] )
 		{
 			foreach( $options['images'] as $id )
 			{
 				$url = wp_get_attachment_image_src( $id, $options['preview_size'] );
-				
-				
+
+
 				$return[] = array(
 					'id' => $id,
 					'url' => $url[0],
 				);
 			}
 		}
-		
-		
+
+
 		// return json
 		echo json_encode( $return );
 		die;
-		
+
    	}
-   		
-	
+
+
 	/*
 	*  image_size_names_choose
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.5.7
 	*  @created: 13/01/13
 	*/
-	
+
 	function image_size_names_choose( $sizes )
 	{
 		global $_wp_additional_image_sizes;
-			
+
 		if( $_wp_additional_image_sizes )
 		{
 			foreach( $_wp_additional_image_sizes as $k => $v )
@@ -360,16 +360,16 @@ class acf_field_image extends acf_field
 				$title = str_replace('-', ' ', $title);
 				$title = str_replace('_', ' ', $title);
 				$title = ucwords( $title );
-				
+
 				$sizes[ $k ] = $title;
 			}
 			// foreach( $image_sizes as $image_size )
 		}
-		
+
         return $sizes;
 	}
-	
-	
+
+
 	/*
 	*  wp_prepare_attachment_for_js
 	*
@@ -377,7 +377,7 @@ class acf_field_image extends acf_field
 	*  @since: 3.5.7
 	*  @created: 13/01/13
 	*/
-	
+
 	function wp_prepare_attachment_for_js( $response, $attachment, $meta )
 	{
 		// only for image
@@ -385,18 +385,18 @@ class acf_field_image extends acf_field
 		{
 			return $response;
 		}
-		
-		
+
+
 		// make sure sizes exist. Perhaps they dont?
 		if( !isset($meta['sizes']) )
 		{
 			return $response;
 		}
-		
-		
+
+
 		$attachment_url = $response['url'];
 		$base_url = str_replace( wp_basename( $attachment_url ), '', $attachment_url );
-		
+
 		if( isset($meta['sizes']) && is_array($meta['sizes']) )
 		{
 			foreach( $meta['sizes'] as $k => $v )
@@ -415,8 +415,8 @@ class acf_field_image extends acf_field
 
 		return $response;
 	}
-	
-	
+
+
 	/*
 	*  update_value()
 	*
@@ -432,27 +432,27 @@ class acf_field_image extends acf_field
 	*
 	*  @return	$value - the modified value
 	*/
-	
+
 	function update_value( $value, $post_id, $field )
 	{
 		// array?
 		if( is_array($value) && isset($value['id']) )
 		{
-			$value = $value['id'];	
+			$value = $value['id'];
 		}
-		
+
 		// object?
 		if( is_object($value) && isset($value->ID) )
 		{
 			$value = $value->ID;
 		}
-		
+
 		return $value;
 	}
-	
-	
+
+
 }
 
 new acf_field_image();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/message.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/message.php
index 0b53a29..b23ebf5 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/message.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/message.php
@@ -2,7 +2,7 @@
 
 class acf_field_message extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_message extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -21,13 +21,13 @@ class acf_field_message extends acf_field
 		$this->defaults = array(
 			'message'	=>	'',
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -39,13 +39,13 @@ class acf_field_message extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		echo wpautop( $field['message'] );
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -58,36 +58,36 @@ class acf_field_message extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label for=""><?php _e("Message",'acf'); ?></label>
-		<p class="description"><?php _e("Text &amp; HTML entered here will appear inline with the fields",'acf'); ?><br /><br />
-		<?php _e("Please note that all text will first be passed through the wp function ",'acf'); ?><a href="http://codex.wordpress.org/Function_Reference/wpautop" target="_blank">wpautop</a></p>
+		<label for=""><?php esc_html_e("Message",'acf'); ?></label>
+		<p class="description"><?php esc_html_e("Text &amp; HTML entered here will appear inline with the fields",'acf'); ?><br /><br />
+		<?php esc_html_e("Please note that all text will first be passed through the wp function ",'acf'); ?><a href="http://codex.wordpress.org/Function_Reference/wpautop" target="_blank">wpautop</a></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'textarea',
 			'class' => 	'textarea',
-			'name'	=>	'fields['.$key.'][message]',
+			'name'	=>	'fields['. esc_attr($key) .'][message]',
 			'value'	=>	$field['message'],
 		));
 		?>
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
+
 }
 
 new acf_field_message();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/number.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/number.php
index 3d16bf1..ef6d5db 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/number.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/number.php
@@ -2,7 +2,7 @@
 
 class acf_field_number extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_number extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -26,13 +26,13 @@ class acf_field_number extends acf_field
 			'prepend'		=>	'',
 			'append'		=>	''
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
 	}
-		
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -44,54 +44,54 @@ class acf_field_number extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// vars
 		$o = array( 'id', 'class', 'min', 'max', 'step', 'name', 'value', 'placeholder' );
 		$e = '';
-		
-		
+
+
 		// step
 		if( !$field['step'] )
 		{
 			$field['step'] = 'any';
 		}
-		
+
 		// prepend
 		if( $field['prepend'] !== "" )
 		{
 			$field['class'] .= ' acf-is-prepended';
-			$e .= '<div class="acf-input-prepend">' . $field['prepend'] . '</div>';
+			$e .= '<div class="acf-input-prepend">' . esc_html($field['prepend']) . '</div>';
 		}
-		
-		
+
+
 		// append
 		if( $field['append'] !== "" )
 		{
 			$field['class'] .= ' acf-is-appended';
-			$e .= '<div class="acf-input-append">' . $field['append'] . '</div>';
+			$e .= '<div class="acf-input-append">' . esc_html($field['append']) . '</div>';
 		}
-		
-		
+
+
 		$e .= '<div class="acf-input-wrap">';
 		$e .= '<input type="number"';
-		
+
 		foreach( $o as $k )
 		{
-			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';	
+			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';
 		}
-		
+
 		$e .= ' />';
 		$e .= '</div>';
-		
-		
+
+
 		// return
 		echo $e;
-		
+
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -104,117 +104,117 @@ class acf_field_number extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Default Value",'acf'); ?></label>
-		<p><?php _e("Appears when creating a new post",'acf') ?></p>
+		<label><?php esc_html_e("Default Value",'acf'); ?></label>
+		<p><?php esc_html_e("Appears when creating a new post",'acf') ?></p>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'number',
-			'name'	=>	'fields['.$key.'][default_value]',
+			'name'	=>	'fields['. esc_attr($key) .'][default_value]',
 			'value'	=>	$field['default_value'],
 		));
 
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_html($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Placeholder Text",'acf'); ?></label>
-		<p><?php _e("Appears within the input",'acf') ?></p>
+		<label><?php esc_html_e("Placeholder Text",'acf'); ?></label>
+		<p><?php esc_html_e("Appears within the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][placeholder]',
+			'name'	=>	'fields[' . esc_attr($key) .'][placeholder]',
 			'value'	=>	$field['placeholder'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_html($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Prepend",'acf'); ?></label>
-		<p><?php _e("Appears before the input",'acf') ?></p>
+		<label><?php esc_html_e("Prepend",'acf'); ?></label>
+		<p><?php esc_html_e("Appears before the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][prepend]',
+			'name'	=>	'fields[' . esc_attr($key) .'][prepend]',
 			'value'	=>	$field['prepend'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_html($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Append",'acf'); ?></label>
-		<p><?php _e("Appears after the input",'acf') ?></p>
+		<label><?php esc_html_e("Append",'acf'); ?></label>
+		<p><?php esc_html_e("Appears after the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][append]',
+			'name'	=>	'fields[' . esc_attr($key) .'][append]',
 			'value'	=>	$field['append'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Minimum Value",'acf'); ?></label>
+		<label><?php esc_html_e("Minimum Value",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'number',
-			'name'	=>	'fields['.$key.'][min]',
+			'name'	=>	'fields['. esc_attr($key) .'][min]',
 			'value'	=>	$field['min'],
 		));
 
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Maximum Value",'acf'); ?></label>
+		<label><?php esc_html_e("Maximum Value",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'number',
-			'name'	=>	'fields['.$key.'][max]',
+			'name'	=>	'fields['. esc_attr($key) .'][max]',
 			'value'	=>	$field['max'],
 		));
 
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name) ?>">
 	<td class="label">
-		<label><?php _e("Step Size",'acf'); ?></label>
+		<label><?php esc_html_e("Step Size",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'number',
-			'name'	=>	'fields['.$key.'][step]',
+			'name'	=>	'fields['. esc_attr($key) . '][step]',
 			'value'	=>	$field['step'],
 		));
 
@@ -223,8 +223,8 @@ class acf_field_number extends acf_field
 </tr>
 		<?php
 	}
-	
-	
+
+
 	/*
 	*  update_value()
 	*
@@ -240,35 +240,35 @@ class acf_field_number extends acf_field
 	*
 	*  @return	$value - the modified value
 	*/
-	
+
 	function update_value( $value, $post_id, $field )
 	{
 		// no formatting needed for empty value
 		if( empty($value) ) {
-			
+
 			return $value;
-			
+
 		}
-		
-		
+
+
 		// remove ','
 		$value = str_replace(',', '', $value);
-		
-		
+
+
 		// convert to float. This removes any chars
 		$value = floatval( $value );
-		
-		
+
+
 		// convert back to string. This alows decimals to save
 		$value = (string) $value;
-		
-		
+
+
 		return $value;
 	}
-	
-	
+
+
 }
 
 new acf_field_number();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/page_link.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/page_link.php
index abd1c08..2d006ff 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/page_link.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/page_link.php
@@ -10,7 +10,7 @@ class acf_field_page_link extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -22,28 +22,28 @@ class acf_field_page_link extends acf_field
 			'multiple' => 0,
 			'allow_null' => 0,
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
-  
+
 	}
-	
-	
+
+
 	/*
 	*  load_field()
-	*  
+	*
 	*  This filter is appied to the $field after it is loaded from the database
-	*  
+	*
 	*  @type filter
 	*  @since 3.6
 	*  @date 23/01/13
-	*  
+	*
 	*  @param $field - the field array holding all the field options
-	*  
+	*
 	*  @return $field - the field array holding all the field options
 	*/
-	
+
 	function load_field( $field )
 	{
 
@@ -53,12 +53,12 @@ class acf_field_page_link extends acf_field
 			$field['post_type'] = array( 'all' );
 		}
 
-		
+
 		// return
 		return $field;
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -70,16 +70,16 @@ class acf_field_page_link extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// let post_object create the field
 		$field['type'] = 'post_object';
-		
+
 		do_action('acf/create_field', $field );
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -92,46 +92,46 @@ class acf_field_page_link extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label for=""><?php _e("Post Type",'acf'); ?></label>
+		<label for=""><?php esc_html_e("Post Type",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
-		
+		<?php
+
 		$choices = array(
 			'all'	=>	__("All",'acf')
 		);
 		$choices = apply_filters('acf/get_post_types', $choices);
-		
-		
+
+
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
-			'name'	=>	'fields['.$key.'][post_type]',
+			'name'	=>	'fields['. esc_attr($key) .'][post_type]',
 			'value'	=>	$field['post_type'],
 			'choices'	=>	$choices,
 			'multiple'	=>	1,
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Allow Null?",'acf'); ?></label>
+		<label><?php esc_html_e("Allow Null?",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'radio',
-			'name'	=>	'fields['.$key.'][allow_null]',
+			'name'	=>	'fields['. esc_attr($key) .'][allow_null]',
 			'value'	=>	$field['allow_null'],
 			'choices'	=>	array(
 				1	=>	__("Yes",'acf'),
@@ -139,20 +139,20 @@ class acf_field_page_link extends acf_field
 			),
 			'layout'	=>	'horizontal',
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Select multiple values?",'acf'); ?></label>
+		<label><?php esc_html_e("Select multiple values?",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'radio',
-			'name'	=>	'fields['.$key.'][multiple]',
+			'name'	=>	'fields['. esc_attr($key) .'][multiple]',
 			'value'	=>	$field['multiple'],
 			'choices'	=>	array(
 				1	=>	__("Yes",'acf'),
@@ -160,15 +160,15 @@ class acf_field_page_link extends acf_field
 			),
 			'layout'	=>	'horizontal',
 		));
-		
+
 		?>
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  format_value_for_api()
 	*
@@ -184,19 +184,19 @@ class acf_field_page_link extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field )
 	{
 		if( !$value )
 		{
 			return false;
 		}
-		
+
 		if( $value == 'null' )
 		{
 			return false;
 		}
-		
+
 		if( is_array($value) )
 		{
 			foreach( $value as $k => $v )
@@ -208,12 +208,12 @@ class acf_field_page_link extends acf_field
 		{
 			$value = get_permalink($value);
 		}
-		
+
 		return $value;
 	}
-	
+
 }
 
 new acf_field_page_link();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/password.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/password.php
index f71abe6..5e1f5db 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/password.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/password.php
@@ -2,7 +2,7 @@
 
 class acf_field_password extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_password extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -22,13 +22,13 @@ class acf_field_password extends acf_field
 			'prepend'		=>	'',
 			'append'		=>	''
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
 	}
-		
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -40,47 +40,47 @@ class acf_field_password extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// vars
 		$o = array( 'id', 'class', 'name', 'value', 'placeholder' );
 		$e = '';
-		
-		
+
+
 		// prepend
 		if( $field['prepend'] !== "" )
 		{
 			$field['class'] .= ' acf-is-prepended';
-			$e .= '<div class="acf-input-prepend">' . $field['prepend'] . '</div>';
+			$e .= '<div class="acf-input-prepend">' . esc_html($field['prepend']) . '</div>';
 		}
-		
-		
+
+
 		// append
 		if( $field['append'] !== "" )
 		{
 			$field['class'] .= ' acf-is-appended';
-			$e .= '<div class="acf-input-append">' . $field['append'] . '</div>';
+			$e .= '<div class="acf-input-append">' . esc_html($field['append']) . '</div>';
 		}
-		
-		
+
+
 		$e .= '<div class="acf-input-wrap">';
 		$e .= '<input type="password"';
-		
+
 		foreach( $o as $k )
 		{
-			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';	
+			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';
 		}
-		
+
 		$e .= ' />';
 		$e .= '</div>';
-		
-		
+
+
 		// return
 		echo $e;
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -93,53 +93,53 @@ class acf_field_password extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Placeholder Text",'acf'); ?></label>
-		<p><?php _e("Appears within the input",'acf') ?></p>
+		<label><?php esc_html_e("Placeholder Text",'acf'); ?></label>
+		<p><?php esc_html_e("Appears within the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][placeholder]',
+			'name'	=>	'fields[' . esc_attr($key) .'][placeholder]',
 			'value'	=>	$field['placeholder'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Prepend",'acf'); ?></label>
-		<p><?php _e("Appears before the input",'acf') ?></p>
+		<label><?php esc_html_e("Prepend",'acf'); ?></label>
+		<p><?php esc_html_e("Appears before the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][prepend]',
+			'name'	=>	'fields[' . esc_attr($key) .'][prepend]',
 			'value'	=>	$field['prepend'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Append",'acf'); ?></label>
-		<p><?php _e("Appears after the input",'acf') ?></p>
+		<label><?php esc_html_e("Append",'acf'); ?></label>
+		<p><?php esc_html_e("Appears after the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][append]',
+			'name'	=>	'fields[' . esc_attr($key) .'][append]',
 			'value'	=>	$field['append'],
 		));
 		?>
@@ -147,9 +147,9 @@ class acf_field_password extends acf_field
 </tr>
 		<?php
 	}
-	
+
 }
 
 new acf_field_password();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/post_object.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/post_object.php
index 7dc0304..d52ca08 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/post_object.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/post_object.php
@@ -10,7 +10,7 @@ class acf_field_post_object extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -23,28 +23,28 @@ class acf_field_post_object extends acf_field
 			'multiple' => 0,
 			'allow_null' => 0,
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
-  
+
 	}
-	
-	
+
+
 	/*
 	*  load_field()
-	*  
+	*
 	*  This filter is appied to the $field after it is loaded from the database
-	*  
+	*
 	*  @type filter
 	*  @since 3.6
 	*  @date 23/01/13
-	*  
+	*
 	*  @param $field - the field array holding all the field options
-	*  
+	*
 	*  @return $field - the field array holding all the field options
 	*/
-	
+
 	function load_field( $field )
 	{
 		// validate post_type
@@ -53,19 +53,19 @@ class acf_field_post_object extends acf_field
 			$field['post_type'] = array( 'all' );
 		}
 
-		
+
 		// validate taxonomy
 		if( !$field['taxonomy'] || !is_array($field['taxonomy']) || in_array('', $field['taxonomy']) )
 		{
 			$field['taxonomy'] = array( 'all' );
 		}
-		
-		
+
+
 		// return
 		return $field;
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -77,13 +77,13 @@ class acf_field_post_object extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// global
 		global $post;
-		
-		
+
+
 		// vars
 		$args = array(
 			'numberposts' => -1,
@@ -93,43 +93,43 @@ class acf_field_post_object extends acf_field
 			'post_status' => array('publish', 'private', 'draft', 'inherit', 'future'),
 			'suppress_filters' => false,
 		);
-		
-		
+
+
 		// load all post types by default
 		if( in_array('all', $field['post_type']) )
 		{
 			$field['post_type'] = apply_filters('acf/get_post_types', array());
 		}
-		
-		
+
+
 		// create tax queries
 		if( ! in_array('all', $field['taxonomy']) )
 		{
 			// vars
 			$taxonomies = array();
 			$args['tax_query'] = array();
-			
+
 			foreach( $field['taxonomy'] as $v )
 			{
-				
+
 				// find term (find taxonomy!)
 				// $term = array( 0 => $taxonomy, 1 => $term_id )
-				$term = explode(':', $v); 
-				
-				
+				$term = explode(':', $v);
+
+
 				// validate
 				if( !is_array($term) || !isset($term[1]) )
 				{
 					continue;
 				}
-				
-				
+
+
 				// add to tax array
 				$taxonomies[ $term[0] ][] = $term[1];
-				
+
 			}
-			
-			
+
+
 			// now create the tax queries
 			foreach( $taxonomies as $k => $v )
 			{
@@ -140,36 +140,36 @@ class acf_field_post_object extends acf_field
 				);
 			}
 		}
-		
-		
+
+
 		// Change Field into a select
 		$field['type'] = 'select';
 		$field['choices'] = array();
-		
-		
+
+
 		foreach( $field['post_type'] as $post_type )
 		{
 			// set post_type
 			$args['post_type'] = $post_type;
-			
-			
+
+
 			// set order
 			$get_pages = false;
 			if( is_post_type_hierarchical($post_type) && !isset($args['tax_query']) )
 			{
 				$args['sort_column'] = 'menu_order, post_title';
 				$args['sort_order'] = 'ASC';
-				
+
 				$get_pages = true;
 			}
-			
-			
+
+
 			// filters
 			$args = apply_filters('acf/fields/post_object/query', $args, $field, $post);
 			$args = apply_filters('acf/fields/post_object/query/name=' . $field['_name'], $args, $field, $post );
 			$args = apply_filters('acf/fields/post_object/query/key=' . $field['key'], $args, $field, $post );
-			
-			
+
+
 			if( $get_pages )
 			{
 				$posts = get_pages( $args );
@@ -178,56 +178,56 @@ class acf_field_post_object extends acf_field
 			{
 				$posts = get_posts( $args );
 			}
-			
-			
+
+
 			if($posts) {
-				
+
 				foreach( $posts as $p ) {
-					
+
 					// title
 					$title = get_the_title( $p->ID );
-					
-					
+
+
 					// empty
 					if( $title === '' ) {
-						
+
 						$title = __('(no title)', 'acf');
-						
+
 					}
-					
-					
+
+
 					// ancestors
 					if( $p->post_type != 'attachment' ) {
-						
+
 						$ancestors = get_ancestors( $p->ID, $p->post_type );
-						
+
 						$title = str_repeat('- ', count($ancestors)) . $title;
-						
+
 					}
-					
-					
+
+
 					// status
 					if( get_post_status( $p->ID ) != "publish" ) {
-						
+
 						$title .= ' (' . get_post_status( $p->ID ) . ')';
-						
+
 					}
-					
-					
+
+
 					// WPML
 					if( defined('ICL_LANGUAGE_CODE') ) {
-						
+
 						$title .= ' (' . ICL_LANGUAGE_CODE . ')';
-						
+
 					}
-					
-					
+
+
 					// filters
 					$title = apply_filters('acf/fields/post_object/result', $title, $p, $field, $post);
 					$title = apply_filters('acf/fields/post_object/result/name=' . $field['_name'] , $title, $p, $field, $post);
 					$title = apply_filters('acf/fields/post_object/result/key=' . $field['key'], $title, $p, $field, $post);
-					
-					
+
+
 					// add to choices
 					if( count($field['post_type']) == 1 )
 					{
@@ -238,24 +238,24 @@ class acf_field_post_object extends acf_field
 						// group by post type
 						$post_type_object = get_post_type_object( $p->post_type );
 						$post_type_name = $post_type_object->labels->name;
-					
+
 						$field['choices'][ $post_type_name ][ $p->ID ] = $title;
 					}
-					
-					
+
+
 				}
 				// foreach( $posts as $post )
 			}
 			// if($posts)
 		}
 		// foreach( $field['post_type'] as $post_type )
-		
-		
+
+
 		// create field
 		do_action('acf/create_field', $field );
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -268,43 +268,43 @@ class acf_field_post_object extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label for=""><?php _e("Post Type",'acf'); ?></label>
+		<label for=""><?php esc_html_e("Post Type",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
-		
+		<?php
+
 		$choices = array(
 			'all'	=>	__("All",'acf')
 		);
 		$choices = apply_filters('acf/get_post_types', $choices);
-		
-		
+
+
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
-			'name'	=>	'fields['.$key.'][post_type]',
+			'name'	=>	'fields['. esc_attr($key) .'][post_type]',
 			'value'	=>	$field['post_type'],
 			'choices'	=>	$choices,
 			'multiple'	=>	1,
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Filter from Taxonomy",'acf'); ?></label>
+		<label><?php esc_html_e("Filter from Taxonomy",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
+		<?php
 		$choices = array(
 			'' => array(
 				'all' => __("All",'acf')
@@ -312,28 +312,28 @@ class acf_field_post_object extends acf_field
 		);
 		$simple_value = false;
 		$choices = apply_filters('acf/get_taxonomies_for_select', $choices, $simple_value);
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
-			'name'	=>	'fields['.$key.'][taxonomy]',
+			'name'	=>	'fields['. esc_attr($key) .'][taxonomy]',
 			'value'	=>	$field['taxonomy'],
 			'choices' => $choices,
 			'multiple'	=>	1,
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Allow Null?",'acf'); ?></label>
+		<label><?php esc_html_e("Allow Null?",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'radio',
-			'name'	=>	'fields['.$key.'][allow_null]',
+			'name'	=>	'fields['. esc_attr($key) .'][allow_null]',
 			'value'	=>	$field['allow_null'],
 			'choices'	=>	array(
 				1	=>	__("Yes",'acf'),
@@ -341,20 +341,20 @@ class acf_field_post_object extends acf_field
 			),
 			'layout'	=>	'horizontal',
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Select multiple values?",'acf'); ?></label>
+		<label><?php esc_html_e("Select multiple values?",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'radio',
-			'name'	=>	'fields['.$key.'][multiple]',
+			'name'	=>	'fields['. esc_attr($key) .'][multiple]',
 			'value'	=>	$field['multiple'],
 			'choices'	=>	array(
 				1	=>	__("Yes",'acf'),
@@ -362,15 +362,15 @@ class acf_field_post_object extends acf_field
 			),
 			'layout'	=>	'horizontal',
 		));
-		
+
 		?>
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  format_value()
 	*
@@ -386,7 +386,7 @@ class acf_field_post_object extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value( $value, $post_id, $field )
 	{
 		// empty?
@@ -402,13 +402,13 @@ class acf_field_post_object extends acf_field
 				$value = intval($value);
 			}
 		}
-			
-		
+
+
 		// return value
-		return $value;	
+		return $value;
 	}
-	
-	
+
+
 	/*
 	*  format_value_for_api()
 	*
@@ -424,7 +424,7 @@ class acf_field_post_object extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field )
 	{
 		// no value?
@@ -432,15 +432,15 @@ class acf_field_post_object extends acf_field
 		{
 			return false;
 		}
-		
-		
+
+
 		// null?
 		if( $value == 'null' )
 		{
 			return false;
 		}
-		
-		
+
+
 		// multiple / single
 		if( is_array($value) )
 		{
@@ -451,16 +451,16 @@ class acf_field_post_object extends acf_field
 				'post_type'	=>	apply_filters('acf/get_post_types', array()),
 				'post_status' => array('publish', 'private', 'draft', 'inherit', 'future'),
 			));
-	
-			
+
+
 			$ordered_posts = array();
 			foreach( $posts as $post )
 			{
 				// create array to hold value data
 				$ordered_posts[ $post->ID ] = $post;
 			}
-			
-			
+
+
 			// override value array with attachments
 			foreach( $value as $k => $v)
 			{
@@ -474,19 +474,19 @@ class acf_field_post_object extends acf_field
 					$value[ $k ] = $ordered_posts[ $v ];
 				}
 			}
-			
+
 		}
 		else
 		{
 			$value = get_post($value);
 		}
-		
-		
+
+
 		// return the value
 		return $value;
 	}
-	
-	
+
+
 	/*
 	*  update_value()
 	*
@@ -502,7 +502,7 @@ class acf_field_post_object extends acf_field
 	*
 	*  @return	$value - the modified value
 	*/
-	
+
 	function update_value( $value, $post_id, $field )
 	{
 		// validate
@@ -510,36 +510,36 @@ class acf_field_post_object extends acf_field
 		{
 			return $value;
 		}
-		
-		
+
+
 		if( is_object($value) && isset($value->ID) )
 		{
 			// object
 			$value = $value->ID;
-			
+
 		}
 		elseif( is_array($value) )
 		{
 			// array
 			foreach( $value as $k => $v ){
-			
+
 				// object?
 				if( is_object($v) && isset($v->ID) )
 				{
 					$value[ $k ] = $v->ID;
 				}
 			}
-			
+
 			// save value as strings, so we can clearly search for them in SQL LIKE statements
 			$value = array_map('strval', $value);
-			
+
 		}
-		
+
 		return $value;
 	}
-	
+
 }
 
 new acf_field_post_object();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/radio.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/radio.php
index 125fdce..8aa7894 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/radio.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/radio.php
@@ -10,7 +10,7 @@ class acf_field_radio extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -24,14 +24,14 @@ class acf_field_radio extends acf_field
 			'other_choice'		=>	0,
 			'save_other_choice'	=>	0,
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
-  
+
 	}
-	
-		
+
+
 	/*
 	*  create_field()
 	*
@@ -43,14 +43,14 @@ class acf_field_radio extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// vars
 		$i = 0;
 		$e = '<ul class="acf-radio-list ' . esc_attr($field['class']) . ' ' . esc_attr($field['layout']) . '">';
 
-		
+
 		// add choices
 		if( is_array($field['choices']) )
 		{
@@ -59,8 +59,8 @@ class acf_field_radio extends acf_field
 				// vars
 				$i++;
 				$atts = '';
-				
-				
+
+
 				// if there is no value and this is the first of the choices, select this on by default
 				if( $field['value'] === false )
 				{
@@ -76,22 +76,22 @@ class acf_field_radio extends acf_field
 						$atts = 'checked="checked" data-checked="checked"';
 					}
 				}
-				
-				
+
+
 				// HTML
-				$e .= '<li><label><input id="' . esc_attr($field['id']) . '-' . esc_attr($key) . '" type="radio" name="' . esc_attr($field['name']) . '" value="' . esc_attr($key) . '" ' . esc_attr( $atts ) . ' />' . $value . '</label></li>';
+				$e .= '<li><label><input id="' . esc_attr($field['id']) . '-' . esc_attr($key) . '" type="radio" name="' . esc_attr($field['name']) . '" value="' . esc_attr($key) . '" ' . esc_attr( $atts ) . ' />' . esc_html($value) . '</label></li>';
 			}
 		}
-		
-		
+
+
 		// other choice
 		if( $field['other_choice'] )
 		{
 			// vars
 			$atts = '';
 			$atts2 = 'name="" value="" style="display:none"';
-			
-			
+
+
 			if( $field['value'] !== false )
 			{
 				if( !isset($field['choices'][ $field['value'] ]) )
@@ -100,19 +100,19 @@ class acf_field_radio extends acf_field
 					$atts2 = 'name="' . esc_attr($field['name']) . '" value="' . esc_attr($field['value']) . '"' ;
 				}
 			}
-			
-			
-			$e .= '<li><label><input id="' . esc_attr($field['id']) . '-other" type="radio" name="' . esc_attr($field['name']) . '" value="other" ' . $atts . ' />' . __("Other", 'acf') . '</label> <input type="text" ' . $atts2 . ' /></li>';
+
+
+			$e .= '<li><label><input id="' . esc_attr($field['id']) . '-other" type="radio" name="' . esc_attr($field['name']) . '" value="other" ' . $atts . ' />' . esc_html__("Other", 'acf') . '</label> <input type="text" ' . $atts2 . ' /></li>';
 		}
 
 
 		$e .= '</ul>';
-		
+
 		echo $e;
-		
+
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -125,114 +125,114 @@ class acf_field_radio extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		// implode checkboxes so they work in a textarea
 		if( is_array($field['choices']) )
-		{		
+		{
 			foreach( $field['choices'] as $k => $v )
 			{
 				$field['choices'][ $k ] = $k . ' : ' . $v;
 			}
 			$field['choices'] = implode("\n", $field['choices']);
 		}
-		
+
 		?>
-		<tr class="field_option field_option_<?php echo $this->name; ?>">
+		<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 			<td class="label">
-				<label for=""><?php _e("Choices",'acf'); ?></label>
-				<p class="description"><?php _e("Enter your choices one per line",'acf'); ?><br />
+				<label for=""><?php esc_html_e("Choices",'acf'); ?></label>
+				<p class="description"><?php esc_html_e("Enter your choices one per line",'acf'); ?><br />
 				<br />
-				<?php _e("Red",'acf'); ?><br />
-				<?php _e("Blue",'acf'); ?><br />
+				<?php esc_html_e("Red",'acf'); ?><br />
+				<?php esc_html_e("Blue",'acf'); ?><br />
 				<br />
-				<?php _e("red : Red",'acf'); ?><br />
-				<?php _e("blue : Blue",'acf'); ?><br />
+				<?php esc_html_e("red : Red",'acf'); ?><br />
+				<?php esc_html_e("blue : Blue",'acf'); ?><br />
 				</p>
 			</td>
 			<td>
 				<?php
-				
+
 				do_action('acf/create_field', array(
 					'type'	=>	'textarea',
 					'class' => 	'textarea field_option-choices',
-					'name'	=>	'fields['.$key.'][choices]',
+					'name'	=>	'fields['. esc_attr($key) .'][choices]',
 					'value'	=>	$field['choices'],
 				));
-				
+
 				?>
 				<div class="radio-option-other_choice">
 				<?php
-				
+
 				do_action('acf/create_field', array(
 					'type'		=>	'true_false',
-					'name'		=>	'fields['.$key.'][other_choice]',
+					'name'		=>	'fields['. esc_attr($key) .'][other_choice]',
 					'value'		=>	$field['other_choice'],
 					'message'	=>	__("Add 'other' choice to allow for custom values", 'acf')
 				));
-				
+
 				?>
 				</div>
 				<div class="radio-option-save_other_choice" <?php if( !$field['other_choice'] ): ?>style="display:none"<?php endif; ?>>
 				<?php
-				
+
 				do_action('acf/create_field', array(
 					'type'		=>	'true_false',
-					'name'		=>	'fields['.$key.'][save_other_choice]',
+					'name'		=>	'fields['. esc_attr($key) .'][save_other_choice]',
 					'value'		=>	$field['save_other_choice'],
 					'message'	=>	__("Save 'other' values to the field's choices", 'acf')
 				));
-				
+
 				?>
 				</div>
 			</td>
 		</tr>
-		<tr class="field_option field_option_<?php echo $this->name; ?>">
+		<tr class="field_option field_option_<?php echo esc_attr($this->name) ?>">
 			<td class="label">
-				<label><?php _e("Default Value",'acf'); ?></label>
+				<label><?php esc_html_e("Default Value",'acf'); ?></label>
 			</td>
 			<td>
 				<?php
-				
+
 				do_action('acf/create_field', array(
 					'type'	=>	'text',
-					'name'	=>	'fields['.$key.'][default_value]',
+					'name'	=>	'fields['. esc_attr($key) .'][default_value]',
 					'value'	=>	$field['default_value'],
 				));
-				
+
 				?>
 			</td>
 		</tr>
-		<tr class="field_option field_option_<?php echo $this->name; ?>">
+		<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 			<td class="label">
-				<label for=""><?php _e("Layout",'acf'); ?></label>
+				<label for=""><?php esc_html_e("Layout",'acf'); ?></label>
 			</td>
 			<td>
 				<?php
-				
+
 				do_action('acf/create_field', array(
 					'type'	=>	'radio',
-					'name'	=>	'fields['.$key.'][layout]',
+					'name'	=>	'fields['. esc_attr($key) .'][layout]',
 					'value'	=>	$field['layout'],
-					'layout' => 'horizontal', 
+					'layout' => 'horizontal',
 					'choices' => array(
-						'vertical' => __("Vertical",'acf'), 
+						'vertical' => __("Vertical",'acf'),
 						'horizontal' => __("Horizontal",'acf')
 					)
 				));
-				
+
 				?>
 			</td>
 		</tr>
 		<?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  update_value()
 	*
@@ -248,7 +248,7 @@ class acf_field_radio extends acf_field
 	*
 	*  @return	$value - the modified value
 	*/
-	
+
 	function update_value( $value, $post_id, $field )
 	{
 		// validate
@@ -259,22 +259,22 @@ class acf_field_radio extends acf_field
 			{
 				// update $field
 				$field['choices'][ $value ] = $value;
-				
-				
+
+
 				// can save
 				if( isset($field['field_group']) )
 				{
 					do_action('acf/update_field', $field, $field['field_group']);
 				}
-				
+
 			}
-		}		
-		
+		}
+
 		return $value;
 	}
-	
+
 }
 
 new acf_field_radio();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/relationship.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/relationship.php
index a275aca..8e09563 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/relationship.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/relationship.php
@@ -10,7 +10,7 @@ class acf_field_relationship extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -28,32 +28,32 @@ class acf_field_relationship extends acf_field
 		$this->l10n = array(
 			'max'		=> __("Maximum values reached ( {max} values )",'acf')
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
-    	
-    	
+
+
     	// extra
 		add_action('wp_ajax_acf/fields/relationship/query_posts', array($this, 'query_posts'));
 		add_action('wp_ajax_nopriv_acf/fields/relationship/query_posts', array($this, 'query_posts'));
 	}
-	
-	
+
+
 	/*
 	*  load_field()
-	*  
+	*
 	*  This filter is appied to the $field after it is loaded from the database
-	*  
+	*
 	*  @type filter
 	*  @since 3.6
 	*  @date 23/01/13
-	*  
+	*
 	*  @param $field - the field array holding all the field options
-	*  
+	*
 	*  @return $field - the field array holding all the field options
 	*/
-	
+
 	function load_field( $field )
 	{
 		// validate post_type
@@ -62,38 +62,38 @@ class acf_field_relationship extends acf_field
 			$field['post_type'] = array( 'all' );
 		}
 
-		
+
 		// validate taxonomy
 		if( !$field['taxonomy'] || !is_array($field['taxonomy']) || in_array('', $field['taxonomy']) )
 		{
 			$field['taxonomy'] = array( 'all' );
 		}
-		
-		
+
+
 		// validate result_elements
 		if( !is_array( $field['result_elements'] ) )
 		{
 			$field['result_elements'] = array();
 		}
-		
+
 		if( !in_array('post_title', $field['result_elements']) )
 		{
 			$field['result_elements'][] = 'post_title';
 		}
-		
-		
+
+
 		// filters
 		if( !is_array( $field['filters'] ) )
 		{
 			$field['filters'] = array();
 		}
-		
-		
+
+
 		// return
 		return $field;
 	}
-	
-	
+
+
 	/*
 	*  get_result
 	*
@@ -106,97 +106,97 @@ class acf_field_relationship extends acf_field
 	*  @param	$post_id (int)
 	*  @return	$post_id (int)
 	*/
-	
+
 	function get_result( $post, $field, $the_post, $options = array() ) {
-		
+
 		// right aligned info
 		$title = '<span class="relationship-item-info">';
-			
+
 			if( in_array('post_type', $field['result_elements']) ) {
-				
+
 				$post_type_object = get_post_type_object( $post->post_type );
 				$title .= $post_type_object->labels->singular_name;
-				
+
 			}
-			
-			
+
+
 			// WPML
 			if( !empty($options['lang']) ) {
-				
+
 				$title .= ' (' . $options['lang'] . ')';
-				
+
 			} elseif( defined('ICL_LANGUAGE_CODE') ) {
-				
+
 				$title .= ' (' . ICL_LANGUAGE_CODE . ')';
-				
+
 			}
-			
+
 		$title .= '</span>';
-		
-		
+
+
 		// featured_image
 		if( in_array('featured_image', $field['result_elements']) ) {
-			
+
 			$image = '';
-			
+
 			if( $post->post_type == 'attachment' ) {
-				
+
 				$image = wp_get_attachment_image( $post->ID, array(21, 21) );
-				
+
 			} else {
-				
+
 				$image = get_the_post_thumbnail( $post->ID, array(21, 21) );
-				
+
 			}
-			
+
 			$title .= '<div class="result-thumbnail">' . $image . '</div>';
-			
+
 		}
-		
-		
+
+
 		// title
 		$post_title = get_the_title( $post->ID );
-		
-		
+
+
 		// empty
 		if( $post_title === '' ) {
-			
+
 			$post_title = __('(no title)', 'acf');
-			
+
 		}
-		
-		
+
+
 		$title .= $post_title;
-		
-		
+
+
 		// status
 		if( get_post_status( $post->ID ) != "publish" ) {
-			
+
 			$title .= ' (' . get_post_status( $post->ID ) . ')';
-			
+
 		}
-			
-		
+
+
 		// filters
 		$title = apply_filters('acf/fields/relationship/result', $title, $post, $field, $the_post);
 		$title = apply_filters('acf/fields/relationship/result/name=' . $field['_name'] , $title, $post, $field, $the_post);
 		$title = apply_filters('acf/fields/relationship/result/key=' . $field['key'], $title, $post, $field, $the_post);
-		
-		
+
+
 		// return
 		return $title;
-		
+
 	}
-	
-	
+
+
 	/*
 	*  query_posts
 	*
-	*  @description: 
+	*  @description:
 	*  @since: 3.6
 	*  @created: 27/01/13
 	*/
-	
+
 	function query_posts()
    	{
    		// vars
@@ -204,8 +204,8 @@ class acf_field_relationship extends acf_field
    			'next_page_exists' => 1,
    			'html' => ''
    		);
-   		
-   		
+
+
    		// options
 		$options = array(
 			'post_type'					=>	'all',
@@ -223,76 +223,76 @@ class acf_field_relationship extends acf_field
 			'nonce'						=>	'',
 			'ancestor'					=>	false,
 		);
-		
+
 		$options = array_merge( $options, $_POST );
-		
-		
+
+
 		// validate
 		if( ! wp_verify_nonce($options['nonce'], 'acf_nonce') )
 		{
 			die();
 		}
-		
-		
+
+
 		// WPML
 		if( $options['lang'] )
 		{
 			global $sitepress;
-			
+
 			if( !empty($sitepress) )
 			{
 				$sitepress->switch_lang( $options['lang'] );
 			}
 		}
-		
-		
+
+
 		// convert types
 		$options['post_type'] = explode(',', $options['post_type']);
 		$options['taxonomy'] = explode(',', $options['taxonomy']);
-		
-		
+
+
 		// load all post types by default
 		if( in_array('all', $options['post_type']) )
 		{
 			$options['post_type'] = apply_filters('acf/get_post_types', array());
 		}
-		
-		
+
+
 		// attachment doesn't work if it is the only item in an array???
 		if( is_array($options['post_type']) && count($options['post_type']) == 1 )
 		{
 			$options['post_type'] = $options['post_type'][0];
 		}
-		
-		
+
+
 		// create tax queries
 		if( ! in_array('all', $options['taxonomy']) )
 		{
 			// vars
 			$taxonomies = array();
 			$options['tax_query'] = array();
-			
+
 			foreach( $options['taxonomy'] as $v )
 			{
-				
+
 				// find term (find taxonomy!)
 				// $term = array( 0 => $taxonomy, 1 => $term_id )
-				$term = explode(':', $v); 
-				
-				
+				$term = explode(':', $v);
+
+
 				// validate
 				if( !is_array($term) || !isset($term[1]) )
 				{
 					continue;
 				}
-				
-				
+
+
 				// add to tax array
 				$taxonomies[ $term[0] ][] = $term[1];
-				
+
 			}
-			
-			
+
+
 			// now create the tax queries
 			foreach( $taxonomies as $k => $v )
 			{
@@ -303,10 +303,10 @@ class acf_field_relationship extends acf_field
 				);
 			}
 		}
-		
+
 		unset( $options['taxonomy'] );
-		
-		
+
+
 		// load field
 		$field = array();
 		if( $options['ancestor'] )
@@ -318,62 +318,62 @@ class acf_field_relationship extends acf_field
 		{
 			$field = apply_filters('acf/load_field', array(), $options['field_key'] );
 		}
-		
-		
+
+
 		// get the post from which this field is rendered on
 		$the_post = get_post( $options['post_id'] );
-		
-		
+
+
 		// filters
 		$options = apply_filters('acf/fields/relationship/query', $options, $field, $the_post);
 		$options = apply_filters('acf/fields/relationship/query/name=' . $field['_name'], $options, $field, $the_post );
 		$options = apply_filters('acf/fields/relationship/query/key=' . $field['key'], $options, $field, $the_post );
-		
-		
+
+
 		// query
 		$wp_query = new WP_Query( $options );
 
-		
+
 		// global
 		global $post;
-		
-		
+
+
 		// loop
 		while( $wp_query->have_posts() ) {
-			
+
 			$wp_query->the_post();
-			
-			
+
+
 			// get title
 			$title = $this->get_result($post, $field, $the_post, $options);
-			
-			
+
+
 			// update html
-			$r['html'] .= '<li><a href="' . get_permalink($post->ID) . '" data-post_id="' . $post->ID . '">' . $title .  '<span class="acf-button-add"></span></a></li>';
-				
+			$r['html'] .= '<li><a href="' . get_permalink($post->ID) . '" data-post_id="' . esc_attr($post->ID) . '">' . $title .  '<span class="acf-button-add"></span></a></li>';
+
 		}
-		
-		
+
+
 		// next page
 		if( (int)$options['paged'] >= $wp_query->max_num_pages ) {
-			
+
 			$r['next_page_exists'] = 0;
-			
+
 		}
-		
-		
+
+
 		// reset
 		wp_reset_postdata();
-		
-		
+
+
 		// return JSON
 		echo json_encode( $r );
-		
+
 		die();
-			
+
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -385,20 +385,20 @@ class acf_field_relationship extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// global
 		global $post;
 
-		
+
 		// no row limit?
 		if( !$field['max'] || $field['max'] < 1 )
 		{
 			$field['max'] = 9999;
 		}
-		
-		
+
+
 		// class
 		$class = '';
 		if( $field['filters'] )
@@ -408,7 +408,7 @@ class acf_field_relationship extends acf_field
 				$class .= ' has-' . $filter;
 			}
 		}
-		
+
 		$attributes = array(
 			'max' => $field['max'],
 			's' => '',
@@ -417,30 +417,30 @@ class acf_field_relationship extends acf_field
 			'taxonomy' => implode(',', $field['taxonomy']),
 			'field_key' => $field['key']
 		);
-		
-		
+
+
 		// Lang
 		if( defined('ICL_LANGUAGE_CODE') )
 		{
 			$attributes['lang'] = ICL_LANGUAGE_CODE;
 		}
-		
-		
+
+
 		// parent
 		preg_match('/\[(field_.*?)\]/', $field['name'], $ancestor);
 		if( isset($ancestor[1]) && $ancestor[1] != $field['key'])
 		{
 			$attributes['ancestor'] = $ancestor[1];
 		}
-				
+
 		?>
-<div class="acf_relationship<?php echo $class; ?>"<?php foreach( $attributes as $k => $v ): ?> data-<?php echo $k; ?>="<?php echo $v; ?>"<?php endforeach; ?>>
-	
-	
+<div class="acf_relationship<?php echo esc_attr($class); ?>"<?php foreach( $attributes as $k => $v ): ?> data-<?php echo $k; ?>="<?php echo esc_attr($v); ?>"<?php endforeach; ?>>
+
+
 	<!-- Hidden Blank default value -->
 	<input type="hidden" name="<?php echo $field['name']; ?>" value="" />
-	
-	
+
+
 	<!-- Left List -->
 	<div class="relationship_left">
 		<table class="widefat">
@@ -448,21 +448,21 @@ class acf_field_relationship extends acf_field
 				<?php if(in_array( 'search', $field['filters']) ): ?>
 				<tr>
 					<th>
-						<input class="relationship_search" placeholder="<?php _e("Search...",'acf'); ?>" type="text" id="relationship_<?php echo $field['name']; ?>" />
+						<input class="relationship_search" placeholder="<?php esc_attr_e("Search...",'acf'); ?>" type="text" id="relationship_<?php echo esc_attr($field['name']); ?>" />
 					</th>
 				</tr>
 				<?php endif; ?>
 				<?php if(in_array( 'post_type', $field['filters']) ): ?>
 				<tr>
 					<th>
-						<?php 
-						
+						<?php
+
 						// vars
 						$choices = array(
 							'all' => __("Filter by post type",'acf')
 						);
-						
-						
+
+
 						if( in_array('all', $field['post_type']) )
 						{
 							$post_types = apply_filters( 'acf/get_post_types', array() );
@@ -475,8 +475,8 @@ class acf_field_relationship extends acf_field
 								$choices[ $post_type ] = $post_type;
 							}
 						}
-						
-						
+
+
 						// create field
 						do_action('acf/create_field', array(
 							'type'	=>	'select',
@@ -485,7 +485,7 @@ class acf_field_relationship extends acf_field
 							'value'	=>	'',
 							'choices' => $choices,
 						));
-						
+
 						?>
 					</th>
 				</tr>
@@ -499,7 +499,7 @@ class acf_field_relationship extends acf_field
 		</ul>
 	</div>
 	<!-- /Left List -->
-	
+
 	<!-- Right List -->
 	<div class="relationship_right">
 		<ul class="bl relationship_list">
@@ -510,28 +510,28 @@ class acf_field_relationship extends acf_field
 			foreach( $field['value'] as $p )
 			{
 				$title = $this->get_result($p, $field, $post);
-				
-				
+
+
 				echo '<li>
-					<a href="' . get_permalink($p->ID) . '" class="" data-post_id="' . $p->ID . '">' . $title . '<span class="acf-button-remove"></span></a>
-					<input type="hidden" name="' . $field['name'] . '[]" value="' . $p->ID . '" />
+					<a href="' . get_permalink($p->ID) . '" class="" data-post_id="' . esc_attr($p->ID) . '">' . $title . '<span class="acf-button-remove"></span></a>
+					<input type="hidden" name="' . esc_attr($field['name']) . '[]" value="' . esc_attr($p->ID) . '" />
 				</li>';
-				
-					
+
+
 			}
 		}
-			
+
 		?>
 		</ul>
 	</div>
 	<!-- / Right List -->
-	
+
 </div>
 		<?php
 	}
-	
-	
-	
+
+
+
 	/*
 	*  create_options()
 	*
@@ -544,23 +544,23 @@ class acf_field_relationship extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Return Format",'acf'); ?></label>
-		<p><?php _e("Specify the returned value on front end",'acf') ?></p>
+		<label><?php esc_html_e("Return Format",'acf'); ?></label>
+		<p><?php esc_html_e("Specify the returned value on front end",'acf') ?></p>
 	</td>
 	<td>
 		<?php
 		do_action('acf/create_field', array(
 			'type'		=>	'radio',
-			'name'		=>	'fields['.$key.'][return_format]',
+			'name'		=>	'fields['. esc_attr($key) .'][return_format]',
 			'value'		=>	$field['return_format'],
 			'layout'	=>	'horizontal',
 			'choices'	=> array(
@@ -571,36 +571,36 @@ class acf_field_relationship extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label for=""><?php _e("Post Type",'acf'); ?></label>
+		<label for=""><?php esc_html_e("Post Type",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
-		
+		<?php
+
 		$choices = array(
 			'all'	=>	__("All",'acf')
 		);
 		$choices = apply_filters('acf/get_post_types', $choices);
-		
-		
+
+
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
-			'name'	=>	'fields['.$key.'][post_type]',
+			'name'	=>	'fields['. esc_attr($key) .'][post_type]',
 			'value'	=>	$field['post_type'],
 			'choices'	=>	$choices,
 			'multiple'	=>	1,
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Filter from Taxonomy",'acf'); ?></label>
+		<label><?php esc_html_e("Filter from Taxonomy",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
+		<?php
 		$choices = array(
 			'' => array(
 				'all' => __("All",'acf')
@@ -608,11 +608,11 @@ class acf_field_relationship extends acf_field
 		);
 		$simple_value = false;
 		$choices = apply_filters('acf/get_taxonomies_for_select', $choices, $simple_value);
-		
-		
+
+
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
-			'name'	=>	'fields['.$key.'][taxonomy]',
+			'name'	=>	'fields['. esc_attr($key) .'][taxonomy]',
 			'value'	=>	$field['taxonomy'],
 			'choices' => $choices,
 			'multiple'	=>	1,
@@ -620,15 +620,15 @@ class acf_field_relationship extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Filters",'acf'); ?></label>
+		<label><?php esc_html_e("Filters",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'checkbox',
-			'name'	=>	'fields['.$key.'][filters]',
+			'name'	=>	'fields['. esc_attr($key) .'][filters]',
 			'value'	=>	$field['filters'],
 			'choices'	=>	array(
 				'search'	=>	__("Search",'acf'),
@@ -638,16 +638,16 @@ class acf_field_relationship extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Elements",'acf'); ?></label>
-		<p><?php _e("Selected elements will be displayed in each result",'acf') ?></p>
+		<label><?php esc_html_e("Elements",'acf'); ?></label>
+		<p><?php esc_html_e("Selected elements will be displayed in each result",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'checkbox',
-			'name'	=>	'fields['.$key.'][result_elements]',
+			'name'	=>	'fields['. esc_attr($key) .'][result_elements]',
 			'value'	=>	$field['result_elements'],
 			'choices' => array(
 				'featured_image' => __("Featured Image",'acf'),
@@ -661,25 +661,25 @@ class acf_field_relationship extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Maximum posts",'acf'); ?></label>
+		<label><?php esc_html_e("Maximum posts",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'number',
-			'name'	=>	'fields['.$key.'][max]',
+			'name'	=>	'fields['. esc_attr($key) .'][max]',
 			'value'	=>	$field['max'],
 		));
 		?>
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  format_value()
 	*
@@ -695,7 +695,7 @@ class acf_field_relationship extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value( $value, $post_id, $field )
 	{
 		// empty?
@@ -706,25 +706,25 @@ class acf_field_relationship extends acf_field
 			{
 				$value = explode(',', $value);
 			}
-			
-			
+
+
 			// convert to integers
 			if( is_array($value) )
 			{
 				$value = array_map('intval', $value);
-				
+
 				// convert into post objects
 				$value = $this->get_posts( $value );
 			}
-			
+
 		}
-		
-		
+
+
 		// return value
-		return $value;	
+		return $value;
 	}
-	
-	
+
+
 	/*
 	*  format_value_for_api()
 	*
@@ -740,7 +740,7 @@ class acf_field_relationship extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field )
 	{
 		// empty?
@@ -748,39 +748,39 @@ class acf_field_relationship extends acf_field
 		{
 			return $value;
 		}
-		
-		
+
+
 		// Pre 3.3.3, the value is a string coma seperated
 		if( is_string($value) )
 		{
 			$value = explode(',', $value);
 		}
-		
-		
+
+
 		// empty?
 		if( !is_array($value) || empty($value) )
 		{
 			return $value;
 		}
-		
-		
+
+
 		// convert to integers
 		$value = array_map('intval', $value);
-		
-		
+
+
 		// return format
 		if( $field['return_format'] == 'object' )
 		{
-			$value = $this->get_posts( $value );	
+			$value = $this->get_posts( $value );
 		}
-		
-		
+
+
 		// return
 		return $value;
-		
+
 	}
-	
-	
+
+
 	/*
 	*  get_posts
 	*
@@ -792,7 +792,7 @@ class acf_field_relationship extends acf_field
 	*  @param	$post_ids (array) the array of post ID's
 	*  @return	(array) an array of post objects
 	*/
-	
+
 	function get_posts( $post_ids )
 	{
 		// validate
@@ -800,12 +800,12 @@ class acf_field_relationship extends acf_field
 		{
 			return $post_ids;
 		}
-		
-		
+
+
 		// vars
 		$r = array();
-		
-		
+
+
 		// find posts (DISTINCT POSTS)
 		$posts = get_posts(array(
 			'numberposts'	=>	-1,
@@ -814,15 +814,15 @@ class acf_field_relationship extends acf_field
 			'post_status'	=>	'any',
 		));
 
-		
+
 		$ordered_posts = array();
 		foreach( $posts as $p )
 		{
 			// create array to hold value data
 			$ordered_posts[ $p->ID ] = $p;
 		}
-		
-		
+
+
 		// override value array with attachments
 		foreach( $post_ids as $k => $v)
 		{
@@ -832,13 +832,13 @@ class acf_field_relationship extends acf_field
 				$r[] = $ordered_posts[ $v ];
 			}
 		}
-		
-		
+
+
 		// return
 		return $r;
 	}
-	
-	
+
+
 	/*
 	*  update_value()
 	*
@@ -854,7 +854,7 @@ class acf_field_relationship extends acf_field
 	*
 	*  @return	$value - the modified value
 	*/
-	
+
 	function update_value( $value, $post_id, $field )
 	{
 		// validate
@@ -862,44 +862,44 @@ class acf_field_relationship extends acf_field
 		{
 			return $value;
 		}
-		
-		
+
+
 		if( is_string($value) )
 		{
 			// string
 			$value = explode(',', $value);
-			
+
 		}
 		elseif( is_object($value) && isset($value->ID) )
 		{
 			// object
 			$value = array( $value->ID );
-			
+
 		}
 		elseif( is_array($value) )
 		{
 			// array
 			foreach( $value as $k => $v ){
-			
+
 				// object?
 				if( is_object($v) && isset($v->ID) )
 				{
 					$value[ $k ] = $v->ID;
 				}
 			}
-			
+
 		}
-		
-		
+
+
 		// save value as strings, so we can clearly search for them in SQL LIKE statements
 		$value = array_map('strval', $value);
-						
-		
+
+
 		return $value;
 	}
-	
+
 }
 
 new acf_field_relationship();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/select.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/select.php
index 7226b5c..17ee0eb 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/select.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/select.php
@@ -10,7 +10,7 @@ class acf_field_select extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -23,19 +23,19 @@ class acf_field_select extends acf_field
 			'choices'		=>	array(),
 			'default_value'	=>	''
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
-    	
-    	
+
+
     	// extra
 		//add_filter('acf/update_field/type=select', array($this, 'update_field'), 5, 2);
 		add_filter('acf/update_field/type=checkbox', array($this, 'update_field'), 5, 2);
 		add_filter('acf/update_field/type=radio', array($this, 'update_field'), 5, 2);
 	}
 
-	
+
 	/*
 	*  create_field()
 	*
@@ -47,13 +47,13 @@ class acf_field_select extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// vars
 		$optgroup = false;
-		
-		
+
+
 		// determine if choices are grouped (2 levels of array)
 		if( is_array($field['choices']) )
 		{
@@ -65,8 +65,8 @@ class acf_field_select extends acf_field
 				}
 			}
 		}
-		
-		
+
+
 		// value must be array
 		if( !is_array($field['value']) )
 		{
@@ -81,34 +81,34 @@ class acf_field_select extends acf_field
 				$field['value'] = array( $field['value'] );
 			}
 		}
-		
-		
+
+
 		// trim value
 		$field['value'] = array_map('trim', $field['value']);
-		
-		
+
+
 		// multiple select
 		$multiple = '';
 		if( $field['multiple'] )
 		{
 			// create a hidden field to allow for no selections
-			echo '<input type="hidden" name="' . $field['name'] . '" />';
-			
+			echo '<input type="hidden" name="' . esc_attr( $field['name'] ) . '" />';
+
 			$multiple = ' multiple="multiple" size="5" ';
 			$field['name'] .= '[]';
-		} 
-		
-		
+		}
+
+
 		// html
-		echo '<select id="' . $field['id'] . '" class="' . $field['class'] . '" name="' . $field['name'] . '" ' . $multiple . ' >';	
-		
-		
+		echo '<select id="' . esc_attr( $field['id']) . '" class="' . esc_attr($field['class']) . '" name="' . esc_attr($field['name']) . '" ' . $multiple . ' >';
+
+
 		// null
 		if( $field['allow_null'] )
 		{
-			echo '<option value="null">- ' . __("Select",'acf') . ' -</option>';
+			echo '<option value="null">- ' . esc_html__("Select",'acf') . ' -</option>';
 		}
-		
+
 		// loop through values and add them as options
 		if( is_array($field['choices']) )
 		{
@@ -117,32 +117,32 @@ class acf_field_select extends acf_field
 				if( $optgroup )
 				{
 					// this select is grouped with optgroup
-					if($key != '') echo '<optgroup label="'.$key.'">';
-					
+					if($key != '') echo '<optgroup label="'. esc_attr($key) .'">';
+
 					if( is_array($value) )
 					{
 						foreach($value as $id => $label)
 						{
 							$selected = in_array($id, $field['value']) ? 'selected="selected"' : '';
-														
-							echo '<option value="'.$id.'" '.$selected.'>'.$label.'</option>';
+
+							echo '<option value="'. esc_attr( $id ).'" '.$selected.'>'. esc_html($label) .'</option>';
 						}
 					}
-					
+
 					if($key != '') echo '</optgroup>';
 				}
 				else
 				{
 					$selected = in_array($key, $field['value']) ? 'selected="selected"' : '';
-					echo '<option value="'.$key.'" '.$selected.'>'.$value.'</option>';
+					echo '<option value="'. esc_attr($key) .'" '.$selected.'>'. esc_html($value) .'</option>';
 				}
 			}
 		}
 
 		echo '</select>';
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -155,7 +155,7 @@ class acf_field_select extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		$key = $field['name'];
@@ -163,7 +163,7 @@ class acf_field_select extends acf_field
 
 		// implode choices so they work in a textarea
 		if( is_array($field['choices']) )
-		{		
+		{
 			foreach( $field['choices'] as $k => $v )
 			{
 				$field['choices'][ $k ] = $k . ' : ' . $v;
@@ -172,52 +172,52 @@ class acf_field_select extends acf_field
 		}
 
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label for=""><?php _e("Choices",'acf'); ?></label>
-		<p><?php _e("Enter each choice on a new line.",'acf'); ?></p>
-		<p><?php _e("For more control, you may specify both a value and label like this:",'acf'); ?></p>
-		<p><?php _e("red : Red",'acf'); ?><br /><?php _e("blue : Blue",'acf'); ?></p>
+		<label for=""><?php esc_html_e("Choices",'acf'); ?></label>
+		<p><?php esc_html_e("Enter each choice on a new line.",'acf'); ?></p>
+		<p><?php esc_html_e("For more control, you may specify both a value and label like this:",'acf'); ?></p>
+		<p><?php esc_html_e("red : Red",'acf'); ?><br /><?php esc_html_e("blue : Blue",'acf'); ?></p>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'textarea',
 			'class' => 	'textarea field_option-choices',
-			'name'	=>	'fields['.$key.'][choices]',
+			'name'	=>	'fields['. esc_attr($key) .'][choices]',
 			'value'	=>	$field['choices'],
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Default Value",'acf'); ?></label>
-		<p class="description"><?php _e("Enter each default value on a new line",'acf'); ?></p>
+		<label><?php esc_html_e("Default Value",'acf'); ?></label>
+		<p class="description"><?php esc_html_e("Enter each default value on a new line",'acf'); ?></p>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'textarea',
-			'name'	=>	'fields['.$key.'][default_value]',
+			'name'	=>	'fields['. esc_attr($key) .'][default_value]',
 			'value'	=>	$field['default_value'],
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Allow Null?",'acf'); ?></label>
+		<label><?php esc_html_e("Allow Null?",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'radio',
-			'name'	=>	'fields['.$key.'][allow_null]',
+			'name'	=>	'fields['. esc_attr($key) .'][allow_null]',
 			'value'	=>	$field['allow_null'],
 			'choices'	=>	array(
 				1	=>	__("Yes",'acf'),
@@ -228,15 +228,15 @@ class acf_field_select extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Select multiple values?",'acf'); ?></label>
+		<label><?php esc_html_e("Select multiple values?",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'radio',
-			'name'	=>	'fields['.$key.'][multiple]',
+			'name'	=>	'fields['. esc_attr($key) .'][multiple]',
 			'value'	=>	$field['multiple'],
 			'choices'	=>	array(
 				1	=>	__("Yes",'acf'),
@@ -248,10 +248,10 @@ class acf_field_select extends acf_field
 	</td>
 </tr>
 <?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  format_value_for_api()
 	*
@@ -267,19 +267,19 @@ class acf_field_select extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field )
 	{
 		if( $value == 'null' )
 		{
 			$value = false;
 		}
-		
-		
+
+
 		return $value;
 	}
-	
-	
+
+
 	/*
 	*  update_field()
 	*
@@ -297,24 +297,24 @@ class acf_field_select extends acf_field
 
 	function update_field( $field, $post_id )
 	{
-		
+
 		// check if is array. Normal back end edit posts a textarea, but a user might use update_field from the front end
 		if( is_array( $field['choices'] ))
 		{
 		    return $field;
 		}
 
-		
+
 		// vars
 		$new_choices = array();
-		
-		
+
+
 		// explode choices from each line
 		if( $field['choices'] )
 		{
 			// stripslashes ("")
 			$field['choices'] = stripslashes_deep($field['choices']);
-		
+
 			if(strpos($field['choices'], "\n") !== false)
 			{
 				// found multiple lines, explode it
@@ -322,11 +322,11 @@ class acf_field_select extends acf_field
 			}
 			else
 			{
-				// no multiple lines! 
+				// no multiple lines!
 				$field['choices'] = array($field['choices']);
 			}
-			
-			
+
+
 			// key => value
 			foreach($field['choices'] as $choice)
 			{
@@ -341,15 +341,15 @@ class acf_field_select extends acf_field
 				}
 			}
 		}
-		
-		
+
+
 		// update choices
 		$field['choices'] = $new_choices;
-		
-		
+
+
 		return $field;
 	}
-	
+
 }
 
 new acf_field_select();
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/tab.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/tab.php
index 07224da..c30d242 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/tab.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/tab.php
@@ -2,7 +2,7 @@
 
 class acf_field_tab extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,20 +11,20 @@ class acf_field_tab extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
 		$this->name = 'tab';
 		$this->label = __("Tab",'acf');
 		$this->category = __("Layout",'acf');
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -36,14 +36,14 @@ class acf_field_tab extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
-		echo '<div class="acf-tab">' . $field['label'] . '</div>';
+		echo '<div class="acf-tab">' . esc_hml($field['label']) . '</div>';
 	}
-	
-	
-	
+
+
+
 	/*
 	*  create_options()
 	*
@@ -56,26 +56,26 @@ class acf_field_tab extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_options( $field )
 	{
 		?>
-		<tr class="field_option field_option_<?php echo $this->name; ?>">
+		<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 			<td class="label">
-				<label><?php _e("Instructions",'acf'); ?></label>
+				<label><?php esc_hml_e("Instructions",'acf'); ?></label>
 			</td>
 			<td>
-				<p><?php _e("Use \"Tab Fields\" to better organize your edit screen by grouping your fields together under separate tab headings.",'acf'); ?></p>
-				<p><?php _e("All the fields following this \"tab field\" (or until another \"tab field\" is defined) will be grouped together.",'acf'); ?></p>
-				<p><?php _e("Use multiple tabs to divide your fields into sections.",'acf'); ?></p>
+				<p><?php esc_hml_e("Use \"Tab Fields\" to better organize your edit screen by grouping your fields together under separate tab headings.",'acf'); ?></p>
+				<p><?php esc_hml_e("All the fields following this \"tab field\" (or until another \"tab field\" is defined) will be grouped together.",'acf'); ?></p>
+				<p><?php esc_hml_e("Use multiple tabs to divide your fields into sections.",'acf'); ?></p>
 			</td>
 		</tr>
 		<?php
-		
+
 	}
-	
+
 }
 
 new acf_field_tab();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/taxonomy.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/taxonomy.php
index e432acf..9f950cf 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/taxonomy.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/taxonomy.php
@@ -10,7 +10,7 @@ class acf_field_taxonomy extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -25,14 +25,14 @@ class acf_field_taxonomy extends acf_field
 			'multiple'			=> 0,
 			'return_format'		=> 'id'
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
-    	
+
 	}
-	
-	
+
+
 	/*
 	*  get_terms
 	*
@@ -45,37 +45,37 @@ class acf_field_taxonomy extends acf_field
 	*  @param	$value (array)
 	*  @return	$value
 	*/
-	
+
 	function get_terms( $value, $taxonomy = 'category' ) {
-		
+
 		// load terms in 1 query to save multiple DB calls from following code
 		if( count($value) > 1 ) {
-			
+
 			$terms = get_terms($taxonomy, array(
 				'hide_empty'	=> false,
 				'include'		=> $value,
 			));
-			
+
 		}
-		
-		
+
+
 		// update value to include $post
 		foreach( array_keys($value) as $i ) {
-			
+
 			$value[ $i ] = get_term( $value[ $i ], $taxonomy );
-			
+
 		}
-		
-		
+
+
 		// filter out null values
 		$value = array_filter($value);
-		
-		
+
+
 		// return
 		return $value;
 	}
-	
-	
+
+
 	/*
 	*  load_value()
 	*
@@ -91,55 +91,55 @@ class acf_field_taxonomy extends acf_field
 	*
 	*  @return	$value - the value to be saved in te database
 	*/
-	
+
 	function load_value( $value, $post_id, $field ) {
-		
+
 		// get valid terms
 		$value = acf_get_valid_terms($value, $field['taxonomy']);
-		
-		
+
+
 		// load/save
 		if( $field['load_save_terms'] ) {
-			
+
 			// bail early if no value
 			if( empty($value) ) {
-				
+
 				return $value;
-				
+
 			}
-			
-			
+
+
 			// get current ID's
 			$term_ids = wp_get_object_terms($post_id, $field['taxonomy'], array('fields' => 'ids', 'orderby' => 'none'));
-			
-			
+
+
 			// case
 			if( empty($term_ids) ) {
-				
+
 				// 1. no terms for this post
 				return null;
-				
+
 			} elseif( is_array($value) ) {
-				
+
 				// 2. remove metadata terms which are no longer for this post
 				$value = array_map('intval', $value);
 				$value = array_intersect( $value, $term_ids );
-				
+
 			} elseif( !in_array($value, $term_ids)) {
-				
+
 				// 3. term is no longer for this post
 				return null;
-				
+
 			}
-			
+
 		}
-		
-		
+
+
 		// return
 		return $value;
 	}
-	
-	
+
+
 	/*
 	*  update_value()
 	*
@@ -155,73 +155,73 @@ class acf_field_taxonomy extends acf_field
 	*
 	*  @return	$value - the modified value
 	*/
-	
+
 	function update_value( $value, $post_id, $field ) {
-		
+
 		// vars
 		if( is_array($value) ) {
-		
+
 			$value = array_filter($value);
-			
+
 		}
-		
-		
+
+
 		// load_save_terms
 		if( $field['load_save_terms'] ) {
-			
+
 			// vars
 			$taxonomy = $field['taxonomy'];
-			
-			
+
+
 			// force value to array
 			$term_ids = acf_force_type_array( $value );
-			
-			
+
+
 			// convert to int
 			$term_ids = array_map('intval', $term_ids);
-			
-			
+
+
 			// bypass $this->set_terms if called directly from update_field
 			if( !did_action('acf/save_post') ) {
-				
+
 				wp_set_object_terms( $post_id, $term_ids, $taxonomy, false );
-				
+
 				return $value;
-				
+
 			}
-			
-			
+
+
 			// initialize
 			if( empty($this->set_terms) ) {
-				
+
 				// create holder
 				$this->set_terms = array();
-				
-				
+
+
 				// add action
 				add_action('acf/save_post', array($this, 'set_terms'), 15, 1);
-				
+
 			}
-			
-			
+
+
 			// append
 			if( empty($this->set_terms[ $taxonomy ]) ) {
-				
+
 				$this->set_terms[ $taxonomy ] = array();
-				
+
 			}
-			
+
 			$this->set_terms[ $taxonomy ] = array_merge($this->set_terms[ $taxonomy ], $term_ids);
-			
+
 		}
-		
-		
+
+
 		// return
 		return $value;
-		
+
 	}
-	
-	
+
+
 	/*
 	*  set_terms
 	*
@@ -234,31 +234,31 @@ class acf_field_taxonomy extends acf_field
 	*  @param	$post_id (int)
 	*  @return	$post_id (int)
 	*/
-	
+
 	function set_terms( $post_id ) {
-		
+
 		// bail ealry if no terms
 		if( empty($this->set_terms) ) {
-			
+
 			return;
-			
+
 		}
-		
-		
+
+
 		// loop over terms
 		foreach( $this->set_terms as $taxonomy => $term_ids ){
-			
+
 			wp_set_object_terms( $post_id, $term_ids, $taxonomy, false );
-			
+
 		}
-		
-		
+
+
 		// reset array ( WP saves twice )
 		$this->set_terms = array();
-		
+
 	}
-	
-	
+
+
 	/*
 	*  format_value_for_api()
 	*
@@ -274,48 +274,48 @@ class acf_field_taxonomy extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field ) {
-		
+
 		// bail early if no value
 		if( empty($value) ) {
-			
+
 			return $value;
-		
+
 		}
-		
-		
+
+
 		// force value to array
 		$value = acf_force_type_array( $value );
-		
-		
+
+
 		// convert values to int
 		$value = array_map('intval', $value);
-		
-		
+
+
 		// load posts if needed
 		if( $field['return_format'] == 'object' ) {
-			
-			
+
+
 			// get posts
 			$value = $this->get_terms( $value, $field["taxonomy"] );
-		
+
 		}
-		
-		
+
+
 		// convert back from array if neccessary
 		if( $field['field_type'] == 'select' || $field['field_type'] == 'radio' ) {
-			
+
 			$value = array_shift($value);
-			
+
 		}
-		
+
 
 		// return
 		return $value;
 	}
 
-	
+
 	/*
 	*  create_field()
 	*
@@ -327,13 +327,13 @@ class acf_field_taxonomy extends acf_field
 	*
 	*  @param	$field - an array holding all the field's data
 	*/
-	
+
 	function create_field( $field )
 	{
 		// vars
 		$single_name = $field['name'];
-			
-			
+
+
 		// multi select?
 		if( $field['field_type'] == 'multi_select' )
 		{
@@ -345,14 +345,14 @@ class acf_field_taxonomy extends acf_field
 		{
 			$field['name'] .= '[]';
 		}
-		
+
 		// value must be array!
 		if( !is_array($field['value']) )
 		{
 			$field['value'] = array( $field['value'] );
 		}
-		
-		
+
+
 		// vars
 		$args = array(
 			'taxonomy'     => $field['taxonomy'],
@@ -360,52 +360,52 @@ class acf_field_taxonomy extends acf_field
 			'style'        => 'none',
 			'walker'       => new acf_taxonomy_field_walker( $field ),
 		);
-		
+
 		$args = apply_filters('acf/fields/taxonomy/wp_list_categories', $args, $field );
-		
+
 		?>
-<div class="acf-taxonomy-field" data-load_save="<?php echo $field['load_save_terms']; ?>">
+<div class="acf-taxonomy-field" data-load_save="<?php echo esc_attr($field['load_save_terms']) ?>">
 	<input type="hidden" name="<?php echo $single_name; ?>" value="" />
-	
+
 	<?php if( $field['field_type'] == 'select' ): ?>
-		
-		<select id="<?php echo $field['id']; ?>" name="<?php echo $field['name']; ?>" <?php if( $field['multiple'] ): ?>multiple="multiple" size="5"<?php endif; ?>>
+
+		<select id="<?php echo esc_attr($field['id']); ?>" name="<?php echo esc_attr($field['name']); ?>" <?php if( $field['multiple'] ): ?>multiple="multiple" size="5"<?php endif; ?>>
 			<?php if( $field['allow_null'] ): ?>
-				<option value=""><?php _e("None", 'acf'); ?></option>
+				<option value=""><?php esc_html_e("None", 'acf'); ?></option>
 			<?php endif; ?>
-	
+
 	<?php else: ?>
 		<div class="categorychecklist-holder">
 		<ul class="acf-checkbox-list">
 			<?php if( $field['allow_null'] ): ?>
 				<li>
 					<label class="selectit">
-						<input type="<?php echo $field['field_type']; ?>" name="<?php echo $field['name']; ?>" value="" /> <?php _e("None", 'acf'); ?>
+						<input type="<?php echo esc_attr($field['field_type']) ?>" name="<?php echo esc_attr($field['name']) ?>" value="" /> <?php esc_html_e("None", 'acf'); ?>
 					</label>
 				</li>
 			<?php endif; ?>
-	
+
 	<?php endif; ?>
-			
+
 			<?php wp_list_categories( $args ); ?>
-	
+
 	<?php if( $field['field_type'] == 'select' ): ?>
-	
+
 		</select>
-	
+
 	<?php else: ?>
-	
+
 		</ul>
 		</div>
-		
+
 	<?php endif; ?>
 
 </div>
 	<?php
-	
+
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -418,56 +418,56 @@ class acf_field_taxonomy extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Taxonomy",'acf'); ?></label>
+		<label><?php esc_html_e("Taxonomy",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		// vars
 		$choices = array();
 		$taxonomies = get_taxonomies( array(), 'objects' );
 		$ignore = array( 'post_format', 'nav_menu', 'link_category' );
-		
-		
+
+
 		foreach( $taxonomies as $taxonomy )
 		{
 			if( in_array($taxonomy->name, $ignore) )
 			{
 				continue;
 			}
-			
+
 			$choices[ $taxonomy->name ] = $taxonomy->name;
 		}
-		
-				
+
+
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
-			'name'	=>	'fields['.$key.'][taxonomy]',
+			'name'	=>	'fields['. esc_attr($key) .'][taxonomy]',
 			'value'	=>	$field['taxonomy'],
 			'choices' => $choices,
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Field Type",'acf'); ?></label>
+		<label><?php esc_html_e("Field Type",'acf'); ?></label>
 	</td>
 	<td>
-		<?php	
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
-			'name'	=>	'fields['.$key.'][field_type]',
+			'name'	=>	'fields['. esc_attr($key) .'][field_type]',
 			'value'	=>	$field['field_type'],
 			'optgroup' => true,
 			'choices' => array(
@@ -484,15 +484,15 @@ class acf_field_taxonomy extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Allow Null?",'acf'); ?></label>
+		<label><?php esc_html_e("Allow Null?",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'radio',
-			'name'	=>	'fields['.$key.'][allow_null]',
+			'name'	=>	'fields['. esc_attr($key) .'][allow_null]',
 			'value'	=>	$field['allow_null'],
 			'choices'	=>	array(
 				1	=>	__("Yes",'acf'),
@@ -503,30 +503,30 @@ class acf_field_taxonomy extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Load & Save Terms to Post",'acf'); ?></label>
+		<label><?php esc_html_e("Load & Save Terms to Post",'acf'); ?></label>
 	</td>
 	<td>
-		<?php	
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'true_false',
-			'name'	=>	'fields['.$key.'][load_save_terms]',
+			'name'	=>	'fields['. esc_attr($key) .'][load_save_terms]',
 			'value'	=>	$field['load_save_terms'],
 			'message' => __("Load value based on the post's terms and update the post's terms on save",'acf')
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Return Value",'acf'); ?></label>
+		<label><?php esc_html_e("Return Value",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
 		do_action('acf/create_field', array(
 			'type'		=>	'radio',
-			'name'		=>	'fields['.$key.'][return_format]',
+			'name'		=>	'fields['. esc_attr($key) .'][return_format]',
 			'value'		=>	$field['return_format'],
 			'layout'	=>	'horizontal',
 			'choices'	=> array(
@@ -538,10 +538,10 @@ class acf_field_taxonomy extends acf_field
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
-		
+
+
 }
 
 new acf_field_taxonomy();
@@ -561,30 +561,30 @@ class acf_taxonomy_field_walker extends Walker
 		$this->field = $field;
 	}
 
-	
+
 	// start_el
 	function start_el( &$output, $term, $depth = 0, $args = array(), $current_object_id = 0)
 	{
 		// vars
 		$selected = in_array( $term->term_id, $this->field['value'] );
-		
+
 		if( $this->field['field_type'] == 'checkbox' )
 		{
-			$output .= '<li><label class="selectit"><input type="checkbox" name="' . $this->field['name'] . '" value="' . $term->term_id . '" ' . ($selected ? 'checked="checked"' : '') . ' /> ' . $term->name . '</label>';
+			$output .= '<li><label class="selectit"><input type="checkbox" name="' . esc_attr($this->field['name']) . '" value="' . esc_attr($term->term_id) . '" ' . ($selected ? 'checked="checked"' : '') . ' /> ' . esc_html($term->name) . '</label>';
 		}
 		elseif( $this->field['field_type'] == 'radio' )
 		{
-			$output .= '<li><label class="selectit"><input type="radio" name="' . $this->field['name'] . '" value="' . $term->term_id . '" ' . ($selected ? 'checked="checkbox"' : '') . ' /> ' . $term->name . '</label>';
+			$output .= '<li><label class="selectit"><input type="radio" name="' . esc_attr($this->field['name']) . '" value="' . esc_attr($term->term_id) . '" ' . ($selected ? 'checked="checkbox"' : '') . ' /> ' . esc_html($term->name) . '</label>';
 		}
 		elseif( $this->field['field_type'] == 'select' )
 		{
 			$indent = str_repeat("&mdash; ", $depth);
-			$output .= '<option value="' . $term->term_id . '" ' . ($selected ? 'selected="selected"' : '') . '>' . $indent . $term->name . '</option>';
+			$output .= '<option value="' . esc_attr($term->term_id) . '" ' . ($selected ? 'selected="selected"' : '') . '>' . esc_html($indent . $term->name) . '</option>';
 		}
-		
+
 	}
-	
-	
+
+
 	//end_el
 	function end_el( &$output, $term, $depth = 0, $args = array() )
 	{
@@ -592,18 +592,18 @@ class acf_taxonomy_field_walker extends Walker
 		{
 			$output .= '</li>';
 		}
-		
+
 		$output .= "\n";
 	}
-	
-	
+
+
 	// start_lvl
 	function start_lvl( &$output, $depth = 0, $args = array() )
 	{
 		// indent
 		//$output .= str_repeat( "\t", $depth);
-		
-		
+
+
 		// wrap element
 		if( in_array($this->field['field_type'], array('checkbox', 'radio')) )
 		{
@@ -611,21 +611,21 @@ class acf_taxonomy_field_walker extends Walker
 		}
 	}
 
-	
+
 	// end_lvl
 	function end_lvl( &$output, $depth = 0, $args = array() )
 	{
 		// indent
 		//$output .= str_repeat( "\t", $depth);
-		
-		
+
+
 		// wrap element
 		if( in_array($this->field['field_type'], array('checkbox', 'radio')) )
 		{
 			$output .= '</ul>' . "\n";
 		}
 	}
-	
+
 }
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/text.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/text.php
index 0f43e2f..2bfb220 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/text.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/text.php
@@ -2,7 +2,7 @@
 
 class acf_field_text extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_text extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -25,14 +25,14 @@ class acf_field_text extends acf_field
 			'prepend'		=>	'',
 			'append'		=>	''
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
 	}
-	
-	
-	
+
+
+
 	/*
 	*  create_field()
 	*
@@ -44,54 +44,54 @@ class acf_field_text extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// vars
 		$o = array( 'id', 'class', 'name', 'value', 'placeholder' );
 		$e = '';
-		
-		
+
+
 		// maxlength
 		if( $field['maxlength'] !== "" )
 		{
 			$o[] = 'maxlength';
 		}
-		
-		
+
+
 		// prepend
 		if( $field['prepend'] !== "" )
 		{
 			$field['class'] .= ' acf-is-prepended';
-			$e .= '<div class="acf-input-prepend">' . $field['prepend'] . '</div>';
+			$e .= '<div class="acf-input-prepend">' . esc_html($field['prepend']) . '</div>';
 		}
-		
-		
+
+
 		// append
 		if( $field['append'] !== "" )
 		{
 			$field['class'] .= ' acf-is-appended';
-			$e .= '<div class="acf-input-append">' . $field['append'] . '</div>';
+			$e .= '<div class="acf-input-append">' . esc_html($field['append']) . '</div>';
 		}
-		
-		
+
+
 		$e .= '<div class="acf-input-wrap">';
 		$e .= '<input type="text"';
-		
+
 		foreach( $o as $k )
 		{
-			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';	
+			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';
 		}
-		
+
 		$e .= ' />';
 		$e .= '</div>';
-		
-		
+
+
 		// return
 		echo $e;
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -104,83 +104,83 @@ class acf_field_text extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Default Value",'acf'); ?></label>
-		<p><?php _e("Appears when creating a new post",'acf') ?></p>
+		<label><?php esc_html_e("Default Value",'acf'); ?></label>
+		<p><?php esc_html_e("Appears when creating a new post",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][default_value]',
+			'name'	=>	'fields[' . esc_attr($key) .'][default_value]',
 			'value'	=>	$field['default_value'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Placeholder Text",'acf'); ?></label>
-		<p><?php _e("Appears within the input",'acf') ?></p>
+		<label><?php esc_html_e("Placeholder Text",'acf'); ?></label>
+		<p><?php esc_html_e("Appears within the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][placeholder]',
+			'name'	=>	'fields[' . esc_attr($key) .'][placeholder]',
 			'value'	=>	$field['placeholder'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Prepend",'acf'); ?></label>
-		<p><?php _e("Appears before the input",'acf') ?></p>
+		<label><?php esc_html_e("Prepend",'acf'); ?></label>
+		<p><?php esc_html_e("Appears before the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][prepend]',
+			'name'	=>	'fields[' . esc_attr($key) .'][prepend]',
 			'value'	=>	$field['prepend'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name) ?>">
 	<td class="label">
-		<label><?php _e("Append",'acf'); ?></label>
-		<p><?php _e("Appears after the input",'acf') ?></p>
+		<label><?php esc_html_e("Append",'acf'); ?></label>
+		<p><?php esc_html_e("Appears after the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][append]',
+			'name'	=>	'fields[' . esc_attr($key) .'][append]',
 			'value'	=>	$field['append'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Formatting",'acf'); ?></label>
-		<p><?php _e("Affects value on front end",'acf') ?></p>
+		<label><?php esc_html_e("Formatting",'acf'); ?></label>
+		<p><?php esc_html_e("Affects value on front end",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
-			'name'	=>	'fields['.$key.'][formatting]',
+			'name'	=>	'fields['. esc_attr($key) .'][formatting]',
 			'value'	=>	$field['formatting'],
 			'choices' => array(
 				'none'	=>	__("No formatting",'acf'),
@@ -190,26 +190,26 @@ class acf_field_text extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Character Limit",'acf'); ?></label>
-		<p><?php _e("Leave blank for no limit",'acf') ?></p>
+		<label><?php esc_html_e("Character Limit",'acf'); ?></label>
+		<p><?php esc_html_e("Leave blank for no limit",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'number',
-			'name'	=>	'fields[' .$key.'][maxlength]',
+			'name'	=>	'fields[' . esc_attr($key) .'][maxlength]',
 			'value'	=>	$field['maxlength'],
 		));
 		?>
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  format_value()
 	*
@@ -225,15 +225,15 @@ class acf_field_text extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value( $value, $post_id, $field )
 	{
 		$value = htmlspecialchars($value, ENT_QUOTES);
-		
+
 		return $value;
 	}
-	
-	
+
+
 	/*
 	*  format_value_for_api()
 	*
@@ -249,7 +249,7 @@ class acf_field_text extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field )
 	{
 		// validate type
@@ -257,8 +257,8 @@ class acf_field_text extends acf_field
 		{
 			return $value;
 		}
-		
-		
+
+
 		if( $field['formatting'] == 'none' )
 		{
 			$value = htmlspecialchars($value, ENT_QUOTES);
@@ -267,13 +267,13 @@ class acf_field_text extends acf_field
 		{
 			$value = nl2br($value);
 		}
-		
-		
+
+
 		return $value;
 	}
-	
+
 }
 
 new acf_field_text();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/textarea.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/textarea.php
index 18d9618..6698bc0 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/textarea.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/textarea.php
@@ -2,7 +2,7 @@
 
 class acf_field_textarea extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_textarea extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -24,13 +24,13 @@ class acf_field_textarea extends acf_field
 			'placeholder'	=> '',
 			'rows'			=> ''
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -42,21 +42,21 @@ class acf_field_textarea extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// vars
 		$o = array( 'id', 'class', 'name', 'placeholder', 'rows' );
 		$e = '';
-		
-		
+
+
 		// maxlength
 		if( $field['maxlength'] !== "" )
 		{
 			$o[] = 'maxlength';
 		}
-		
-		
+
+
 		// rows
 		if( empty($field['rows']) )
 		{
@@ -64,21 +64,21 @@ class acf_field_textarea extends acf_field
 		}
 
 		$e .= '<textarea';
-		
+
 		foreach( $o as $k )
 		{
-			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';	
+			$e .= ' ' . $k . '="' . esc_attr( $field[ $k ] ) . '"';
 		}
-		
+
 		$e .= '>';
 		$e .= esc_textarea($field['value']);
 		$e .= '</textarea>';
-		
+
 		// return
 		echo $e;
-		
+
 	}
-	
+
 	/*
 	*  create_options()
 	*
@@ -91,84 +91,84 @@ class acf_field_textarea extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
 
 ?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Default Value",'acf'); ?></label>
-		<p><?php _e("Appears when creating a new post",'acf') ?></p>
+		<label><?php esc_html_e("Default Value",'acf'); ?></label>
+		<p><?php esc_html_e("Appears when creating a new post",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'textarea',
-			'name'	=>	'fields['.$key.'][default_value]',
+			'name'	=>	'fields['. esc_attr($key) .'][default_value]',
 			'value'	=>	$field['default_value'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name) ?>">
 	<td class="label">
-		<label><?php _e("Placeholder Text",'acf'); ?></label>
-		<p><?php _e("Appears within the input",'acf') ?></p>
+		<label><?php esc_html_e("Placeholder Text",'acf'); ?></label>
+		<p><?php esc_html_e("Appears within the input",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields[' .$key.'][placeholder]',
+			'name'	=>	'fields[' . esc_attr($key) .'][placeholder]',
 			'value'	=>	$field['placeholder'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Character Limit",'acf'); ?></label>
-		<p><?php _e("Leave blank for no limit",'acf') ?></p>
+		<label><?php esc_html_e("Character Limit",'acf'); ?></label>
+		<p><?php esc_html_e("Leave blank for no limit",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'number',
-			'name'	=>	'fields[' .$key.'][maxlength]',
+			'name'	=>	'fields[' . esc_attr($key) .'][maxlength]',
 			'value'	=>	$field['maxlength'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Rows",'acf'); ?></label>
-		<p><?php _e("Sets the textarea height",'acf') ?></p>
+		<label><?php esc_html_e("Rows",'acf'); ?></label>
+		<p><?php esc_html_e("Sets the textarea height",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'			=> 'number',
-			'name'			=> 'fields[' .$key.'][rows]',
+			'name'			=> 'fields[' . esc_attr($key) .'][rows]',
 			'value'			=> $field['rows'],
 			'placeholder'	=> 8
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Formatting",'acf'); ?></label>
-		<p><?php _e("Affects value on front end",'acf') ?></p>
+		<label><?php esc_html_e("Formatting",'acf'); ?></label>
+		<p><?php esc_html_e("Affects value on front end",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
-			'name'	=>	'fields['.$key.'][formatting]',
+			'name'	=>	'fields['. esc_attr($key) .'][formatting]',
 			'value'	=>	$field['formatting'],
 			'choices' => array(
 				'none'	=>	__("No formatting",'acf'),
@@ -180,10 +180,10 @@ class acf_field_textarea extends acf_field
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  format_value_for_api()
 	*
@@ -199,7 +199,7 @@ class acf_field_textarea extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field )
 	{
 		// validate type
@@ -207,8 +207,8 @@ class acf_field_textarea extends acf_field
 		{
 			return $value;
 		}
-		
-		
+
+
 		if( $field['formatting'] == 'none' )
 		{
 			$value = htmlspecialchars($value, ENT_QUOTES);
@@ -223,13 +223,13 @@ class acf_field_textarea extends acf_field
 			$value = htmlspecialchars($value, ENT_QUOTES);
 			$value = nl2br($value);
 		}
-		
-		
+
+
 		return $value;
 	}
-	
+
 }
 
 new acf_field_textarea();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/true_false.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/true_false.php
index 3e49a6d..0e109b8 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/true_false.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/true_false.php
@@ -2,7 +2,7 @@
 
 class acf_field_true_false extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_true_false extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -22,14 +22,14 @@ class acf_field_true_false extends acf_field
 			'default_value'	=>	0,
 			'message'	=>	'',
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
-  
+
 	}
-		
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -41,19 +41,19 @@ class acf_field_true_false extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field )
 	{
 		// html
-		echo '<ul class="acf-checkbox-list ' . $field['class'] . '">';
-			echo '<input type="hidden" name="'.$field['name'].'" value="0" />';
+		echo '<ul class="acf-checkbox-list ' . esc_attr($field['class']) . '">';
+			echo '<input type="hidden" name="'. esc_attr($field['name']) .'" value="0" />';
 			$selected = ($field['value'] == 1) ? 'checked="yes"' : '';
-			echo '<li><label><input id="' . $field['id'] . '-1"  type="checkbox" name="'.$field['name'].'" value="1" ' . $selected . ' />' . $field['message'] . '</label></li>';
-		
+			echo '<li><label><input id="' . $field['id'] . '-1"  type="checkbox" name="'. esc_attr($field['name']) .'" value="1" ' . $selected . ' />' . esc_html( $field['message'] ) . '</label></li>';
+
 		echo '</ul>';
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -66,50 +66,50 @@ class acf_field_true_false extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
-		
+
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Message",'acf'); ?></label>
-		<p class="description"><?php _e("eg. Show extra content",'acf'); ?></a></p>
+		<label><?php esc_html_e("Message",'acf'); ?></label>
+		<p class="description"><?php esc_html_e("eg. Show extra content",'acf'); ?></a></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'text',
-			'name'	=>	'fields['.$key.'][message]',
+			'name'	=>	'fields['. esc_attr($key) .'][message]',
 			'value'	=>	$field['message'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name) ?>">
 	<td class="label">
-		<label><?php _e("Default Value",'acf'); ?></label>
+		<label><?php esc_html_e("Default Value",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'true_false',
-			'name'	=>	'fields['.$key.'][default_value]',
+			'name'	=>	'fields['. esc_attr($key) .'][default_value]',
 			'value'	=>	$field['default_value'],
 		));
-		
+
 		?>
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  format_value_for_api()
 	*
@@ -125,16 +125,16 @@ class acf_field_true_false extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field )
 	{
 		$value = ($value == 1) ? true : false;
-		
+
 		return $value;
 	}
-	
+
 }
 
 new acf_field_true_false();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/user.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/user.php
index 7400e44..25d9a01 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/user.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/user.php
@@ -10,7 +10,7 @@ class acf_field_user extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -22,14 +22,14 @@ class acf_field_user extends acf_field
 			'field_type' 	=> 'select',
 			'allow_null' 	=> 0,
 		);
-		
-		
+
+
 		// do not delete!
     	parent::__construct();
-    	
+
 	}
 
-	
+
 	/*
 	*  format_value_for_api()
 	*
@@ -44,7 +44,7 @@ class acf_field_user extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field )
 	{
 
@@ -53,22 +53,22 @@ class acf_field_user extends acf_field
 		{
 			return false;
 		}
-		
-		
+
+
 		// temp convert to array
 		$is_array = true;
-		
+
 		if( !is_array($value) )
 		{
 			$is_array = false;
 			$value = array( $value );
 		}
 
-		
+
 		foreach( $value as $k => $v )
 		{
 			$user_data = get_userdata( $v );
-			
+
 			//cope with deleted users by @adampope
 			if( !is_object($user_data) )
 			{
@@ -76,7 +76,7 @@ class acf_field_user extends acf_field
 				continue;
 			}
 
-			
+
 			$value[ $k ] = array();
 			$value[ $k ]['ID'] = $v;
 			$value[ $k ]['user_firstname'] = $user_data->user_firstname;
@@ -89,23 +89,23 @@ class acf_field_user extends acf_field
 			$value[ $k ]['user_registered'] = $user_data->user_registered;
 			$value[ $k ]['user_description'] = $user_data->user_description;
 			$value[ $k ]['user_avatar'] = get_avatar( $v );
-			
+
 		}
-		
-		
+
+
 		// de-convert from array
 		if( !$is_array && isset($value[0]) )
 		{
 			$value = $value[0];
 		}
-		
+
 
 		// return value
 		return $value;
-		
+
 	}
-	
-	
+
+
 	/*
 	*  input_admin_head()
 	*
@@ -121,13 +121,13 @@ class acf_field_user extends acf_field
 	function input_admin_head()
 	{
 		if( ! function_exists( 'get_editable_roles' ) )
-		{ 
+		{
 			// if using front-end forms then we need to add this core file
-			require_once( ABSPATH . '/wp-admin/includes/user.php' ); 
+			require_once( ABSPATH . '/wp-admin/includes/user.php' );
 		}
 	}
-	
-	
+
+
 	/*
 	*  create_field()
 	*
@@ -139,28 +139,28 @@ class acf_field_user extends acf_field
 	*
 	*  @param	$field - an array holding all the field's data
 	*/
-	
+
 	function create_field( $field )
 	{
 		if( ! function_exists( 'get_editable_roles' ) )
-		{ 
+		{
 			// if using front-end forms then we need to add this core file
-			require_once( ABSPATH . '/wp-admin/includes/user.php' ); 
+			require_once( ABSPATH . '/wp-admin/includes/user.php' );
 		}
-		
+
 		// options
    		$options = array(
 			'post_id' => get_the_ID(),
 		);
-		
-		
+
+
 		// vars
 		$args = array();
-		
-		
+
+
 		// editable roles
 		$editable_roles = get_editable_roles();
-		
+
 		if( !empty($field['role']) )
 		{
 			if( ! in_array('all', $field['role']) )
@@ -173,30 +173,30 @@ class acf_field_user extends acf_field
 					}
 				}
 			}
-			
+
 		}
-		
+
 		// filters
 		$args = apply_filters('acf/fields/user/query', $args, $field, $options['post_id']);
 		$args = apply_filters('acf/fields/user/query/name=' . $field['_name'], $args, $field, $options['post_id'] );
 		$args = apply_filters('acf/fields/user/query/key=' . $field['key'], $args, $field, $options['post_id'] );
-		
-		
+
+
 		// get users
 		$users = get_users( $args );
-		
-		
+
+
 		if( !empty($users) && !empty($editable_roles) )
 		{
 			$field['choices'] = array();
-			
+
 			foreach( $editable_roles as $role => $role_info )
 			{
 				// vars
 				$this_users = array();
 				$this_json = array();
-				
-				
+
+
 				// loop over users
 				$keys = array_keys($users);
 				foreach( $keys as $key )
@@ -207,46 +207,46 @@ class acf_field_user extends acf_field
 						unset( $users[ $key ] );
 					}
 				}
-				
-				
+
+
 				// bail early if no users for this role
 				if( empty($this_users) )
 				{
 					continue;
 				}
-				
-				
+
+
 				// label
 				$label = translate_user_role( $role_info['name'] );
-				
-				
+
+
 				// append to choices
 				$field['choices'][ $label ] = array();
-				
+
 				foreach( $this_users as $user )
 				{
 					$field['choices'][ $label ][ $user->ID ] = ucfirst( $user->display_name );
 				}
-				
+
 			}
 		}
-		
-		
+
+
 		// modify field
 		if( $field['field_type'] == 'multi_select' )
 		{
 			$field['multiple'] = 1;
 		}
-		
-		
+
+
 		$field['type'] = 'select';
-		
-		
-		do_action('acf/create_field', $field);			
-		
+
+
+		do_action('acf/create_field', $field);
+
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -259,49 +259,49 @@ class acf_field_user extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e( "Filter by role", 'acf' ); ?></label>
+		<label><?php esc_html_e( "Filter by role", 'acf' ); ?></label>
 	</td>
 	<td>
-		<?php 
-		
+		<?php
+
 		$choices = array('all' => __('All', 'acf'));
 		$editable_roles = get_editable_roles();
 
 		foreach( $editable_roles as $role => $details )
-		{			
+		{
 			// only translate the output not the value
 			$choices[$role] = translate_user_role( $details['name'] );
 		}
 
 		do_action('acf/create_field', array(
 			'type' => 'select',
-			'name' => 'fields[' . $key . '][role]',
+			'name' => 'fields[' . esc_attr($key) . '][role]',
 			'value'	=> $field['role'],
 			'choices' => $choices,
 			'multiple' => '1',
 		));
-		
+
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Field Type",'acf'); ?></label>
+		<label><?php esc_html_e("Field Type",'acf'); ?></label>
 	</td>
 	<td>
-		<?php	
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'select',
-			'name'	=>	'fields['.$key.'][field_type]',
+			'name'	=>	'fields['. esc_attr($key) .'][field_type]',
 			'value'	=>	$field['field_type'],
 			'choices' => array(
 				__("Multiple Values",'acf') => array(
@@ -317,15 +317,15 @@ class acf_field_user extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name) ?>">
 	<td class="label">
-		<label><?php _e("Allow Null?",'acf'); ?></label>
+		<label><?php esc_html_e("Allow Null?",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'radio',
-			'name'	=>	'fields['.$key.'][allow_null]',
+			'name'	=>	'fields['. esc_attr($key) .'][allow_null]',
 			'value'	=>	$field['allow_null'],
 			'choices'	=>	array(
 				1	=>	__("Yes",'acf'),
@@ -337,10 +337,10 @@ class acf_field_user extends acf_field
 	</td>
 </tr>
 		<?php
-		
+
 	}
-	
-	
+
+
 	/*
 	*  update_value()
 	*
@@ -356,27 +356,27 @@ class acf_field_user extends acf_field
 	*
 	*  @return	$value - the modified value
 	*/
-	
+
 	function update_value( $value, $post_id, $field )
 	{
 		// array?
 		if( is_array($value) && isset($value['ID']) )
 		{
-			$value = $value['ID'];	
+			$value = $value['ID'];
 		}
-		
+
 		// object?
 		if( is_object($value) && isset($value->ID) )
 		{
 			$value = $value->ID;
 		}
-		
+
 		return $value;
 	}
-	
-		
+
+
 }
 
 new acf_field_user();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/fields/wysiwyg.php b/html/wp-content/plugins/advanced-custom-fields/core/fields/wysiwyg.php
index 9ab8186..01d9adf 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/fields/wysiwyg.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/fields/wysiwyg.php
@@ -2,7 +2,7 @@
 
 class acf_field_wysiwyg extends acf_field
 {
-	
+
 	/*
 	*  __construct
 	*
@@ -11,7 +11,7 @@ class acf_field_wysiwyg extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function __construct()
 	{
 		// vars
@@ -23,16 +23,16 @@ class acf_field_wysiwyg extends acf_field
 			'media_upload' 	=>	'yes',
 			'default_value'	=>	'',
 		);
-		
-		
+
+
 		// Create an acf version of the_content filter (acf_the_content)
 		if(	isset($GLOBALS['wp_embed']) ) {
-			
+
 			add_filter( 'acf_the_content', array( $GLOBALS['wp_embed'], 'run_shortcode' ), 8 );
 			add_filter( 'acf_the_content', array( $GLOBALS['wp_embed'], 'autoembed' ), 8 );
-			
+
 		}
-		
+
 		add_filter( 'acf_the_content', 'capital_P_dangit', 11 );
 		add_filter( 'acf_the_content', 'wptexturize' );
 		add_filter( 'acf_the_content', 'convert_smilies' );
@@ -41,19 +41,19 @@ class acf_field_wysiwyg extends acf_field
 		add_filter( 'acf_the_content', 'shortcode_unautop' );
 		//add_filter( 'acf_the_content', 'prepend_attachment' ); *should only be for the_content (causes double image on attachment page)
 		add_filter( 'acf_the_content', 'do_shortcode', 11);
-		
+
 
 		// do not delete!
     	parent::__construct();
-    	
-    	
+
+
 		// filters
     	add_filter( 'acf/fields/wysiwyg/toolbars', array( $this, 'toolbars'), 1, 1 );
     	add_filter( 'mce_external_plugins', array( $this, 'mce_external_plugins'), 20, 1 );
-    	
+
 	}
-	
-	
+
+
 	/*
 	*  mce_external_plugins
 	*
@@ -66,28 +66,28 @@ class acf_field_wysiwyg extends acf_field
 	*  @param	$post_id (int)
 	*  @return	$post_id (int)
 	*/
-	
+
 	function mce_external_plugins( $plugins ){
-		
+
 		// global
    		global $wp_version;
-   		
-   		
+
+
    		// WP 3.9 an above
    		if( version_compare($wp_version, '3.9', '>=' ) ) {
-			
+
 			// add code
 			$plugins['code'] = apply_filters('acf/get_info', 'dir') . 'js/tinymce.code.min.js';
-		
+
 		}
-		
-		
+
+
 		// return
 		return $plugins;
-		
+
 	}
-	
-	
+
+
 	/*
 	*  toolbars()
 	*
@@ -101,74 +101,74 @@ class acf_field_wysiwyg extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
    	function toolbars( $toolbars ) {
-   		
+
    		// global
    		global $wp_version;
-   		
-   		
+
+
    		// vars
    		$editor_id = 'acf_settings';
-   		
-   		
+
+
    		if( version_compare($wp_version, '3.9', '>=' ) ) {
-   		
+
    			// Full
 	   		$toolbars['Full'] = array(
-	   			
+
 	   			1 => apply_filters( 'mce_buttons', array('bold', 'italic', 'strikethrough', 'bullist', 'numlist', 'blockquote', 'hr', 'alignleft', 'aligncenter', 'alignright', 'link', 'unlink', 'wp_more', 'spellchecker', 'fullscreen', 'wp_adv' ), $editor_id ),
-	   			
+
 	   			2 => apply_filters( 'mce_buttons_2', array( 'formatselect', 'underline', 'alignjustify', 'forecolor', 'pastetext', 'removeformat', 'charmap', 'outdent', 'indent', 'undo', 'redo', 'wp_help', 'code' ), $editor_id ),
-	   			
+
 	   			3 => apply_filters('mce_buttons_3', array(), $editor_id),
-	   			
+
 	   			4 => apply_filters('mce_buttons_4', array(), $editor_id),
-	   			
+
 	   		);
-	   		
-	   		
+
+
 	   		// Basic
 	   		$toolbars['Basic'] = array(
-	   			
+
 	   			1 => apply_filters( 'teeny_mce_buttons', array('bold', 'italic', 'underline', 'blockquote', 'strikethrough', 'bullist', 'numlist', 'alignleft', 'aligncenter', 'alignright', 'undo', 'redo', 'link', 'unlink', 'fullscreen'), $editor_id ),
-	   			
+
 	   		);
-	   		  		
+
    		} else {
-	   		
+
 	   		// Full
 	   		$toolbars['Full'] = array(
-	   			
+
 	   			1 => apply_filters( 'mce_buttons', array('bold', 'italic', 'strikethrough', 'bullist', 'numlist', 'blockquote', 'justifyleft', 'justifycenter', 'justifyright', 'link', 'unlink', 'wp_more', 'spellchecker', 'fullscreen', 'wp_adv' ), $editor_id ),
-	   			
+
 	   			2 => apply_filters( 'mce_buttons_2', array( 'formatselect', 'underline', 'justifyfull', 'forecolor', 'pastetext', 'pasteword', 'removeformat', 'charmap', 'outdent', 'indent', 'undo', 'redo', 'wp_help', 'code' ), $editor_id ),
-	   			
+
 	   			3 => apply_filters('mce_buttons_3', array(), $editor_id),
-	   			
+
 	   			4 => apply_filters('mce_buttons_4', array(), $editor_id),
-	   			
+
 	   		);
 
-	   		
+
 	   		// Basic
 	   		$toolbars['Basic'] = array(
-	   			
+
 	   			1 => apply_filters( 'teeny_mce_buttons', array('bold', 'italic', 'underline', 'blockquote', 'strikethrough', 'bullist', 'numlist', 'justifyleft', 'justifycenter', 'justifyright', 'undo', 'redo', 'link', 'unlink', 'fullscreen'), $editor_id ),
-	   			
+
 	   		);
-	   		
+
    		}
-   		
-   		
-   		
+
+
+
    		// Custom - can be added with acf/fields/wysiwyg/toolbars filter
-   	
-   		
+
+
 	   	return $toolbars;
    	}
-   	
-   	
+
+
    	/*
 	*  input_admin_head()
 	*
@@ -180,12 +180,12 @@ class acf_field_wysiwyg extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-   	
+
    	function input_admin_head()
    	{
    		add_action( 'admin_footer', array( $this, 'admin_footer') );
    	}
-   	
+
    	function admin_footer()
    	{
 	   	?>
@@ -194,8 +194,8 @@ class acf_field_wysiwyg extends acf_field
 </div>
 	   	<?php
    	}
-   	
-   	
+
+
    	/*
 	*  create_field()
 	*
@@ -207,62 +207,62 @@ class acf_field_wysiwyg extends acf_field
 	*  @since	3.6
 	*  @date	23/01/13
 	*/
-	
+
 	function create_field( $field ) {
-		
+
 		// global
    		global $wp_version;
-		
-		
+
+
 		// vars
 		//$id = uniqid('acf-editor-');
 		$id = 'wysiwyg-' . $field['id'] . '-' . uniqid();
 		$default_editor = 'tinymce';
-				
-		
+
+
 		// filter value for editor
 		remove_filter( 'acf_the_editor_content', 'format_for_editor', 10, 2 );
 		remove_filter( 'acf_the_editor_content', 'wp_htmledit_pre', 10, 1 );
 		remove_filter( 'acf_the_editor_content', 'wp_richedit_pre', 10, 1 );
-		
-		
+
+
 		// WP 4.3
 		if( version_compare($wp_version, '4.3', '>=' ) ) {
-			
+
 			add_filter( 'acf_the_editor_content', 'format_for_editor', 10, 2 );
-			
-			
+
+
 		// WP < 4.3
 		} else {
-			
+
 			$function = user_can_richedit() ? 'wp_richedit_pre' : 'wp_htmledit_pre';
-			
+
 			add_filter('acf_the_editor_content', $function, 10, 1);
-			
+
 		}
-		
-		
+
+
 		// filter
 		$field['value'] = apply_filters( 'acf_the_editor_content', $field['value'], $default_editor );
-		
+
 		?>
-		<div id="wp-<?php echo $id; ?>-wrap" class="acf_wysiwyg wp-core-ui wp-editor-wrap tmce-active" data-toolbar="<?php echo $field['toolbar']; ?>" data-upload="<?php echo $field['media_upload']; ?>">
-			<div id="wp-<?php echo $id; ?>-editor-tools" class="wp-editor-tools hide-if-no-js">
+		<div id="wp-<?php echo esc_attr($id); ?>-wrap" class="acf_wysiwyg wp-core-ui wp-editor-wrap tmce-active" data-toolbar="<?php echo esc_attr($field['toolbar']); ?>" data-upload="<?php echo esc_attr($field['media_upload']); ?>">
+			<div id="wp-<?php echo esc_attr($id); ?>-editor-tools" class="wp-editor-tools hide-if-no-js">
 				<?php if( user_can_richedit() && $field['media_upload'] == 'yes' ): ?>
-				<div id="wp-<?php echo $id; ?>-media-buttons" class="wp-media-buttons">
+				<div id="wp-<?php echo esc_attr($id); ?>-media-buttons" class="wp-media-buttons">
 					<?php do_action( 'media_buttons', $id ); ?>
 				</div>
 				<?php endif; ?>
 			</div>
-			<div id="wp-<?php echo $id; ?>-editor-container" class="wp-editor-container">
-				<textarea id="<?php echo $id; ?>" class="wp-editor-area" name="<?php echo $field['name']; ?>"><?php echo $field['value']; ?></textarea>
+			<div id="wp-<?php echo esc_attr($id); ?>-editor-container" class="wp-editor-container">
+				<textarea id="<?php echo esc_attr($id); ?>" class="wp-editor-area" name="<?php echo esc_attr($field['name']); ?>"><?php echo esc_textarea($field['value']); ?></textarea>
 			</div>
 		</div>
 		<?php
-			
+
 	}
-	
-	
+
+
 	/*
 	*  create_options()
 	*
@@ -275,38 +275,38 @@ class acf_field_wysiwyg extends acf_field
 	*
 	*  @param	$field	- an array holding all the field's data
 	*/
-	
+
 	function create_options( $field )
 	{
 		// vars
 		$key = $field['name'];
-		
+
 		?>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Default Value",'acf'); ?></label>
-		<p><?php _e("Appears when creating a new post",'acf') ?></p>
+		<label><?php esc_html_e("Default Value",'acf'); ?></label>
+		<p><?php esc_html_e("Appears when creating a new post",'acf') ?></p>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'textarea',
-			'name'	=>	'fields['.$key.'][default_value]',
+			'name'	=>	'fields['. esc_attr($key) .'][default_value]',
 			'value'	=>	$field['default_value'],
 		));
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Toolbar",'acf'); ?></label>
+		<label><?php esc_html_e("Toolbar",'acf'); ?></label>
 	</td>
 	<td>
 		<?php
-		
+
 		$toolbars = apply_filters( 'acf/fields/wysiwyg/toolbars', array() );
 		$choices = array();
-		
+
 		if( is_array($toolbars) )
 		{
 			foreach( $toolbars as $k => $v )
@@ -314,14 +314,14 @@ class acf_field_wysiwyg extends acf_field
 				$label = $k;
 				$name = sanitize_title( $label );
 				$name = str_replace('-', '_', $name);
-				
+
 				$choices[ $name ] = $label;
 			}
 		}
-		
+
 		do_action('acf/create_field', array(
 			'type'	=>	'radio',
-			'name'	=>	'fields['.$key.'][toolbar]',
+			'name'	=>	'fields['. esc_attr($key) .'][toolbar]',
 			'value'	=>	$field['toolbar'],
 			'layout'	=>	'horizontal',
 			'choices' => $choices
@@ -329,15 +329,15 @@ class acf_field_wysiwyg extends acf_field
 		?>
 	</td>
 </tr>
-<tr class="field_option field_option_<?php echo $this->name; ?>">
+<tr class="field_option field_option_<?php echo esc_attr($this->name); ?>">
 	<td class="label">
-		<label><?php _e("Show Media Upload Buttons?",'acf'); ?></label>
+		<label><?php esc_html_e("Show Media Upload Buttons?",'acf'); ?></label>
 	</td>
 	<td>
-		<?php 
+		<?php
 		do_action('acf/create_field', array(
 			'type'	=>	'radio',
-			'name'	=>	'fields['.$key.'][media_upload]',
+			'name'	=>	'fields['. esc_attr($key) .'][media_upload]',
 			'value'	=>	$field['media_upload'],
 			'layout'	=>	'horizontal',
 			'choices' => array(
@@ -350,8 +350,8 @@ class acf_field_wysiwyg extends acf_field
 </tr>
 		<?php
 	}
-		
-	
+
+
 	/*
 	*  format_value_for_api()
 	*
@@ -367,22 +367,22 @@ class acf_field_wysiwyg extends acf_field
 	*
 	*  @return	$value	- the modified value
 	*/
-	
+
 	function format_value_for_api( $value, $post_id, $field )
 	{
 		// apply filters
 		$value = apply_filters( 'acf_the_content', $value );
-		
-		
+
+
 		// follow the_content function in /wp-includes/post-template.php
 		$value = str_replace(']]>', ']]&gt;', $value);
-		
-	
+
+
 		return $value;
 	}
-	
+
 }
 
 new acf_field_wysiwyg();
 
-?>
\ No newline at end of file
+?>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_fields.php b/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_fields.php
index 0895359..4090f2a 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_fields.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_fields.php
@@ -9,7 +9,7 @@
 *  @date	26/01/13
 */
 
- 
+
 // global
 global $post, $field_types;
 
@@ -43,7 +43,7 @@ function field_type_exists( $name )
 			return $category[ $name ];
 		}
 	}
-	
+
 	return false;
 }
 
@@ -55,8 +55,8 @@ $conditional_logic_rule = array(
 	'value' => ''
 );
 
-$error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does not exist', 'acf');
-		
+$error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . esc_html__('Field type does not exist', 'acf');
+
 ?>
 
 <!-- Hidden Fields -->
@@ -71,11 +71,11 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 	<table class="acf widefat">
 		<thead>
 			<tr>
-				<th class="field_order"><?php _e('Field Order','acf'); ?></th>
-				<th class="field_label"><?php _e('Field Label','acf'); ?></th>
-				<th class="field_name"><?php _e('Field Name','acf'); ?></th>
-				<th class="field_type"><?php _e('Field Type','acf'); ?></th>
-				<th class="field_key"><?php _e('Field Key','acf'); ?></th>
+				<th class="field_order"><?php esc_html_e('Field Order','acf'); ?></th>
+				<th class="field_label"><?php esc_html_e('Field Label','acf'); ?></th>
+				<th class="field_name"><?php esc_html_e('Field Name','acf'); ?></th>
+				<th class="field_type"><?php esc_html_e('Field Type','acf'); ?></th>
+				<th class="field_key"><?php esc_html_e('Field Key','acf'); ?></th>
 			</tr>
 		</thead>
 	</table>
@@ -84,53 +84,53 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 
 
 <div class="fields">
-	
+
 	<!-- No Fields Message -->
 	<div class="no_fields_message" <?php if(count($fields) > 1){ echo 'style="display:none;"'; } ?>>
-		<?php _e("No fields. Click the <strong>+ Add Field</strong> button to create your first field.",'acf'); ?>
+		<?php esc_html_e("No fields. Click the <strong>+ Add Field</strong> button to create your first field.",'acf'); ?>
 	</div>
 	<!-- / No Fields Message -->
-	
-	<?php foreach($fields as $field): 
+
+	<?php foreach($fields as $field):
 		$fake_name = $field['key'];
 	?>
-	<div class="field field_type-<?php echo $field['type']; ?> field_key-<?php echo $field['key']; ?>" data-type="<?php echo $field['type']; ?>" data-id="<?php echo $field['key']; ?>">
-		<input type="hidden" class="input-field_key" name="fields[<?php echo $field['key']; ?>][key]" value="<?php echo $field['key']; ?>" />
+	<div class="field field_type-<?php echo esc_attr($field['type']); ?> field_key-<?php echo esc_attr($field['key']); ?>" data-type="<?php echo esc_attr($field['type']); ?>" data-id="<?php echo esc_attr($field['key']); ?>">
+		<input type="hidden" class="input-field_key" name="fields[<?php echo esc_attr($field['key']); ?>][key]" value="<?php echo esc_attr($field['key']); ?>" />
 		<div class="field_meta">
 			<table class="acf widefat">
 				<tr>
 					<td class="field_order"><span class="circle"><?php echo (int)$field['order_no'] + 1; ?></span></td>
 					<td class="field_label">
 						<strong>
-							<a class="acf_edit_field row-title" title="<?php _e("Edit this Field",'acf'); ?>" href="javascript:;"><?php echo $field['label']; ?></a>
+							<a class="acf_edit_field row-title" title="<?php esc_attr_e("Edit this Field",'acf'); ?>" href="javascript:;"><?php echo esc_html($field['label']); ?></a>
 						</strong>
 						<div class="row_options">
-							<span><a class="acf_edit_field" title="<?php _e("Edit this Field",'acf'); ?>" href="javascript:;"><?php _e("Edit",'acf'); ?></a> | </span>
-							<span><a class="acf_duplicate_field" title="<?php _e("Duplicate this Field",'acf'); ?>" href="javascript:;"><?php _e("Duplicate",'acf'); ?></a> | </span>
-							<span><a class="acf_delete_field" title="<?php _e("Delete this Field",'acf'); ?>" href="javascript:;"><?php _e("Delete",'acf'); ?></a></span>
+							<span><a class="acf_edit_field" title="<?php esc_attr_e("Edit this Field",'acf'); ?>" href="javascript:;"><?php esc_html_e("Edit",'acf'); ?></a> | </span>
+							<span><a class="acf_duplicate_field" title="<?php esc_attr_e("Duplicate this Field",'acf'); ?>" href="javascript:;"><?php esc_html_e("Duplicate",'acf'); ?></a> | </span>
+							<span><a class="acf_delete_field" title="<?php esc_attr_e("Delete this Field",'acf'); ?>" href="javascript:;"><?php esc_html_e("Delete",'acf'); ?></a></span>
 						</div>
 					</td>
-					<td class="field_name"><?php echo $field['name']; ?></td>
+					<td class="field_name"><?php echo esc_html($field['name']); ?></td>
 					<td class="field_type"><?php $l = field_type_exists( $field['type'] ); if( $l ){ echo $l; }else{ echo $error_field_type; } ?></td>
-					<td class="field_key"><?php echo $field['key']; ?></td>
+					<td class="field_key"><?php echo esc_html($field['key']); ?></td>
 				</tr>
 			</table>
 		</div>
 		<div class="field_form_mask">
 			<div class="field_form">
-				
+
 				<table class="acf_input widefat acf_field_form_table">
 					<tbody>
 						<tr class="field_label">
 							<td class="label">
-								<label><?php _e("Field Label",'acf'); ?><span class="required">*</span></label>
-								<p class="description"><?php _e("This is the name which will appear on the EDIT page",'acf'); ?></p>
+								<label><?php esc_html_e("Field Label",'acf'); ?><span class="required">*</span></label>
+								<p class="description"><?php esc_html_e("This is the name which will appear on the EDIT page",'acf'); ?></p>
 							</td>
 							<td>
-								<?php 
+								<?php
 								do_action('acf/create_field', array(
 									'type'	=>	'text',
-									'name'	=>	'fields[' .$fake_name . '][label]',
+									'name'	=>	'fields[' . esc_attr($fake_name) . '][label]',
 									'value'	=>	$field['label'],
 									'class'	=>	'label',
 								));
@@ -139,14 +139,14 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 						</tr>
 						<tr class="field_name">
 							<td class="label">
-								<label><?php _e("Field Name",'acf'); ?><span class="required">*</span></label>
-								<p class="description"><?php _e("Single word, no spaces. Underscores and dashes allowed",'acf'); ?></p>
+								<label><?php esc_html_e("Field Name",'acf'); ?><span class="required">*</span></label>
+								<p class="description"><?php esc_html_e("Single word, no spaces. Underscores and dashes allowed",'acf'); ?></p>
 							</td>
 							<td>
-								<?php 
+								<?php
 								do_action('acf/create_field', array(
 									'type'	=>	'text',
-									'name'	=>	'fields[' .$fake_name . '][name]',
+									'name'	=>	'fields[' . esc_attr($fake_name) . '][name]',
 									'value'	=>	$field['name'],
 									'class'	=>	'name',
 								));
@@ -155,13 +155,13 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 						</tr>
 						<tr class="field_type">
 							<td class="label">
-								<label><?php _e("Field Type",'acf'); ?><span class="required">*</span></label>
+								<label><?php esc_html_e("Field Type",'acf'); ?><span class="required">*</span></label>
 							</td>
 							<td>
 								<?php
 								do_action('acf/create_field', array(
 									'type'		=>	'select',
-									'name'		=>	'fields[' .$fake_name . '][type]',
+									'name'		=>	'fields[' . esc_attr($fake_name) . '][type]',
 									'value'		=>	$field['type'],
 									'choices' 	=>	$field_types,
 								));
@@ -169,13 +169,13 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 							</td>
 						</tr>
 						<tr class="field_instructions">
-							<td class="label"><label><?php _e("Field Instructions",'acf'); ?></label>
-							<p class="description"><?php _e("Instructions for authors. Shown when submitting data",'acf'); ?></p></td>
+							<td class="label"><label><?php esc_html_e("Field Instructions",'acf'); ?></label>
+							<p class="description"><?php esc_html_e("Instructions for authors. Shown when submitting data",'acf'); ?></p></td>
 							<td>
-								<?php 
+								<?php
 								do_action('acf/create_field', array(
 									'type'	=>	'textarea',
-									'name'	=>	'fields[' .$fake_name . '][instructions]',
+									'name'	=>	'fields[' . esc_attr($fake_name) . '][instructions]',
 									'value'	=>	$field['instructions'],
 									'rows'	=> 6
 								));
@@ -183,12 +183,12 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 							</td>
 						</tr>
 						<tr class="required">
-							<td class="label"><label><?php _e("Required?",'acf'); ?></label></td>
+							<td class="label"><label><?php esc_html_e("Required?",'acf'); ?></label></td>
 							<td>
-								<?php 
+								<?php
 								do_action('acf/create_field', array(
 									'type'	=>	'radio',
-									'name'	=>	'fields[' .$fake_name . '][required]',
+									'name'	=>	'fields[' . esc_attr($fake_name) . '][required]',
 									'value'	=>	$field['required'],
 									'choices'	=>	array(
 										1	=>	__("Yes",'acf'),
@@ -199,19 +199,19 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 								?>
 							</td>
 						</tr>
-						<?php 
-						
+						<?php
+
 						$field['name'] = $fake_name;
 						do_action('acf/create_field_options', $field );
-						
+
 						?>
-						<tr class="conditional-logic" data-field_name="<?php echo $field['key']; ?>">
-							<td class="label"><label><?php _e("Conditional Logic",'acf'); ?></label></td>
+						<tr class="conditional-logic" data-field_name="<?php echo esc_attr($field['key']); ?>">
+							<td class="label"><label><?php esc_html_e("Conditional Logic",'acf'); ?></label></td>
 							<td>
-								<?php 
+								<?php
 								do_action('acf/create_field', array(
 									'type'	=>	'radio',
-									'name'	=>	'fields['.$field['key'].'][conditional_logic][status]',
+									'name'	=>	'fields['. esc_attr($field['key']) .'][conditional_logic][status]',
 									'value'	=>	$field['conditional_logic']['status'],
 									'choices'	=>	array(
 										1	=>	__("Yes",'acf'),
@@ -219,8 +219,8 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 									),
 									'layout'	=>	'horizontal',
 								));
-								
-								
+
+
 								// no rules?
 								if( ! $field['conditional_logic']['rules'] )
 								{
@@ -228,33 +228,33 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 										array() // this will get merged with $conditional_logic_rule
 									);
 								}
-								
+
 								?>
 								<div class="contional-logic-rules-wrapper" <?php if( ! $field['conditional_logic']['status'] ) echo 'style="display:none"'; ?>>
 									<table class="conditional-logic-rules widefat acf-rules <?php if( count($field['conditional_logic']['rules']) == 1) echo 'remove-disabled'; ?>">
 										<tbody>
-										<?php foreach( $field['conditional_logic']['rules'] as $rule_i => $rule ): 
-											
+										<?php foreach( $field['conditional_logic']['rules'] as $rule_i => $rule ):
+
 											// validate
 											$rule = array_merge($conditional_logic_rule, $rule);
-											
-											
+
+
 											// fix PHP error in 3.5.4.1
 											if( strpos($rule['value'],'Undefined index: value in') !== false  )
 											{
 												$rule['value'] = '';
 											}
-											
+
 											?>
 											<tr data-i="<?php echo $rule_i; ?>">
 												<td>
-													<input class="conditional-logic-field" type="hidden" name="fields[<?php echo $field['key']; ?>][conditional_logic][rules][<?php echo $rule_i; ?>][field]" value="<?php echo $rule['field']; ?>" />
+													<input class="conditional-logic-field" type="hidden" name="fields[<?php echo $field['key']; ?>][conditional_logic][rules][<?php echo esc_attr($rule_i); ?>][field]" value="<?php echo esc_attr($rule['field']); ?>" />
 												</td>
 												<td width="25%">
-													<?php 
+													<?php
 													do_action('acf/create_field', array(
 														'type'	=>	'select',
-														'name'	=>	'fields['.$field['key'].'][conditional_logic][rules][' . $rule_i . '][operator]',
+														'name'	=>	'fields['. esc_attr($field['key']) .'][conditional_logic][rules][' . esc_attr($rule_i) . '][operator]',
 														'value'	=>	$rule['operator'],
 														'choices'	=>	array(
 															'=='	=>	__("is equal to",'acf'),
@@ -263,36 +263,36 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 													));
 													?>
 												</td>
-												<td><input class="conditional-logic-value" type="hidden" name="fields[<?php echo $field['key']; ?>][conditional_logic][rules][<?php echo $rule_i; ?>][value]" value="<?php echo $rule['value']; ?>" /></td>
+												<td><input class="conditional-logic-value" type="hidden" name="fields[<?php echo esc_attr($field['key']); ?>][conditional_logic][rules][<?php echo esc_attr($rule_i); ?>][value]" value="<?php echo esc_attr($rule['value']); ?>" /></td>
 												<td class="buttons">
 													<ul class="hl clearfix">
 														<li><a class="acf-button-remove" href="javascript:;"></a></li>
 														<li><a class="acf-button-add" href="javascript:;"></a></li>
 													</ul>
 												</td>
-											</tr>	
+											</tr>
 										<?php endforeach; ?>
 										</tbody>
 									</table>
-									
+
 									<ul class="hl clearfix">
-										<li style="padding:4px 4px 0 0;"><?php _e("Show this field when",'acf'); ?></li>
+										<li style="padding:4px 4px 0 0;"><?php esc_html_e("Show this field when",'acf'); ?></li>
 										<li><?php do_action('acf/create_field', array(
 												'type'	=>	'select',
-												'name'	=>	'fields['.$field['key'].'][conditional_logic][allorany]',
+												'name'	=>	'fields['. esc_attr($field['key']) .'][conditional_logic][allorany]',
 												'value'	=>	$field['conditional_logic']['allorany'],
 												'choices' => array(
 													'all'	=>	__("all",'acf'),
-													'any'	=>	__("any",'acf'),							
+													'any'	=>	__("any",'acf'),
 												),
 										)); ?></li>
-										<li style="padding:4px 0 0 4px;"><?php _e("these rules are met",'acf'); ?></li>
+										<li style="padding:4px 0 0 4px;"><?php esc_html_e("these rules are met",'acf'); ?></li>
 									</ul>
-									
+
 								</div>
-								
 
-								
+
+
 							</td>
 						</tr>
 						<tr class="field_save">
@@ -300,7 +300,7 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 							<td>
 								<ul class="hl clearfix">
 									<li>
-										<a class="acf_edit_field acf-button grey" title="<?php _e("Close Field",'acf'); ?>" href="javascript:;"><?php _e("Close Field",'acf'); ?></a>
+										<a class="acf_edit_field acf-button grey" title="<?php esc_html_e("Close Field",'acf'); ?>" href="javascript:;"><?php esc_html_e("Close Field",'acf'); ?></a>
 									</li>
 								</ul>
 							</td>
@@ -308,11 +308,11 @@ $error_field_type = '<b>' . __('Error', 'acf') . '</b> ' . __('Field type does n
 					</tbody>
 				</table>
 			</div>
-		</div>	
+		</div>
 	</div>
 	<?php endforeach; ?>
 </div>
 <div class="table_footer">
-	<div class="order_message"><?php _e('Drag and drop to reorder','acf'); ?></div>
-	<a href="javascript:;" id="add_field" class="acf-button"><?php _e('+ Add Field','acf'); ?></a>
-</div>
\ No newline at end of file
+	<div class="order_message"><?php esc_html_e('Drag and drop to reorder','acf'); ?></div>
+	<a href="javascript:;" id="add_field" class="acf-button"><?php esc_html_e('+ Add Field','acf'); ?></a>
+</div>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_location.php b/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_location.php
index d5725d7..4a06aba 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_location.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_location.php
@@ -12,8 +12,8 @@
 
 // global
 global $post;
-		
-		
+
+
 // vars
 $groups = apply_filters('acf/field_group/get_location', array(), $post->ID);
 
@@ -22,10 +22,10 @@ $groups = apply_filters('acf/field_group/get_location', array(), $post->ID);
 if( empty($groups) )
 {
 	$groups = array(
-		
+
 		// group_0
 		array(
-			
+
 			// rule_0
 			array(
 				'param'		=>	'post_type',
@@ -35,7 +35,7 @@ if( empty($groups) )
 				'group_no'	=>	0
 			)
 		)
-		
+
 	);
 }
 
@@ -45,31 +45,31 @@ if( empty($groups) )
 	<tbody>
 	<tr>
 		<td class="label">
-			<label for="post_type"><?php _e("Rules",'acf'); ?></label>
-			<p class="description"><?php _e("Create a set of rules to determine which edit screens will use these advanced custom fields",'acf'); ?></p>
+			<label for="post_type"><?php esc_html_e("Rules",'acf'); ?></label>
+			<p class="description"><?php esc_html_e("Create a set of rules to determine which edit screens will use these advanced custom fields",'acf'); ?></p>
 		</td>
 		<td>
 			<div class="location-groups">
-				
+
 <?php if( is_array($groups) ): ?>
-	<?php foreach( $groups as $group_id => $group ): 
+	<?php foreach( $groups as $group_id => $group ):
 		$group_id = 'group_' . $group_id;
 		?>
-		<div class="location-group" data-id="<?php echo $group_id; ?>">
+		<div class="location-group" data-id="<?php echo esc_attr($group_id); ?>">
 			<?php if( $group_id == 'group_0' ): ?>
-				<h4><?php _e("Show this field group if",'acf'); ?></h4>
+				<h4><?php esc_html_e("Show this field group if",'acf'); ?></h4>
 			<?php else: ?>
-				<h4><?php _e("or",'acf'); ?></h4>
+				<h4><?php esc_html_e("or",'acf'); ?></h4>
 			<?php endif; ?>
 			<?php if( is_array($group) ): ?>
 			<table class="acf_input widefat">
 				<tbody>
-					<?php foreach( $group as $rule_id => $rule ): 
+					<?php foreach( $group as $rule_id => $rule ):
 						$rule_id = 'rule_' . $rule_id;
 					?>
-					<tr data-id="<?php echo $rule_id; ?>">
-					<td class="param"><?php 
-						
+					<tr data-id="<?php echo esc_attr($rule_id); ?>">
+					<td class="param"><?php
+
 						$choices = array(
 							__("Basic",'acf') => array(
 								'post_type'		=>	__("Post Type",'acf'),
@@ -94,56 +94,56 @@ if( empty($groups) )
 								'ef_user'		=>	__("User",'acf'),
 							)
 						);
-								
-						
+
+
 						// allow custom location rules
 						$choices = apply_filters( 'acf/location/rule_types', $choices );
-						
-						
+
+
 						// create field
 						$args = array(
 							'type'	=>	'select',
-							'name'	=>	'location[' . $group_id . '][' . $rule_id . '][param]',
+							'name'	=>	'location[' . esc_attr($group_id) . '][' . esc_attr($rule_id) . '][param]',
 							'value'	=>	$rule['param'],
 							'choices' => $choices,
 						);
-						
-						do_action('acf/create_field', $args);							
-						
+
+						do_action('acf/create_field', $args);
+
 					?></td>
-					<td class="operator"><?php 	
-						
+					<td class="operator"><?php
+
 						$choices = array(
 							'=='	=>	__("is equal to",'acf'),
 							'!='	=>	__("is not equal to",'acf'),
 						);
-						
-						
+
+
 						// allow custom location rules
 						$choices = apply_filters( 'acf/location/rule_operators', $choices );
-						
-						
+
+
 						// create field
 						do_action('acf/create_field', array(
 							'type'	=>	'select',
-							'name'	=>	'location[' . $group_id . '][' . $rule_id . '][operator]',
+							'name'	=>	'location[' . esc_attr($group_id) . '][' . esc_attr($rule_id) . '][operator]',
 							'value'	=>	$rule['operator'],
 							'choices' => $choices
-						)); 	
-						
+						));
+
 					?></td>
-					<td class="value"><?php 
-						
+					<td class="value"><?php
+
 						$this->ajax_render_location(array(
 							'group_id' => $group_id,
 							'rule_id' => $rule_id,
 							'value' => $rule['value'],
 							'param' => $rule['param'],
-						)); 
-						
+						));
+
 					?></td>
 					<td class="add">
-						<a href="#" class="location-add-rule button"><?php _e("and",'acf'); ?></a>
+						<a href="#" class="location-add-rule button"><?php esc_html_e("and",'acf'); ?></a>
 					</td>
 					<td class="remove">
 						<a href="#" class="location-remove-rule acf-button-remove"></a>
@@ -155,15 +155,15 @@ if( empty($groups) )
 			<?php endif; ?>
 		</div>
 	<?php endforeach; ?>
-	
-	<h4><?php _e("or",'acf'); ?></h4>
-	
-	<a class="button location-add-group" href="#"><?php _e("Add rule group",'acf'); ?></a>
-	
+
+	<h4><?php esc_html_e("or",'acf'); ?></h4>
+
+	<a class="button location-add-group" href="#"><?php esc_html_e("Add rule group",'acf'); ?></a>
+
 <?php endif; ?>
-				
+
 			</div>
 		</td>
 	</tr>
 	</tbody>
-</table>
\ No newline at end of file
+</table>
diff --git a/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_options.php b/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_options.php
index b94b1a1..13278f5 100644
--- a/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_options.php
+++ b/html/wp-content/plugins/advanced-custom-fields/core/views/meta_box_options.php
@@ -13,37 +13,37 @@
 // global
 global $post;
 
-	
+
 // vars
 $options = apply_filters('acf/field_group/get_options', array(), $post->ID);
-	
+
 
 ?>
 <table class="acf_input widefat" id="acf_options">
 	<tr>
 		<td class="label">
-			<label for=""><?php _e("Order No.",'acf'); ?></label>
-			<p class="description"><?php _e("Field groups are created in order <br />from lowest to highest",'acf'); ?></p>
+			<label for=""><?php esc_html_e("Order No.",'acf'); ?></label>
+			<p class="description"><?php esc_html_e("Field groups are created in order <br />from lowest to highest",'acf'); ?></p>
 		</td>
 		<td>
-			<?php 
-			
+			<?php
+
 			do_action('acf/create_field', array(
 				'type'	=>	'number',
 				'name'	=>	'menu_order',
 				'value'	=>	$post->menu_order,
 			));
-			
+
 			?>
 		</td>
 	</tr>
 	<tr>
 		<td class="label">
-			<label for=""><?php _e("Position",'acf'); ?></label>
+			<label for=""><?php esc_html_e("Position",'acf'); ?></label>
 		</td>
 		<td>
-			<?php 
-			
+			<?php
+
 			do_action('acf/create_field', array(
 				'type'	=>	'select',
 				'name'	=>	'options[position]',
@@ -61,11 +61,11 @@ $options = apply_filters('acf/field_group/get_options', array(), $post->ID);
 	</tr>
 	<tr>
 		<td class="label">
-			<label for="post_type"><?php _e("Style",'acf'); ?></label>
+			<label for="post_type"><?php esc_html_e("Style",'acf'); ?></label>
 		</td>
 		<td>
-			<?php 
-			
+			<?php
+
 			do_action('acf/create_field', array(
 				'type'	=>	'select',
 				'name'	=>	'options[layout]',
@@ -75,19 +75,19 @@ $options = apply_filters('acf/field_group/get_options', array(), $post->ID);
 					'default'			=>	__("Standard (WP metabox)",'acf'),
 				)
 			));
-			
+
 			?>
 		</td>
 	</tr>
 	<tr id="hide-on-screen">
 		<td class="label">
-			<label for="post_type"><?php _e("Hide on screen",'acf'); ?></label>
-			<p class="description"><?php _e("<b>Select</b> items to <b>hide</b> them from the edit screen",'acf'); ?></p>
-			<p class="description"><?php _e("If multiple field groups appear on an edit screen, the first field group's options will be used. (the one with the lowest order number)",'acf'); ?></p>
+			<label for="post_type"><?php esc_html_e("Hide on screen",'acf'); ?></label>
+			<p class="description"><?php esc_html_e("<b>Select</b> items to <b>hide</b> them from the edit screen",'acf'); ?></p>
+			<p class="description"><?php esc_html_e("If multiple field groups appear on an edit screen, the first field group's options will be used. (the one with the lowest order number)",'acf'); ?></p>
 		</td>
 		<td>
-			<?php 
-			
+			<?php
+
 			do_action('acf/create_field', array(
 				'type'	=>	'checkbox',
 				'name'	=>	'options[hide_on_screen]',
@@ -109,8 +109,8 @@ $options = apply_filters('acf/field_group/get_options', array(), $post->ID);
 					'send-trackbacks'	=>	__("Send Trackbacks", 'acf'),
 				)
 			));
-			
+
 			?>
 		</td>
 	</tr>
-</table>
\ No newline at end of file
+</table>
